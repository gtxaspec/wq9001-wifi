
//-----------------------------------
#define CFG_MAC_RX_CTRL_ADDR 0x0000
#define SW_MAC_RX_PHY_RATE_PROT_EN_OFFSET 20
#define SW_MAC_RX_PHY_RATE_PROT_EN_MASK 0x00100000
#define SW_MAC_RX_MPDU_LEN_PROT_EN_OFFSET 19
#define SW_MAC_RX_MPDU_LEN_PROT_EN_MASK 0x00080000
#define SW_AMPDU_IGNORE_DELIM_SIG_EN_OFFSET 18
#define SW_AMPDU_IGNORE_DELIM_SIG_EN_MASK 0x00040000
#define SW_CFEND_FORCE_SET_NAV_ZERO_EN_OFFSET 17
#define SW_CFEND_FORCE_SET_NAV_ZERO_EN_MASK 0x00020000
#define SW_CTS_CHECK_RING_RESP_EN_OFFSET 16
#define SW_CTS_CHECK_RING_RESP_EN_MASK 0x00010000
#define SW_BA_CHECK_RING_RESP_EN_OFFSET 15
#define SW_BA_CHECK_RING_RESP_EN_MASK 0x00008000
#define SW_ACK_CHECK_RING_RESP_EN_OFFSET 14
#define SW_ACK_CHECK_RING_RESP_EN_MASK 0x00004000
#define SW_RX_HT_MGMT_HTC_EXIST_EN_OFFSET 13
#define SW_RX_HT_MGMT_HTC_EXIST_EN_MASK 0x00002000
#define SW_RX_CRC_REORDER_EN_OFFSET 12
#define SW_RX_CRC_REORDER_EN_MASK 0x00001000
#define SW_NOT_HW_NAV_UPDATE_OFFSET 11
#define SW_NOT_HW_NAV_UPDATE_MASK 0x00000800
#define SW_FORCE_RESPONSE_CTS_EN_OFFSET 10
#define SW_FORCE_RESPONSE_CTS_EN_MASK 0x00000400
#define SW_FORCE_RESPONSE_BA_EN_OFFSET 9
#define SW_FORCE_RESPONSE_BA_EN_MASK 0x00000200
#define SW_FORCE_RESPONSE_ACK_EN_OFFSET 8
#define SW_FORCE_RESPONSE_ACK_EN_MASK 0x00000100
#define SW_MAC_RX_PROT_EN_OFFSET 7
#define SW_MAC_RX_PROT_EN_MASK 0x00000080
#define SW_NOT_RESPONSE_CTS_EN_OFFSET 6
#define SW_NOT_RESPONSE_CTS_EN_MASK 0x00000040
#define SW_NOT_RESPONSE_BA_EN_OFFSET 5
#define SW_NOT_RESPONSE_BA_EN_MASK 0x00000020
#define SW_NOT_RESPONSE_ACK_EN_OFFSET 4
#define SW_NOT_RESPONSE_ACK_EN_MASK 0x00000010
#define SW_FORCE_NO_DECRYPT_EN_OFFSET 3
#define SW_FORCE_NO_DECRYPT_EN_MASK 0x00000008
#define SW_FORCE_MPDU_A_RX_DESC_EN_OFFSET 2
#define SW_FORCE_MPDU_A_RX_DESC_EN_MASK 0x00000004
#define SW_TOO_LONG_ACK_EN_OFFSET 1
#define SW_TOO_LONG_ACK_EN_MASK 0x00000002
#define SW_MAC_RX_DISABLE_OFFSET 0
#define SW_MAC_RX_DISABLE_MASK 0x00000001

//-----------------------------------
#define CFG_MAC_RX_ABORT_ADDR 0x0004
#define SW_MAC_RX_ABORT_OFFSET 0
#define SW_MAC_RX_ABORT_MASK 0x00000001

//-----------------------------------
#define CFG_MAC_RX_DBG_SIGTAP_CTRL_ADDR 0x0008
#define SW_MAC_RX_SIGTAP_MUX_OFFSET 8
#define SW_MAC_RX_SIGTAP_MUX_MASK 0x00000F00
#define SW_MAC_RX_SIGTAP_TRIG_MUX_OFFSET 0
#define SW_MAC_RX_SIGTAP_TRIG_MUX_MASK 0x000000FF

//-----------------------------------
#define CFG_MAC_RX_DBG_CTRL_ADDR 0x0010
#define SW_MAC_RX_DBG_GENERAL_CLR_OFFSET 0
#define SW_MAC_RX_DBG_GENERAL_CLR_MASK 0x00000001

//-----------------------------------
#define CFG_MAC_RESP_CTRL_ADDR 0x0020
#define SW_ACK_CHECK_RX_DURATION_EN_OFFSET 5
#define SW_ACK_CHECK_RX_DURATION_EN_MASK 0x00000020
#define SW_RX_FILTER_FAIL_RESP_CTS_EN_OFFSET 4
#define SW_RX_FILTER_FAIL_RESP_CTS_EN_MASK 0x00000010
#define SW_RX_FILTER_FAIL_RESP_BA_EN_OFFSET 3
#define SW_RX_FILTER_FAIL_RESP_BA_EN_MASK 0x00000008
#define SW_RX_FILTER_FAIL_RESP_ACK_EN_OFFSET 2
#define SW_RX_FILTER_FAIL_RESP_ACK_EN_MASK 0x00000004
#define SW_RESP_CTS_IGNORE_NAV_EN_OFFSET 1
#define SW_RESP_CTS_IGNORE_NAV_EN_MASK 0x00000002
#define SW_RESP_FC_POWER_MODE_OFFSET 0
#define SW_RESP_FC_POWER_MODE_MASK 0x00000001

//-----------------------------------
#define CFG_MAC_RESP_CTS_CTRL_ADDR 0x0024
#define SW_RESP_CTS_NAV_THRESHOLD_OFFSET 0
#define SW_RESP_CTS_NAV_THRESHOLD_MASK 0x00007FFF

//-----------------------------------
#define CFG_MAC_MPDU_LEN_PROT_LIMIT_ADDR 0x002c
#define SW_MAC_RX_MAX_VALID_MPDU_LEN_OFFSET 16
#define SW_MAC_RX_MAX_VALID_MPDU_LEN_MASK 0x3FFF0000
#define SW_MAC_RX_MIN_VALID_MPDU_LEN_OFFSET 0
#define SW_MAC_RX_MIN_VALID_MPDU_LEN_MASK 0x00003FFF

//-----------------------------------
#define CFG_MAC_RX_HT_SHORT_GI_RATE_CTRL_ADDR 0x0030
#define SW_OFDM_HT_40M_SHORT_GI_MCS_32_EN_OFFSET 16
#define SW_OFDM_HT_40M_SHORT_GI_MCS_32_EN_MASK 0x00010000
#define SW_OFDM_HT_40M_SHORT_GI_MCS_7_EN_OFFSET 15
#define SW_OFDM_HT_40M_SHORT_GI_MCS_7_EN_MASK 0x00008000
#define SW_OFDM_HT_40M_SHORT_GI_MCS_6_EN_OFFSET 14
#define SW_OFDM_HT_40M_SHORT_GI_MCS_6_EN_MASK 0x00004000
#define SW_OFDM_HT_40M_SHORT_GI_MCS_5_EN_OFFSET 13
#define SW_OFDM_HT_40M_SHORT_GI_MCS_5_EN_MASK 0x00002000
#define SW_OFDM_HT_40M_SHORT_GI_MCS_4_EN_OFFSET 12
#define SW_OFDM_HT_40M_SHORT_GI_MCS_4_EN_MASK 0x00001000
#define SW_OFDM_HT_40M_SHORT_GI_MCS_3_EN_OFFSET 11
#define SW_OFDM_HT_40M_SHORT_GI_MCS_3_EN_MASK 0x00000800
#define SW_OFDM_HT_40M_SHORT_GI_MCS_2_EN_OFFSET 10
#define SW_OFDM_HT_40M_SHORT_GI_MCS_2_EN_MASK 0x00000400
#define SW_OFDM_HT_40M_SHORT_GI_MCS_1_EN_OFFSET 9
#define SW_OFDM_HT_40M_SHORT_GI_MCS_1_EN_MASK 0x00000200
#define SW_OFDM_HT_40M_SHORT_GI_MCS_0_EN_OFFSET 8
#define SW_OFDM_HT_40M_SHORT_GI_MCS_0_EN_MASK 0x00000100
#define SW_OFDM_HT_20M_SHORT_GI_MCS_7_EN_OFFSET 7
#define SW_OFDM_HT_20M_SHORT_GI_MCS_7_EN_MASK 0x00000080
#define SW_OFDM_HT_20M_SHORT_GI_MCS_6_EN_OFFSET 6
#define SW_OFDM_HT_20M_SHORT_GI_MCS_6_EN_MASK 0x00000040
#define SW_OFDM_HT_20M_SHORT_GI_MCS_5_EN_OFFSET 5
#define SW_OFDM_HT_20M_SHORT_GI_MCS_5_EN_MASK 0x00000020
#define SW_OFDM_HT_20M_SHORT_GI_MCS_4_EN_OFFSET 4
#define SW_OFDM_HT_20M_SHORT_GI_MCS_4_EN_MASK 0x00000010
#define SW_OFDM_HT_20M_SHORT_GI_MCS_3_EN_OFFSET 3
#define SW_OFDM_HT_20M_SHORT_GI_MCS_3_EN_MASK 0x00000008
#define SW_OFDM_HT_20M_SHORT_GI_MCS_2_EN_OFFSET 2
#define SW_OFDM_HT_20M_SHORT_GI_MCS_2_EN_MASK 0x00000004
#define SW_OFDM_HT_20M_SHORT_GI_MCS_1_EN_OFFSET 1
#define SW_OFDM_HT_20M_SHORT_GI_MCS_1_EN_MASK 0x00000002
#define SW_OFDM_HT_20M_SHORT_GI_MCS_0_EN_OFFSET 0
#define SW_OFDM_HT_20M_SHORT_GI_MCS_0_EN_MASK 0x00000001

//-----------------------------------
#define CFG_MAC_RX_HT_LONG_GI_RATE_CTRL_ADDR 0x0034
#define SW_OFDM_HT_40M_LONG_GI_MCS_32_EN_OFFSET 16
#define SW_OFDM_HT_40M_LONG_GI_MCS_32_EN_MASK 0x00010000
#define SW_OFDM_HT_40M_LONG_GI_MCS_7_EN_OFFSET 15
#define SW_OFDM_HT_40M_LONG_GI_MCS_7_EN_MASK 0x00008000
#define SW_OFDM_HT_40M_LONG_GI_MCS_6_EN_OFFSET 14
#define SW_OFDM_HT_40M_LONG_GI_MCS_6_EN_MASK 0x00004000
#define SW_OFDM_HT_40M_LONG_GI_MCS_5_EN_OFFSET 13
#define SW_OFDM_HT_40M_LONG_GI_MCS_5_EN_MASK 0x00002000
#define SW_OFDM_HT_40M_LONG_GI_MCS_4_EN_OFFSET 12
#define SW_OFDM_HT_40M_LONG_GI_MCS_4_EN_MASK 0x00001000
#define SW_OFDM_HT_40M_LONG_GI_MCS_3_EN_OFFSET 11
#define SW_OFDM_HT_40M_LONG_GI_MCS_3_EN_MASK 0x00000800
#define SW_OFDM_HT_40M_LONG_GI_MCS_2_EN_OFFSET 10
#define SW_OFDM_HT_40M_LONG_GI_MCS_2_EN_MASK 0x00000400
#define SW_OFDM_HT_40M_LONG_GI_MCS_1_EN_OFFSET 9
#define SW_OFDM_HT_40M_LONG_GI_MCS_1_EN_MASK 0x00000200
#define SW_OFDM_HT_40M_LONG_GI_MCS_0_EN_OFFSET 8
#define SW_OFDM_HT_40M_LONG_GI_MCS_0_EN_MASK 0x00000100
#define SW_OFDM_HT_20M_LONG_GI_MCS_7_EN_OFFSET 7
#define SW_OFDM_HT_20M_LONG_GI_MCS_7_EN_MASK 0x00000080
#define SW_OFDM_HT_20M_LONG_GI_MCS_6_EN_OFFSET 6
#define SW_OFDM_HT_20M_LONG_GI_MCS_6_EN_MASK 0x00000040
#define SW_OFDM_HT_20M_LONG_GI_MCS_5_EN_OFFSET 5
#define SW_OFDM_HT_20M_LONG_GI_MCS_5_EN_MASK 0x00000020
#define SW_OFDM_HT_20M_LONG_GI_MCS_4_EN_OFFSET 4
#define SW_OFDM_HT_20M_LONG_GI_MCS_4_EN_MASK 0x00000010
#define SW_OFDM_HT_20M_LONG_GI_MCS_3_EN_OFFSET 3
#define SW_OFDM_HT_20M_LONG_GI_MCS_3_EN_MASK 0x00000008
#define SW_OFDM_HT_20M_LONG_GI_MCS_2_EN_OFFSET 2
#define SW_OFDM_HT_20M_LONG_GI_MCS_2_EN_MASK 0x00000004
#define SW_OFDM_HT_20M_LONG_GI_MCS_1_EN_OFFSET 1
#define SW_OFDM_HT_20M_LONG_GI_MCS_1_EN_MASK 0x00000002
#define SW_OFDM_HT_20M_LONG_GI_MCS_0_EN_OFFSET 0
#define SW_OFDM_HT_20M_LONG_GI_MCS_0_EN_MASK 0x00000001

//-----------------------------------
#define CFG_MAC_RX_NONHT_RATE_CTRL_ADDR 0x0038
#define SW_OFDM_NON_HT_40M_54MBPS_EN_OFFSET 15
#define SW_OFDM_NON_HT_40M_54MBPS_EN_MASK 0x00008000
#define SW_OFDM_NON_HT_40M_48MBPS_EN_OFFSET 14
#define SW_OFDM_NON_HT_40M_48MBPS_EN_MASK 0x00004000
#define SW_OFDM_NON_HT_40M_36MBPS_EN_OFFSET 13
#define SW_OFDM_NON_HT_40M_36MBPS_EN_MASK 0x00002000
#define SW_OFDM_NON_HT_40M_24MBPS_EN_OFFSET 12
#define SW_OFDM_NON_HT_40M_24MBPS_EN_MASK 0x00001000
#define SW_OFDM_NON_HT_40M_18MBPS_EN_OFFSET 11
#define SW_OFDM_NON_HT_40M_18MBPS_EN_MASK 0x00000800
#define SW_OFDM_NON_HT_40M_12MBPS_EN_OFFSET 10
#define SW_OFDM_NON_HT_40M_12MBPS_EN_MASK 0x00000400
#define SW_OFDM_NON_HT_40M_9MBPS_EN_OFFSET 9
#define SW_OFDM_NON_HT_40M_9MBPS_EN_MASK 0x00000200
#define SW_OFDM_NON_HT_40M_6MBPS_EN_OFFSET 8
#define SW_OFDM_NON_HT_40M_6MBPS_EN_MASK 0x00000100
#define SW_OFDM_NON_HT_20M_54MBPS_EN_OFFSET 7
#define SW_OFDM_NON_HT_20M_54MBPS_EN_MASK 0x00000080
#define SW_OFDM_NON_HT_20M_48MBPS_EN_OFFSET 6
#define SW_OFDM_NON_HT_20M_48MBPS_EN_MASK 0x00000040
#define SW_OFDM_NON_HT_20M_36MBPS_EN_OFFSET 5
#define SW_OFDM_NON_HT_20M_36MBPS_EN_MASK 0x00000020
#define SW_OFDM_NON_HT_20M_24MBPS_EN_OFFSET 4
#define SW_OFDM_NON_HT_20M_24MBPS_EN_MASK 0x00000010
#define SW_OFDM_NON_HT_20M_18MBPS_EN_OFFSET 3
#define SW_OFDM_NON_HT_20M_18MBPS_EN_MASK 0x00000008
#define SW_OFDM_NON_HT_20M_12MBPS_EN_OFFSET 2
#define SW_OFDM_NON_HT_20M_12MBPS_EN_MASK 0x00000004
#define SW_OFDM_NON_HT_20M_9MBPS_EN_OFFSET 1
#define SW_OFDM_NON_HT_20M_9MBPS_EN_MASK 0x00000002
#define SW_OFDM_NON_HT_20M_6MBPS_EN_OFFSET 0
#define SW_OFDM_NON_HT_20M_6MBPS_EN_MASK 0x00000001

//-----------------------------------
#define CFG_MAC_RX_DSSS_RATE_CTRL_ADDR 0x003c
#define SW_DSSS_SHORT_PREAMBLE_11MBPS_EN_OFFSET 6
#define SW_DSSS_SHORT_PREAMBLE_11MBPS_EN_MASK 0x00000040
#define SW_DSSS_SHORT_PREAMBLE_5P5MBPS_EN_OFFSET 5
#define SW_DSSS_SHORT_PREAMBLE_5P5MBPS_EN_MASK 0x00000020
#define SW_DSSS_SHORT_PREAMBLE_2MBPS_EN_OFFSET 4
#define SW_DSSS_SHORT_PREAMBLE_2MBPS_EN_MASK 0x00000010
#define SW_DSSS_LONG_PREAMBLE_11MBPS_EN_OFFSET 3
#define SW_DSSS_LONG_PREAMBLE_11MBPS_EN_MASK 0x00000008
#define SW_DSSS_LONG_PREAMBLE_5P5MBPS_EN_OFFSET 2
#define SW_DSSS_LONG_PREAMBLE_5P5MBPS_EN_MASK 0x00000004
#define SW_DSSS_LONG_PREAMBLE_2MBPS_EN_OFFSET 1
#define SW_DSSS_LONG_PREAMBLE_2MBPS_EN_MASK 0x00000002
#define SW_DSSS_LONG_PREAMBLE_1MBPS_EN_OFFSET 0
#define SW_DSSS_LONG_PREAMBLE_1MBPS_EN_MASK 0x00000001

//-----------------------------------
#define CFG_MAC_DECRYPT_CTRL_ADDR 0x0040
#define SW_RX_TKIP_IGNORE_MIC_EN_OFFSET 0
#define SW_RX_TKIP_IGNORE_MIC_EN_MASK 0x00000001

//-----------------------------------
#define CFG_MAC_DECRYPT_KEY_MAP_ADDR 0x0044
#define SW_RX_AES256_KEY_ID_MAP_OFFSET 12
#define SW_RX_AES256_KEY_ID_MAP_MASK 0x0000F000
#define SW_RX_AES192_KEY_ID_MAP_OFFSET 8
#define SW_RX_AES192_KEY_ID_MAP_MASK 0x00000F00
#define SW_RX_AES128_KEY_ID_MAP_OFFSET 4
#define SW_RX_AES128_KEY_ID_MAP_MASK 0x000000F0
#define SW_RX_TKIP_KEY_ID_MAP_OFFSET 0
#define SW_RX_TKIP_KEY_ID_MAP_MASK 0x0000000F

//-----------------------------------
#define CFG_MAC_RTS_RESET_NAV_CTRL_ADDR 0x0060
#define SW_RTS_RESET_NAV_EN_OFFSET 0
#define SW_RTS_RESET_NAV_EN_MASK 0x00000001

//-----------------------------------
#define CFG_MAC_RTS_RESET_NAV_TIMER_0_ADDR 0x0064
#define SW_RTS_RESET_NAV_TIMER_DSSS_LONG_OFFSET 16
#define SW_RTS_RESET_NAV_TIMER_DSSS_LONG_MASK 0xFFFF0000
#define SW_RTS_RESET_NAV_TIMER_DSSS_SHORT_OFFSET 0
#define SW_RTS_RESET_NAV_TIMER_DSSS_SHORT_MASK 0x0000FFFF

//-----------------------------------
#define CFG_MAC_RTS_RESET_NAV_TIMER_1_ADDR 0x0068
#define SW_RTS_RESET_NAV_TIMER_OFDM_NONHT_OFFSET 16
#define SW_RTS_RESET_NAV_TIMER_OFDM_NONHT_MASK 0xFFFF0000
#define SW_RTS_RESET_NAV_TIMER_OFDM_HT_OFFSET 0
#define SW_RTS_RESET_NAV_TIMER_OFDM_HT_MASK 0x0000FFFF

//-----------------------------------
#define CFG_MAC_LSIG_UPDATE_NAV_CTRL_ADDR 0x0070
#define SW_LSIG_UPDATE_NAV_EN_OFFSET 0
#define SW_LSIG_UPDATE_NAV_EN_MASK 0x00000001

//-----------------------------------
#define CFG_MAC_RX_QOS_UPDATE_BITMAP_CTRL_ADDR 0x0074
#define SW_DATA_QOSDATA_TYPE_UPDATE_EN_OFFSET 7
#define SW_DATA_QOSDATA_TYPE_UPDATE_EN_MASK 0x00000080
#define SW_DATA_QOSDATA_CFACK_TYPE_UPDATE_EN_OFFSET 6
#define SW_DATA_QOSDATA_CFACK_TYPE_UPDATE_EN_MASK 0x00000040
#define SW_DATA_QOSDATA_CFPOLL_TYPE_UPDATE_EN_OFFSET 5
#define SW_DATA_QOSDATA_CFPOLL_TYPE_UPDATE_EN_MASK 0x00000020
#define SW_DATA_QOSDATA_CFACK_CFPOLL_TYPE_UPDATE_EN_OFFSET 4
#define SW_DATA_QOSDATA_CFACK_CFPOLL_TYPE_UPDATE_EN_MASK 0x00000010
#define SW_DATA_QOSNULL_TYPE_UPDATE_EN_OFFSET 3
#define SW_DATA_QOSNULL_TYPE_UPDATE_EN_MASK 0x00000008
#define SW_DATA_RSVD0_UPDATE_EN_OFFSET 2
#define SW_DATA_RSVD0_UPDATE_EN_MASK 0x00000004
#define SW_DATA_QOS_CFPOLL_TYPE_UPDATE_EN_OFFSET 1
#define SW_DATA_QOS_CFPOLL_TYPE_UPDATE_EN_MASK 0x00000002
#define SW_DATA_QOS_CFACK_CFPOLL_TYPE_UPDATE_EN_OFFSET 0
#define SW_DATA_QOS_CFACK_CFPOLL_TYPE_UPDATE_EN_MASK 0x00000001

//-----------------------------------
#define CFG_MAC_BITMAP_INIT_WORD_HIGH_ADDR 0x0078
#define SW_BA_BITMAP_INIT_WORD_HIGH_OFFSET 0
#define SW_BA_BITMAP_INIT_WORD_HIGH_MASK 0xFFFFFFFF

//-----------------------------------
#define CFG_MAC_BITMAP_INIT_WORD_LOW_ADDR 0x007c
#define SW_BA_BITMAP_INIT_WORD_LOW_OFFSET 0
#define SW_BA_BITMAP_INIT_WORD_LOW_MASK 0xFFFFFFFF

//-----------------------------------
#define CFG_MAC_RX_AMSDU_CTRL_ADDR 0x0100
#define SW_AMSDU_SPLIT_EN_OFFSET 0
#define SW_AMSDU_SPLIT_EN_MASK 0x00000001

//-----------------------------------
#define CFG_MAC_RX_AMPDU_CTRL_ADDR 0x0104
#define SW_MAC_RX_UNUSE_OFFSET 0
#define SW_MAC_RX_UNUSE_MASK 0x00000001

//-----------------------------------
#define CFG_MAC_RX_FSM_START_TIMEOUT_ADDR 0x0120
#define SW_MAC_RX_FSM_START_TIMEOUT_OFFSET 0
#define SW_MAC_RX_FSM_START_TIMEOUT_MASK 0xFFFFFFFF

//-----------------------------------
#define CFG_MAC_RX_FSM_DONE_TIMEOUT_ADDR 0x0124
#define SW_MAC_RX_FSM_DONE_TIMEOUT_OFFSET 0
#define SW_MAC_RX_FSM_DONE_TIMEOUT_MASK 0xFFFFFFFF

//-----------------------------------
#define CFG_MAC_RX_FSM_START_CTRL_ADDR 0x0128
#define SW_MAC_RX_TIMEOUT_TYPE_CHOS_OFFSET 8
#define SW_MAC_RX_TIMEOUT_TYPE_CHOS_MASK 0x00000100
#define SW_MAC_RX_FSM_START_TIMEOUT_DELTA_OFFSET 0
#define SW_MAC_RX_FSM_START_TIMEOUT_DELTA_MASK 0x000000FF

//-----------------------------------
#define CFG_MAC_RX_BCN_CTRL_ADDR 0x0170
#define SW_RX_BCN_TIMESTAMP_OFFSET_EN_OFFSET 8
#define SW_RX_BCN_TIMESTAMP_OFFSET_EN_MASK 0x00000100
#define SW_RX_BCN_TIMESTAMP_OFFSET_OFFSET 0
#define SW_RX_BCN_TIMESTAMP_OFFSET_MASK 0x000000FF

//-----------------------------------
#define CFG_MAC_RX_BCN_INT_CTRL_ADDR 0x0180
#define SW_BCN_STORE_TIM_LEN_OFFSET 8
#define SW_BCN_STORE_TIM_LEN_MASK 0x00001F00
#define SW_BCN_STORE_TIM_OFFSET_OFFSET 0
#define SW_BCN_STORE_TIM_OFFSET_MASK 0x000000FF

//-----------------------------------
#define CFG_MAC_RX_BCN_TIM_WORD_0_ADDR 0x0190
#define SW_RO_BCN_TIM_WORD_0_OFFSET 0
#define SW_RO_BCN_TIM_WORD_0_MASK 0xFFFFFFFF

//-----------------------------------
#define CFG_MAC_RX_BCN_TIM_WORD_1_ADDR 0x0194
#define SW_RO_BCN_TIM_WORD_1_OFFSET 0
#define SW_RO_BCN_TIM_WORD_1_MASK 0xFFFFFFFF

//-----------------------------------
#define CFG_MAC_RX_BCN_TIM_WORD_2_ADDR 0x0198
#define SW_RO_BCN_TIM_WORD_2_OFFSET 0
#define SW_RO_BCN_TIM_WORD_2_MASK 0xFFFFFFFF

//-----------------------------------
#define CFG_MAC_RX_BCN_TIM_WORD_3_ADDR 0x019c
#define SW_RO_BCN_TIM_WORD_3_OFFSET 0
#define SW_RO_BCN_TIM_WORD_3_MASK 0xFFFFFFFF

//-----------------------------------
#define CFG_MAC_RX_FILTER_RULE_0_ADDR 0x0200
#define SW_ADDR_FILTER_EN_OFFSET 4
#define SW_ADDR_FILTER_EN_MASK 0x000000F0
#define SW_PV_FILTER_EN_OFFSET 0
#define SW_PV_FILTER_EN_MASK 0x0000000F

//-----------------------------------
#define CFG_MAC_RX_FILTER_RULE_1_ADDR 0x0204
#define SW_TYPE_FILTER_EN_0_OFFSET 0
#define SW_TYPE_FILTER_EN_0_MASK 0xFFFFFFFF

//-----------------------------------
#define CFG_MAC_RX_FILTER_RULE_2_ADDR 0x0208
#define SW_TYPE_FILTER_EN_1_OFFSET 0
#define SW_TYPE_FILTER_EN_1_MASK 0xFFFFFFFF

//-----------------------------------
#define CFG_MAC_RX_FILTER_RULE_3_ADDR 0x020c
#define SW_FILTER_MPDU_BYTE_LEN_OFFSET 16
#define SW_FILTER_MPDU_BYTE_LEN_MASK 0xFFFF0000
#define SW_FILTER_MPDU_BYTE_LEN_EN_OFFSET 0
#define SW_FILTER_MPDU_BYTE_LEN_EN_MASK 0x00000001

//-----------------------------------
#define CFG_MAC_RX_FILTER_STS_0_ADDR 0x0210
#define SW_RO_RX_FILTER_PASS_CNT_OFFSET 0
#define SW_RO_RX_FILTER_PASS_CNT_MASK 0x0000FFFF

//-----------------------------------
#define CFG_MAC_RX_FILTER_STS_1_ADDR 0x0214
#define SW_RO_RX_FILTER_ADDR1_FAIL_CNT_OFFSET 24
#define SW_RO_RX_FILTER_ADDR1_FAIL_CNT_MASK 0xFF000000
#define SW_RO_RX_FILTER_LEN_FAIL_CNT_OFFSET 16
#define SW_RO_RX_FILTER_LEN_FAIL_CNT_MASK 0x00FF0000
#define SW_RO_RX_FILTER_TYPE_FAIL_CNT_OFFSET 8
#define SW_RO_RX_FILTER_TYPE_FAIL_CNT_MASK 0x0000FF00
#define SW_RO_RX_FILTER_PV_FAIL_CNT_OFFSET 0
#define SW_RO_RX_FILTER_PV_FAIL_CNT_MASK 0x000000FF

//-----------------------------------
#define CFG_MAC_RX_MPDU_PARSE_STS_0_ADDR 0x0220
#define SW_RO_MPDU_PARSE_0_OFFSET 0
#define SW_RO_MPDU_PARSE_0_MASK 0xFFFFFFFF

//-----------------------------------
#define CFG_MAC_RX_MPDU_PARSE_STS_1_ADDR 0x0224
#define SW_RO_MPDU_PARSE_1_OFFSET 0
#define SW_RO_MPDU_PARSE_1_MASK 0xFFFFFFFF

//-----------------------------------
#define CFG_MAC_RX_MPDU_PARSE_STS_2_ADDR 0x0228
#define SW_RO_MPDU_PARSE_2_OFFSET 0
#define SW_RO_MPDU_PARSE_2_MASK 0xFFFFFFFF

//-----------------------------------
#define CFG_MAC_RX_MPDU_PARSE_STS_3_ADDR 0x022c
#define SW_RO_MPDU_PARSE_3_OFFSET 0
#define SW_RO_MPDU_PARSE_3_MASK 0xFFFFFFFF

//-----------------------------------
#define CFG_MAC_RX_MPDU_PARSE_STS_4_ADDR 0x0230
#define SW_RO_MPDU_PARSE_4_OFFSET 0
#define SW_RO_MPDU_PARSE_4_MASK 0xFFFFFFFF

//-----------------------------------
#define CFG_MAC_RX_MPDU_PARSE_STS_5_ADDR 0x0234
#define SW_RO_MPDU_PARSE_5_OFFSET 0
#define SW_RO_MPDU_PARSE_5_MASK 0xFFFFFFFF

//-----------------------------------
#define CFG_MAC_RX_MPDU_PARSE_STS_6_ADDR 0x0238
#define SW_RO_MPDU_PARSE_6_OFFSET 0
#define SW_RO_MPDU_PARSE_6_MASK 0xFFFFFFFF

//-----------------------------------
#define CFG_MAC_RX_MPDU_PARSE_STS_7_ADDR 0x023c
#define SW_RO_MPDU_PARSE_7_OFFSET 0
#define SW_RO_MPDU_PARSE_7_MASK 0xFFFFFFFF

//-----------------------------------
#define CFG_MAC_RX_MPDU_PARSE_STS_8_ADDR 0x0240
#define SW_RO_MPDU_PARSE_8_OFFSET 0
#define SW_RO_MPDU_PARSE_8_MASK 0xFFFFFFFF

//-----------------------------------
#define CFG_MAC_RX_MPDU_PARSE_STS_9_ADDR 0x0244
#define SW_RO_MPDU_PARSE_9_OFFSET 0
#define SW_RO_MPDU_PARSE_9_MASK 0xFFFFFFFF

//-----------------------------------
#define CFG_MAC_RX_MPDU_PARSE_STS_10_ADDR 0x0248
#define SW_RO_MPDU_PARSE_10_OFFSET 0
#define SW_RO_MPDU_PARSE_10_MASK 0xFFFFFFFF

//-----------------------------------
#define CFG_MAC_RX_MPDU_PARSE_STS_11_ADDR 0x024c
#define SW_RO_MPDU_PARSE_11_OFFSET 0
#define SW_RO_MPDU_PARSE_11_MASK 0xFFFFFFFF

//-----------------------------------
#define CFG_MAC_RX_MPDU_PARSE_STS_12_ADDR 0x0250
#define SW_RO_MPDU_PARSE_12_OFFSET 0
#define SW_RO_MPDU_PARSE_12_MASK 0xFFFFFFFF

//-----------------------------------
#define CFG_MAC_RX_MPDU_PARSE_STS_13_ADDR 0x0254
#define SW_RO_MPDU_PARSE_13_OFFSET 0
#define SW_RO_MPDU_PARSE_13_MASK 0xFFFFFFFF

//-----------------------------------
#define CFG_MAC_RX_MPDU_PARSE_STS_14_ADDR 0x0258
#define SW_RO_MPDU_PARSE_14_OFFSET 0
#define SW_RO_MPDU_PARSE_14_MASK 0xFFFFFFFF

//-----------------------------------
#define CFG_MAC_RX_MPDU_PARSE_STS_15_ADDR 0x025c
#define SW_RO_MPDU_PARSE_15_OFFSET 0
#define SW_RO_MPDU_PARSE_15_MASK 0xFFFFFFFF

//-----------------------------------
#define CFG_MAC_RX_STS_0_ADDR 0x0260
#define SW_RO_RX_MPDU_CRC_PASS_CNT_OFFSET 16
#define SW_RO_RX_MPDU_CRC_PASS_CNT_MASK 0xFFFF0000
#define SW_RO_RX_PSDU_COMPLETE_CNT_OFFSET 0
#define SW_RO_RX_PSDU_COMPLETE_CNT_MASK 0x0000FFFF

//-----------------------------------
#define CFG_MAC_RX_STS_1_ADDR 0x0264
#define SW_RO_PRS_VECTOR_0_OFFSET 0
#define SW_RO_PRS_VECTOR_0_MASK 0xFFFFFFFF

//-----------------------------------
#define CFG_MAC_RX_STS_2_ADDR 0x0268
#define SW_RO_PRS_VECTOR_1_OFFSET 0
#define SW_RO_PRS_VECTOR_1_MASK 0xFFFFFFFF

//-----------------------------------
#define CFG_MAC_RX_STS_3_ADDR 0x026c
#define SW_RO_PRS_VECTOR_2_OFFSET 0
#define SW_RO_PRS_VECTOR_2_MASK 0xFFFFFFFF

//-----------------------------------
#define CFG_MAC_RX_STS_4_ADDR 0x0270
#define SW_RO_PRS_VECTOR_3_OFFSET 0
#define SW_RO_PRS_VECTOR_3_MASK 0xFFFFFFFF

//-----------------------------------
#define CFG_MAC_RX_STS_5_ADDR 0x0274
#define SW_RO_PRD_VECTOR_0_OFFSET 0
#define SW_RO_PRD_VECTOR_0_MASK 0xFFFFFFFF

//-----------------------------------
#define CFG_MAC_RX_STS_6_ADDR 0x0278
#define SW_RO_PRD_VECTOR_1_OFFSET 0
#define SW_RO_PRD_VECTOR_1_MASK 0xFFFFFFFF

//-----------------------------------
#define CFG_MAC_RX_STS_7_ADDR 0x027c
#define SW_RO_PRD_VECTOR_2_OFFSET 0
#define SW_RO_PRD_VECTOR_2_MASK 0xFFFFFFFF

//-----------------------------------
#define CFG_MAC_RX_STS_8_ADDR 0x0280
#define SW_RO_PRD_VECTOR_3_OFFSET 0
#define SW_RO_PRD_VECTOR_3_MASK 0xFFFFFFFF

//-----------------------------------
#define CFG_MAC_RX_STS_9_ADDR 0x0284
#define SW_RO_RESP_TX_RATE_OFFSET 24
#define SW_RO_RESP_TX_RATE_MASK 0xFF000000
#define SW_RO_PSDU_MPDU_CNT_OFFSET 16
#define SW_RO_PSDU_MPDU_CNT_MASK 0x00FF0000
#define SW_RO_PSDU_BYTE_CNT_OFFSET 0
#define SW_RO_PSDU_BYTE_CNT_MASK 0x0000FFFF

//-----------------------------------
#define CFG_MAC_RX_STS_10_ADDR 0x0288
#define SW_RO_PPDU_TIMESTAMP_OFFSET 0
#define SW_RO_PPDU_TIMESTAMP_MASK 0xFFFFFFFF

//-----------------------------------
#define CFG_MAC_RX_STS_11_ADDR 0x028c
#define SW_RO_DECRYPT_HEAD_BYTE_CNT_OFFSET 16
#define SW_RO_DECRYPT_HEAD_BYTE_CNT_MASK 0x001F0000
#define SW_RO_RX_SEARCH_NODE_IDX_OFFSET 8
#define SW_RO_RX_SEARCH_NODE_IDX_MASK 0x00003F00
#define SW_RO_DECRYPT_STS_OFFSET 0
#define SW_RO_DECRYPT_STS_MASK 0x0000000F

//-----------------------------------
#define CFG_MAC_RX_STS_12_ADDR 0x0290
#define SW_RO_DECRYPT_HEAD_0_OFFSET 0
#define SW_RO_DECRYPT_HEAD_0_MASK 0xFFFFFFFF

//-----------------------------------
#define CFG_MAC_RX_STS_13_ADDR 0x0294
#define SW_RO_DECRYPT_HEAD_1_OFFSET 0
#define SW_RO_DECRYPT_HEAD_1_MASK 0xFFFFFFFF

//-----------------------------------
#define CFG_MAC_RX_STS_14_ADDR 0x0298
#define SW_RO_BAR_PLD_WORD_OFFSET 0
#define SW_RO_BAR_PLD_WORD_MASK 0xFFFFFFFF

//-----------------------------------
#define CFG_MAC_RX_STS_15_ADDR 0x029c
#define SW_RO_BA_BITMAP_LOW_WORD_OFFSET 0
#define SW_RO_BA_BITMAP_LOW_WORD_MASK 0xFFFFFFFF

//-----------------------------------
#define CFG_MAC_RX_STS_16_ADDR 0x02a0
#define SW_RO_BA_BITMAP_HIGH_WORD_OFFSET 0
#define SW_RO_BA_BITMAP_HIGH_WORD_MASK 0xFFFFFFFF

//-----------------------------------
#define CFG_MAC_RX_STS_17_ADDR 0x02a4
#define SW_RO_BA_TID_OFFSET 16
#define SW_RO_BA_TID_MASK 0x000F0000
#define SW_RO_BA_SEQ_OFFSET 0
#define SW_RO_BA_SEQ_MASK 0x00000FFF

//-----------------------------------
#define CFG_MAC_RX_STS_18_ADDR 0x02a8
#define SW_RO_BCN_TIMESTAMP_STORE_CNT_OFFSET 16
#define SW_RO_BCN_TIMESTAMP_STORE_CNT_MASK 0x00070000
#define SW_RO_BCN_TIM_STORE_BYTE_CNT_OFFSET 8
#define SW_RO_BCN_TIM_STORE_BYTE_CNT_MASK 0x00001F00
#define SW_RO_BCN_TIMESTAMP_STORE_DONE_CNT_OFFSET 0
#define SW_RO_BCN_TIMESTAMP_STORE_DONE_CNT_MASK 0x000000FF

//-----------------------------------
#define CFG_MAC_RX_STS_19_ADDR 0x02ac
#define SW_RO_BCN_TIMESTAMP_R_0_OFFSET 0
#define SW_RO_BCN_TIMESTAMP_R_0_MASK 0xFFFFFFFF

//-----------------------------------
#define CFG_MAC_RX_STS_20_ADDR 0x02b0
#define SW_RO_BCN_TIMESTAMP_R_1_OFFSET 0
#define SW_RO_BCN_TIMESTAMP_R_1_MASK 0xFFFFFFFF

//-----------------------------------
#define CFG_MAC_RX_STS_21_ADDR 0x02b4
#define SW_RO_MAC_RX_FSM_DATA_DONE_REASON_OFFSET 16
#define SW_RO_MAC_RX_FSM_DATA_DONE_REASON_MASK 0x001F0000
#define SW_RO_RX_NODE_SEARCH_FSM_OFFSET 12
#define SW_RO_RX_NODE_SEARCH_FSM_MASK 0x0000F000
#define SW_RO_RESP_TRIG_FSM_OFFSET 8
#define SW_RO_RESP_TRIG_FSM_MASK 0x00000F00
#define SW_RO_RX_MPDU_FSM_OFFSET 4
#define SW_RO_RX_MPDU_FSM_MASK 0x000000F0
#define SW_RO_RX_PSDU_FSM_OFFSET 0
#define SW_RO_RX_PSDU_FSM_MASK 0x0000000F

//-----------------------------------
#define CFG_MAC_RX_STS_22_ADDR 0x02b8
#define SW_RO_MAC_RX_FSM_START_TIMEOUT_CNT_OFFSET 0
#define SW_RO_MAC_RX_FSM_START_TIMEOUT_CNT_MASK 0xFFFFFFFF

//-----------------------------------
#define CFG_MAC_RX_STS_23_ADDR 0x02bc
#define SW_RO_MAC_RX_FSM_DONE_TIMEOUT_CNT_OFFSET 0
#define SW_RO_MAC_RX_FSM_DONE_TIMEOUT_CNT_MASK 0xFFFFFFFF

//-----------------------------------
#define CFG_MAC_RX_STS_24_ADDR 0x02c0
#define SW_RO_PPDU_MPDU_CNT_OFFSET 0
#define SW_RO_PPDU_MPDU_CNT_MASK 0x000000FF

//-----------------------------------
#define CFG_MAC_RX_STS_25_ADDR 0x02c4
#define SW_RO_DELAY_RESP_TRIG_CNT_OFFSET 24
#define SW_RO_DELAY_RESP_TRIG_CNT_MASK 0xFF000000
#define SW_RO_NORMAL_RESP_TRIG_CNT_OFFSET 16
#define SW_RO_NORMAL_RESP_TRIG_CNT_MASK 0x00FF0000
#define SW_RO_RESP_TRIG_STS_OFFSET 0
#define SW_RO_RESP_TRIG_STS_MASK 0x0000FFFF

//-----------------------------------
#define CFG_MAC_RX_STS_26_ADDR 0x02c8
#define SW_RO_RX_CRC_CHECK_STS_OFFSET 0
#define SW_RO_RX_CRC_CHECK_STS_MASK 0xFFFFFFFF

//-----------------------------------
#define CFG_MAC_RX_STS_27_ADDR 0x02cc
#define SW_RO_RX_FIFO_WR_BYTE_NUM_OFFSET 0
#define SW_RO_RX_FIFO_WR_BYTE_NUM_MASK 0xFFFFFFFF

//-----------------------------------
#define CFG_MAC_RX_STS_28_ADDR 0x02d0
#define SW_RO_RX_FIFO_RD_BYTE_NUM_OFFSET 0
#define SW_RO_RX_FIFO_RD_BYTE_NUM_MASK 0xFFFFFFFF

//-----------------------------------
#define CFG_MAC_RX_STS_35_ADDR 0x02f0
#define SW_RO_MPDU_BYTE_CNT_OFFSET 16
#define SW_RO_MPDU_BYTE_CNT_MASK 0x3FFF0000
#define SW_RO_MPDU_BYTE_LEN_OFFSET 0
#define SW_RO_MPDU_BYTE_LEN_MASK 0x0000FFFF

//-----------------------------------
#define CFG_MAC_RX_STS_36_ADDR 0x02f4
#define SW_RO_FRAME_BODY_BYTE_LEN_OFFSET 0
#define SW_RO_FRAME_BODY_BYTE_LEN_MASK 0x00003FFF

//-----------------------------------
#define CFG_MAC_RX_STS_37_ADDR 0x02f8
#define SW_RO_DECRYPT_HEAD_BYTE_NUM_OFFSET 16
#define SW_RO_DECRYPT_HEAD_BYTE_NUM_MASK 0x001F0000
#define SW_RO_DECRYPT_PURE_PAYLOAD_BYTE_NUM_OFFSET 0
#define SW_RO_DECRYPT_PURE_PAYLOAD_BYTE_NUM_MASK 0x0000FFFF

//-----------------------------------
#define CFG_MAC_RX_STS_38_ADDR 0x02fc
#define SW_RO_PHY_RX_START_CNT_OFFSET 16
#define SW_RO_PHY_RX_START_CNT_MASK 0xFFFF0000
#define SW_RO_PHY_RX_ABORT_CNT_OFFSET 0
#define SW_RO_PHY_RX_ABORT_CNT_MASK 0x0000FFFF

//-----------------------------------
#define CFG_MAC_RX_STS_39_ADDR 0x0300
#define SW_RO_PHY_RX_TD_DONE_CNT_OFFSET 16
#define SW_RO_PHY_RX_TD_DONE_CNT_MASK 0xFFFF0000
#define SW_RO_PHY_RX_DONE_CNT_OFFSET 0
#define SW_RO_PHY_RX_DONE_CNT_MASK 0x0000FFFF

//-----------------------------------
#define CFG_MAC_RX_STS_44_ADDR 0x0314
#define SW_RO_RX_PSDU_DONE_CNT_OFFSET 16
#define SW_RO_RX_PSDU_DONE_CNT_MASK 0xFFFF0000
#define SW_RO_RX_PSDU_START_CNT_OFFSET 0
#define SW_RO_RX_PSDU_START_CNT_MASK 0x0000FFFF

//-----------------------------------
#define CFG_MAC_RX_STS_45_ADDR 0x0318
#define SW_RO_RX_MPDU_DONE_CNT_OFFSET 16
#define SW_RO_RX_MPDU_DONE_CNT_MASK 0xFFFF0000
#define SW_RO_RX_MPDU_START_CNT_OFFSET 0
#define SW_RO_RX_MPDU_START_CNT_MASK 0x0000FFFF

//-----------------------------------
#define CFG_MAC_RX_STS_46_ADDR 0x031c
#define SW_RO_FC_10BYTE_OUT_START_CNT_OFFSET 0
#define SW_RO_FC_10BYTE_OUT_START_CNT_MASK 0x0000FFFF

//-----------------------------------
#define CFG_MAC_RX_STS_47_ADDR 0x0320
#define SW_RO_MAC_RXR_START_VECTOR_0_OFFSET 0
#define SW_RO_MAC_RXR_START_VECTOR_0_MASK 0xFFFFFFFF

//-----------------------------------
#define CFG_MAC_RX_STS_48_ADDR 0x0324
#define SW_RO_MAC_RXR_START_VECTOR_1_OFFSET 0
#define SW_RO_MAC_RXR_START_VECTOR_1_MASK 0xFFFFFFFF

//-----------------------------------
#define CFG_MAC_RX_STS_49_ADDR 0x0328
#define SW_RO_MAC_RXR_START_VECTOR_2_OFFSET 0
#define SW_RO_MAC_RXR_START_VECTOR_2_MASK 0xFFFFFFFF

//-----------------------------------
#define CFG_MAC_RX_STS_50_ADDR 0x032c
#define SW_RO_MAC_RXR_START_VECTOR_3_OFFSET 0
#define SW_RO_MAC_RXR_START_VECTOR_3_MASK 0xFFFFFFFF

//-----------------------------------
#define CFG_MAC_RX_STS_51_ADDR 0x0330
#define SW_RO_MAC_RXR_DONE_VECTOR_0_OFFSET 0
#define SW_RO_MAC_RXR_DONE_VECTOR_0_MASK 0xFFFFFFFF

//-----------------------------------
#define CFG_MAC_RX_STS_52_ADDR 0x0334
#define SW_RO_MAC_RXR_DONE_VECTOR_1_OFFSET 0
#define SW_RO_MAC_RXR_DONE_VECTOR_1_MASK 0xFFFFFFFF

//-----------------------------------
#define CFG_MAC_RX_STS_53_ADDR 0x0338
#define SW_RO_MAC_RXR_DONE_VECTOR_2_OFFSET 0
#define SW_RO_MAC_RXR_DONE_VECTOR_2_MASK 0xFFFFFFFF

//-----------------------------------
#define CFG_MAC_RX_STS_54_ADDR 0x033c
#define SW_RO_MAC_RXR_DONE_VECTOR_3_OFFSET 0
#define SW_RO_MAC_RXR_DONE_VECTOR_3_MASK 0xFFFFFFFF

//-----------------------------------
#define CFG_MAC_RX_STS_55_ADDR 0x0340
#define SW_RO_TXQ_RX_DONE_VECTOR_0_OFFSET 0
#define SW_RO_TXQ_RX_DONE_VECTOR_0_MASK 0xFFFFFFFF

//-----------------------------------
#define CFG_MAC_RX_STS_56_ADDR 0x0344
#define SW_RO_TXQ_RX_DONE_VECTOR_1_OFFSET 0
#define SW_RO_TXQ_RX_DONE_VECTOR_1_MASK 0xFFFFFFFF

//-----------------------------------
#define CFG_MAC_RX_STS_57_ADDR 0x0348
#define SW_RO_TXQ_RX_DONE_VECTOR_2_OFFSET 0
#define SW_RO_TXQ_RX_DONE_VECTOR_2_MASK 0xFFFFFFFF

//-----------------------------------
#define CFG_MAC_RX_STS_58_ADDR 0x034c
#define SW_RO_TXQ_RX_DONE_VECTOR_3_OFFSET 0
#define SW_RO_TXQ_RX_DONE_VECTOR_3_MASK 0xFFFFFFFF

//-----------------------------------
#define CFG_MAC_RX_STS_59_ADDR 0x0350
#define SW_RO_TXQ_RX_DONE_VECTOR_4_OFFSET 0
#define SW_RO_TXQ_RX_DONE_VECTOR_4_MASK 0xFFFFFFFF

//-----------------------------------
#define CFG_MAC_RX_STS_60_ADDR 0x0354
#define SW_RO_TXQ_RX_DONE_VECTOR_5_OFFSET 0
#define SW_RO_TXQ_RX_DONE_VECTOR_5_MASK 0xFFFFFFFF

//-----------------------------------
#define CFG_MAC_RX_STS_80_ADDR 0x0380
#define SW_RO_PHY_RX_DONE_WITHOUT_RX_START_CNT_OFFSET 16
#define SW_RO_PHY_RX_DONE_WITHOUT_RX_START_CNT_MASK 0xFFFF0000
#define SW_RO_PRD_REASON_OK_CNT_OFFSET 0
#define SW_RO_PRD_REASON_OK_CNT_MASK 0x0000FFFF

//-----------------------------------
#define CFG_MAC_RX_STS_81_ADDR 0x0384
#define SW_RO_PRD_REASON_ERR_OVF_CNT_OFFSET 16
#define SW_RO_PRD_REASON_ERR_OVF_CNT_MASK 0xFFFF0000
#define SW_RO_PRD_REASON_ERR_PWR_DROP_CNT_OFFSET 0
#define SW_RO_PRD_REASON_ERR_PWR_DROP_CNT_MASK 0x0000FFFF

//-----------------------------------
#define CFG_MAC_RX_STS_82_ADDR 0x0388
#define SW_RO_PRD_REASON_ERR_VIT_FAIL_CNT_OFFSET 16
#define SW_RO_PRD_REASON_ERR_VIT_FAIL_CNT_MASK 0xFFFF0000
#define SW_RO_PRD_REASON_ERR_TD_TIMEOUT_CNT_OFFSET 0
#define SW_RO_PRD_REASON_ERR_TD_TIMEOUT_CNT_MASK 0x0000FFFF

//-----------------------------------
#define CFG_MAC_RX_STS_83_ADDR 0x038c
#define SW_RO_PRD_REASON_ERR_AGC_OTHER_CNT_OFFSET 16
#define SW_RO_PRD_REASON_ERR_AGC_OTHER_CNT_MASK 0xFFFF0000
#define SW_RO_PRD_REASON_ERR_OTHER_CNT_OFFSET 0
#define SW_RO_PRD_REASON_ERR_OTHER_CNT_MASK 0x0000FFFF

//-----------------------------------
#define CFG_MAC_RX_STS_90_ADDR 0x0390
#define SW_RO_NO_RX_PRD_REASON_OK_CNT_OFFSET 0
#define SW_RO_NO_RX_PRD_REASON_OK_CNT_MASK 0x0000FFFF

//-----------------------------------
#define CFG_MAC_RX_STS_91_ADDR 0x0394
#define SW_RO_NO_RX_PRD_REASON_ERR_OVF_CNT_OFFSET 16
#define SW_RO_NO_RX_PRD_REASON_ERR_OVF_CNT_MASK 0xFFFF0000
#define SW_RO_NO_RX_PRD_REASON_ERR_PWR_DROP_CNT_OFFSET 0
#define SW_RO_NO_RX_PRD_REASON_ERR_PWR_DROP_CNT_MASK 0x0000FFFF

//-----------------------------------
#define CFG_MAC_RX_STS_92_ADDR 0x0398
#define SW_RO_NO_RX_PRD_REASON_ERR_VIT_FAIL_CNT_OFFSET 16
#define SW_RO_NO_RX_PRD_REASON_ERR_VIT_FAIL_CNT_MASK 0xFFFF0000
#define SW_RO_NO_RX_PRD_REASON_ERR_TD_TIMEOUT_CNT_OFFSET 0
#define SW_RO_NO_RX_PRD_REASON_ERR_TD_TIMEOUT_CNT_MASK 0x0000FFFF

//-----------------------------------
#define CFG_MAC_RX_STS_93_ADDR 0x039c
#define SW_RO_NO_RX_PRD_REASON_ERR_AGC_OTHER_CNT_OFFSET 16
#define SW_RO_NO_RX_PRD_REASON_ERR_AGC_OTHER_CNT_MASK 0xFFFF0000
#define SW_RO_NO_RX_PRD_REASON_ERR_OTHER_CNT_OFFSET 0
#define SW_RO_NO_RX_PRD_REASON_ERR_OTHER_CNT_MASK 0x0000FFFF

//-----------------------------------
#define CFG_MAC_RX_STS_94_ADDR 0x03a0
#define SW_RO_FC_10BYTE_STORE_STS_OFFSET 0
#define SW_RO_FC_10BYTE_STORE_STS_MASK 0xFFFFFFFF

//-----------------------------------
#define CFG_MAC_RX_STS_95_ADDR 0x03a4
#define SW_RO_MAC_RX_FSM_START_TIMEOUT_OFFSET 0
#define SW_RO_MAC_RX_FSM_START_TIMEOUT_MASK 0xFFFFFFFF

//-----------------------------------
#define CFG_MAC_RX_STS_96_ADDR 0x03a8
#define SW_RO_RX_MAC_ANTI_PRESS_PHY_CNT_OFFSET 0
#define SW_RO_RX_MAC_ANTI_PRESS_PHY_CNT_MASK 0xFFFFFFFF

//-----------------------------------
#define CFG_MAC_BA_BITMAP_CTRL_ADDR 0x07e0
#define SW_BAR_ACK_POLICY_MODE_OFFSET 3
#define SW_BAR_ACK_POLICY_MODE_MASK 0x00000018
#define SW_FORCE_BA_BITMAP_EN_OFFSET 2
#define SW_FORCE_BA_BITMAP_EN_MASK 0x00000004
#define SW_FORCE_BA_INFO_EN_OFFSET 1
#define SW_FORCE_BA_INFO_EN_MASK 0x00000002
#define SW_FORCE_BA_CTRL_EN_OFFSET 0
#define SW_FORCE_BA_CTRL_EN_MASK 0x00000001

//-----------------------------------
#define CFG_MAC_BA_CRTL_INFO_FORCE_ADDR 0x07e4
#define SW_FORCE_BA_CTRL_VAL_OFFSET 16
#define SW_FORCE_BA_CTRL_VAL_MASK 0xFFFF0000
#define SW_FORCE_BA_INFO_VAL_OFFSET 0
#define SW_FORCE_BA_INFO_VAL_MASK 0x0000FFFF

//-----------------------------------
#define CFG_MAC_BA_BITMAP_FORCE_HIGH_ADDR 0x07e8
#define SW_FORCE_BA_BITMAP_HIGH_VAL_OFFSET 0
#define SW_FORCE_BA_BITMAP_HIGH_VAL_MASK 0xFFFFFFFF

//-----------------------------------
#define CFG_MAC_BA_BITMAP_FORCE_LOW_ADDR 0x07ec
#define SW_FORCE_BA_BITMAP_LOW_VAL_OFFSET 0
#define SW_FORCE_BA_BITMAP_LOW_VAL_MASK 0xFFFFFFFF

//-----------------------------------
#define CFG_MAC_BA_0_BITMAP_CTRL_0_ADDR 0x0800
#define SW_BA_0_ADDR2_LOW_OFFSET 0
#define SW_BA_0_ADDR2_LOW_MASK 0xFFFFFFFF

//-----------------------------------
#define CFG_MAC_BA_0_BITMAP_CTRL_1_ADDR 0x0804
#define SW_BA_0_ADDR1_CHOS_OFFSET 24
#define SW_BA_0_ADDR1_CHOS_MASK 0x01000000
#define SW_BA_0_TID_OFFSET 16
#define SW_BA_0_TID_MASK 0x000F0000
#define SW_BA_0_ADDR2_HIGH_OFFSET 0
#define SW_BA_0_ADDR2_HIGH_MASK 0x0000FFFF

//-----------------------------------
#define CFG_MAC_BA_0_BITMAP_CTRL_2_ADDR 0x0808
#define SW_BA_0_WINSTART_OFFSET 16
#define SW_BA_0_WINSTART_MASK 0x0FFF0000
#define SW_BA_0_BITMAP_FORCE_ZERO_OFFSET 9
#define SW_BA_0_BITMAP_FORCE_ZERO_MASK 0x00000200
#define SW_BA_0_WIN_SET_OFFSET 8
#define SW_BA_0_WIN_SET_MASK 0x00000100
#define SW_BA_0_WINOFFSET_OFFSET 0
#define SW_BA_0_WINOFFSET_MASK 0x0000003F

//-----------------------------------
#define CFG_MAC_BA_0_BITMAP_STS_0_ADDR 0x0820
#define SW_RO_BA_0_WINSTART_OFFSET 0
#define SW_RO_BA_0_WINSTART_MASK 0x00000FFF

//-----------------------------------
#define CFG_MAC_BA_0_BITMAP_STS_1_ADDR 0x0824
#define SW_RO_BA_0_BITMAP_HIGH_OFFSET 0
#define SW_RO_BA_0_BITMAP_HIGH_MASK 0xFFFFFFFF

//-----------------------------------
#define CFG_MAC_BA_0_BITMAP_STS_2_ADDR 0x0828
#define SW_RO_BA_0_BITMAP_LOW_OFFSET 0
#define SW_RO_BA_0_BITMAP_LOW_MASK 0xFFFFFFFF

//-----------------------------------
#define CFG_MAC_BA_1_BITMAP_CTRL_0_ADDR 0x0900
#define SW_BA_1_ADDR2_LOW_OFFSET 0
#define SW_BA_1_ADDR2_LOW_MASK 0xFFFFFFFF

//-----------------------------------
#define CFG_MAC_BA_1_BITMAP_CTRL_1_ADDR 0x0904
#define SW_BA_1_ADDR1_CHOS_OFFSET 24
#define SW_BA_1_ADDR1_CHOS_MASK 0x01000000
#define SW_BA_1_TID_OFFSET 16
#define SW_BA_1_TID_MASK 0x000F0000
#define SW_BA_1_ADDR2_HIGH_OFFSET 0
#define SW_BA_1_ADDR2_HIGH_MASK 0x0000FFFF

//-----------------------------------
#define CFG_MAC_BA_1_BITMAP_CTRL_2_ADDR 0x0908
#define SW_BA_1_WINSTART_OFFSET 16
#define SW_BA_1_WINSTART_MASK 0x0FFF0000
#define SW_BA_1_BITMAP_FORCE_ZERO_OFFSET 9
#define SW_BA_1_BITMAP_FORCE_ZERO_MASK 0x00000200
#define SW_BA_1_WIN_SET_OFFSET 8
#define SW_BA_1_WIN_SET_MASK 0x00000100
#define SW_BA_1_WINOFFSET_OFFSET 0
#define SW_BA_1_WINOFFSET_MASK 0x0000003F

//-----------------------------------
#define CFG_MAC_BA_1_BITMAP_STS_0_ADDR 0x0920
#define SW_RO_BA_1_WINSTART_OFFSET 0
#define SW_RO_BA_1_WINSTART_MASK 0x00000FFF

//-----------------------------------
#define CFG_MAC_BA_1_BITMAP_STS_1_ADDR 0x0924
#define SW_RO_BA_1_BITMAP_HIGH_OFFSET 0
#define SW_RO_BA_1_BITMAP_HIGH_MASK 0xFFFFFFFF

//-----------------------------------
#define CFG_MAC_BA_1_BITMAP_STS_2_ADDR 0x0928
#define SW_RO_BA_1_BITMAP_LOW_OFFSET 0
#define SW_RO_BA_1_BITMAP_LOW_MASK 0xFFFFFFFF

//-----------------------------------
#define CFG_MAC_BA_2_BITMAP_CTRL_0_ADDR 0x0a00
#define SW_BA_2_ADDR2_LOW_OFFSET 0
#define SW_BA_2_ADDR2_LOW_MASK 0xFFFFFFFF

//-----------------------------------
#define CFG_MAC_BA_2_BITMAP_CTRL_1_ADDR 0x0a04
#define SW_BA_2_ADDR1_CHOS_OFFSET 24
#define SW_BA_2_ADDR1_CHOS_MASK 0x01000000
#define SW_BA_2_TID_OFFSET 16
#define SW_BA_2_TID_MASK 0x000F0000
#define SW_BA_2_ADDR2_HIGH_OFFSET 0
#define SW_BA_2_ADDR2_HIGH_MASK 0x0000FFFF

//-----------------------------------
#define CFG_MAC_BA_2_BITMAP_CTRL_2_ADDR 0x0a08
#define SW_BA_2_WINSTART_OFFSET 16
#define SW_BA_2_WINSTART_MASK 0x0FFF0000
#define SW_BA_2_BITMAP_FORCE_ZERO_OFFSET 9
#define SW_BA_2_BITMAP_FORCE_ZERO_MASK 0x00000200
#define SW_BA_2_WIN_SET_OFFSET 8
#define SW_BA_2_WIN_SET_MASK 0x00000100
#define SW_BA_2_WINOFFSET_OFFSET 0
#define SW_BA_2_WINOFFSET_MASK 0x0000003F

//-----------------------------------
#define CFG_MAC_BA_2_BITMAP_STS_0_ADDR 0x0a20
#define SW_RO_BA_2_WINSTART_OFFSET 0
#define SW_RO_BA_2_WINSTART_MASK 0x00000FFF

//-----------------------------------
#define CFG_MAC_BA_2_BITMAP_STS_1_ADDR 0x0a24
#define SW_RO_BA_2_BITMAP_HIGH_OFFSET 0
#define SW_RO_BA_2_BITMAP_HIGH_MASK 0xFFFFFFFF

//-----------------------------------
#define CFG_MAC_BA_2_BITMAP_STS_2_ADDR 0x0a28
#define SW_RO_BA_2_BITMAP_LOW_OFFSET 0
#define SW_RO_BA_2_BITMAP_LOW_MASK 0xFFFFFFFF

//-----------------------------------
#define CFG_MAC_BA_3_BITMAP_CTRL_0_ADDR 0x0b00
#define SW_BA_3_ADDR2_LOW_OFFSET 0
#define SW_BA_3_ADDR2_LOW_MASK 0xFFFFFFFF

//-----------------------------------
#define CFG_MAC_BA_3_BITMAP_CTRL_1_ADDR 0x0b04
#define SW_BA_3_ADDR1_CHOS_OFFSET 24
#define SW_BA_3_ADDR1_CHOS_MASK 0x01000000
#define SW_BA_3_TID_OFFSET 16
#define SW_BA_3_TID_MASK 0x000F0000
#define SW_BA_3_ADDR2_HIGH_OFFSET 0
#define SW_BA_3_ADDR2_HIGH_MASK 0x0000FFFF

//-----------------------------------
#define CFG_MAC_BA_3_BITMAP_CTRL_2_ADDR 0x0b08
#define SW_BA_3_WINSTART_OFFSET 16
#define SW_BA_3_WINSTART_MASK 0x0FFF0000
#define SW_BA_3_BITMAP_FORCE_ZERO_OFFSET 9
#define SW_BA_3_BITMAP_FORCE_ZERO_MASK 0x00000200
#define SW_BA_3_WIN_SET_OFFSET 8
#define SW_BA_3_WIN_SET_MASK 0x00000100
#define SW_BA_3_WINOFFSET_OFFSET 0
#define SW_BA_3_WINOFFSET_MASK 0x0000003F

//-----------------------------------
#define CFG_MAC_BA_3_BITMAP_STS_0_ADDR 0x0b20
#define SW_RO_BA_3_WINSTART_OFFSET 0
#define SW_RO_BA_3_WINSTART_MASK 0x00000FFF

//-----------------------------------
#define CFG_MAC_BA_3_BITMAP_STS_1_ADDR 0x0b24
#define SW_RO_BA_3_BITMAP_HIGH_OFFSET 0
#define SW_RO_BA_3_BITMAP_HIGH_MASK 0xFFFFFFFF

//-----------------------------------
#define CFG_MAC_BA_3_BITMAP_STS_2_ADDR 0x0b28
#define SW_RO_BA_3_BITMAP_LOW_OFFSET 0
#define SW_RO_BA_3_BITMAP_LOW_MASK 0xFFFFFFFF

//-----------------------------------
#define CFG_MAC_BA_4_BITMAP_CTRL_0_ADDR 0x0c00
#define SW_BA_4_ADDR2_LOW_OFFSET 0
#define SW_BA_4_ADDR2_LOW_MASK 0xFFFFFFFF

//-----------------------------------
#define CFG_MAC_BA_4_BITMAP_CTRL_1_ADDR 0x0c04
#define SW_BA_4_ADDR1_CHOS_OFFSET 24
#define SW_BA_4_ADDR1_CHOS_MASK 0x01000000
#define SW_BA_4_TID_OFFSET 16
#define SW_BA_4_TID_MASK 0x000F0000
#define SW_BA_4_ADDR2_HIGH_OFFSET 0
#define SW_BA_4_ADDR2_HIGH_MASK 0x0000FFFF

//-----------------------------------
#define CFG_MAC_BA_4_BITMAP_CTRL_2_ADDR 0x0c08
#define SW_BA_4_WINSTART_OFFSET 16
#define SW_BA_4_WINSTART_MASK 0x0FFF0000
#define SW_BA_4_BITMAP_FORCE_ZERO_OFFSET 9
#define SW_BA_4_BITMAP_FORCE_ZERO_MASK 0x00000200
#define SW_BA_4_WIN_SET_OFFSET 8
#define SW_BA_4_WIN_SET_MASK 0x00000100
#define SW_BA_4_WINOFFSET_OFFSET 0
#define SW_BA_4_WINOFFSET_MASK 0x0000003F

//-----------------------------------
#define CFG_MAC_BA_4_BITMAP_STS_0_ADDR 0x0c20
#define SW_RO_BA_4_WINSTART_OFFSET 0
#define SW_RO_BA_4_WINSTART_MASK 0x00000FFF

//-----------------------------------
#define CFG_MAC_BA_4_BITMAP_STS_1_ADDR 0x0c24
#define SW_RO_BA_4_BITMAP_HIGH_OFFSET 0
#define SW_RO_BA_4_BITMAP_HIGH_MASK 0xFFFFFFFF

//-----------------------------------
#define CFG_MAC_BA_4_BITMAP_STS_2_ADDR 0x0c28
#define SW_RO_BA_4_BITMAP_LOW_OFFSET 0
#define SW_RO_BA_4_BITMAP_LOW_MASK 0xFFFFFFFF

//-----------------------------------
#define CFG_MAC_BA_5_BITMAP_CTRL_0_ADDR 0x0d00
#define SW_BA_5_ADDR2_LOW_OFFSET 0
#define SW_BA_5_ADDR2_LOW_MASK 0xFFFFFFFF

//-----------------------------------
#define CFG_MAC_BA_5_BITMAP_CTRL_1_ADDR 0x0d04
#define SW_BA_5_ADDR1_CHOS_OFFSET 24
#define SW_BA_5_ADDR1_CHOS_MASK 0x01000000
#define SW_BA_5_TID_OFFSET 16
#define SW_BA_5_TID_MASK 0x000F0000
#define SW_BA_5_ADDR2_HIGH_OFFSET 0
#define SW_BA_5_ADDR2_HIGH_MASK 0x0000FFFF

//-----------------------------------
#define CFG_MAC_BA_5_BITMAP_CTRL_2_ADDR 0x0d08
#define SW_BA_5_WINSTART_OFFSET 16
#define SW_BA_5_WINSTART_MASK 0x0FFF0000
#define SW_BA_5_BITMAP_FORCE_ZERO_OFFSET 9
#define SW_BA_5_BITMAP_FORCE_ZERO_MASK 0x00000200
#define SW_BA_5_WIN_SET_OFFSET 8
#define SW_BA_5_WIN_SET_MASK 0x00000100
#define SW_BA_5_WINOFFSET_OFFSET 0
#define SW_BA_5_WINOFFSET_MASK 0x0000003F

//-----------------------------------
#define CFG_MAC_BA_5_BITMAP_STS_0_ADDR 0x0d20
#define SW_RO_BA_5_WINSTART_OFFSET 0
#define SW_RO_BA_5_WINSTART_MASK 0x00000FFF

//-----------------------------------
#define CFG_MAC_BA_5_BITMAP_STS_1_ADDR 0x0d24
#define SW_RO_BA_5_BITMAP_HIGH_OFFSET 0
#define SW_RO_BA_5_BITMAP_HIGH_MASK 0xFFFFFFFF

//-----------------------------------
#define CFG_MAC_BA_5_BITMAP_STS_2_ADDR 0x0d28
#define SW_RO_BA_5_BITMAP_LOW_OFFSET 0
#define SW_RO_BA_5_BITMAP_LOW_MASK 0xFFFFFFFF

//-----------------------------------
#define CFG_MAC_BA_6_BITMAP_CTRL_0_ADDR 0x0e00
#define SW_BA_6_ADDR2_LOW_OFFSET 0
#define SW_BA_6_ADDR2_LOW_MASK 0xFFFFFFFF

//-----------------------------------
#define CFG_MAC_BA_6_BITMAP_CTRL_1_ADDR 0x0e04
#define SW_BA_6_ADDR1_CHOS_OFFSET 24
#define SW_BA_6_ADDR1_CHOS_MASK 0x01000000
#define SW_BA_6_TID_OFFSET 16
#define SW_BA_6_TID_MASK 0x000F0000
#define SW_BA_6_ADDR2_HIGH_OFFSET 0
#define SW_BA_6_ADDR2_HIGH_MASK 0x0000FFFF

//-----------------------------------
#define CFG_MAC_BA_6_BITMAP_CTRL_2_ADDR 0x0e08
#define SW_BA_6_WINSTART_OFFSET 16
#define SW_BA_6_WINSTART_MASK 0x0FFF0000
#define SW_BA_6_BITMAP_FORCE_ZERO_OFFSET 9
#define SW_BA_6_BITMAP_FORCE_ZERO_MASK 0x00000200
#define SW_BA_6_WIN_SET_OFFSET 8
#define SW_BA_6_WIN_SET_MASK 0x00000100
#define SW_BA_6_WINOFFSET_OFFSET 0
#define SW_BA_6_WINOFFSET_MASK 0x0000003F

//-----------------------------------
#define CFG_MAC_BA_6_BITMAP_STS_0_ADDR 0x0e20
#define SW_RO_BA_6_WINSTART_OFFSET 0
#define SW_RO_BA_6_WINSTART_MASK 0x00000FFF

//-----------------------------------
#define CFG_MAC_BA_6_BITMAP_STS_1_ADDR 0x0e24
#define SW_RO_BA_6_BITMAP_HIGH_OFFSET 0
#define SW_RO_BA_6_BITMAP_HIGH_MASK 0xFFFFFFFF

//-----------------------------------
#define CFG_MAC_BA_6_BITMAP_STS_2_ADDR 0x0e28
#define SW_RO_BA_6_BITMAP_LOW_OFFSET 0
#define SW_RO_BA_6_BITMAP_LOW_MASK 0xFFFFFFFF

//-----------------------------------
#define CFG_MAC_BA_7_BITMAP_CTRL_0_ADDR 0x0f00
#define SW_BA_7_ADDR2_LOW_OFFSET 0
#define SW_BA_7_ADDR2_LOW_MASK 0xFFFFFFFF

//-----------------------------------
#define CFG_MAC_BA_7_BITMAP_CTRL_1_ADDR 0x0f04
#define SW_BA_7_ADDR1_CHOS_OFFSET 24
#define SW_BA_7_ADDR1_CHOS_MASK 0x01000000
#define SW_BA_7_TID_OFFSET 16
#define SW_BA_7_TID_MASK 0x000F0000
#define SW_BA_7_ADDR2_HIGH_OFFSET 0
#define SW_BA_7_ADDR2_HIGH_MASK 0x0000FFFF

//-----------------------------------
#define CFG_MAC_BA_7_BITMAP_CTRL_2_ADDR 0x0f08
#define SW_BA_7_WINSTART_OFFSET 16
#define SW_BA_7_WINSTART_MASK 0x0FFF0000
#define SW_BA_7_BITMAP_FORCE_ZERO_OFFSET 9
#define SW_BA_7_BITMAP_FORCE_ZERO_MASK 0x00000200
#define SW_BA_7_WIN_SET_OFFSET 8
#define SW_BA_7_WIN_SET_MASK 0x00000100
#define SW_BA_7_WINOFFSET_OFFSET 0
#define SW_BA_7_WINOFFSET_MASK 0x0000003F

//-----------------------------------
#define CFG_MAC_BA_7_BITMAP_STS_0_ADDR 0x0f20
#define SW_RO_BA_7_WINSTART_OFFSET 0
#define SW_RO_BA_7_WINSTART_MASK 0x00000FFF

//-----------------------------------
#define CFG_MAC_BA_7_BITMAP_STS_1_ADDR 0x0f24
#define SW_RO_BA_7_BITMAP_HIGH_OFFSET 0
#define SW_RO_BA_7_BITMAP_HIGH_MASK 0xFFFFFFFF

//-----------------------------------
#define CFG_MAC_BA_7_BITMAP_STS_2_ADDR 0x0f28
#define SW_RO_BA_7_BITMAP_LOW_OFFSET 0
#define SW_RO_BA_7_BITMAP_LOW_MASK 0xFFFFFFFF

//HW module read/write macro




static __inline void mac_rx_ctrl_sw_mac_rx_phy_rate_prot_en_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_CTRL_ADDR);
	tmp &= ~SW_MAC_RX_PHY_RATE_PROT_EN_MASK;
	tmp |= (value << SW_MAC_RX_PHY_RATE_PROT_EN_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_rx_ctrl_sw_mac_rx_phy_rate_prot_en_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_CTRL_ADDR)) & SW_MAC_RX_PHY_RATE_PROT_EN_MASK) >> SW_MAC_RX_PHY_RATE_PROT_EN_OFFSET;
}
static __inline void mac_rx_ctrl_sw_mac_rx_mpdu_len_prot_en_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_CTRL_ADDR);
	tmp &= ~SW_MAC_RX_MPDU_LEN_PROT_EN_MASK;
	tmp |= (value << SW_MAC_RX_MPDU_LEN_PROT_EN_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_rx_ctrl_sw_mac_rx_mpdu_len_prot_en_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_CTRL_ADDR)) & SW_MAC_RX_MPDU_LEN_PROT_EN_MASK) >> SW_MAC_RX_MPDU_LEN_PROT_EN_OFFSET;
}
static __inline void mac_rx_ctrl_sw_ampdu_ignore_delim_sig_en_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_CTRL_ADDR);
	tmp &= ~SW_AMPDU_IGNORE_DELIM_SIG_EN_MASK;
	tmp |= (value << SW_AMPDU_IGNORE_DELIM_SIG_EN_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_rx_ctrl_sw_ampdu_ignore_delim_sig_en_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_CTRL_ADDR)) & SW_AMPDU_IGNORE_DELIM_SIG_EN_MASK) >> SW_AMPDU_IGNORE_DELIM_SIG_EN_OFFSET;
}
static __inline void mac_rx_ctrl_sw_cfend_force_set_nav_zero_en_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_CTRL_ADDR);
	tmp &= ~SW_CFEND_FORCE_SET_NAV_ZERO_EN_MASK;
	tmp |= (value << SW_CFEND_FORCE_SET_NAV_ZERO_EN_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_rx_ctrl_sw_cfend_force_set_nav_zero_en_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_CTRL_ADDR)) & SW_CFEND_FORCE_SET_NAV_ZERO_EN_MASK) >> SW_CFEND_FORCE_SET_NAV_ZERO_EN_OFFSET;
}
static __inline void mac_rx_ctrl_sw_cts_check_ring_resp_en_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_CTRL_ADDR);
	tmp &= ~SW_CTS_CHECK_RING_RESP_EN_MASK;
	tmp |= (value << SW_CTS_CHECK_RING_RESP_EN_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_rx_ctrl_sw_cts_check_ring_resp_en_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_CTRL_ADDR)) & SW_CTS_CHECK_RING_RESP_EN_MASK) >> SW_CTS_CHECK_RING_RESP_EN_OFFSET;
}
static __inline void mac_rx_ctrl_sw_ba_check_ring_resp_en_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_CTRL_ADDR);
	tmp &= ~SW_BA_CHECK_RING_RESP_EN_MASK;
	tmp |= (value << SW_BA_CHECK_RING_RESP_EN_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_rx_ctrl_sw_ba_check_ring_resp_en_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_CTRL_ADDR)) & SW_BA_CHECK_RING_RESP_EN_MASK) >> SW_BA_CHECK_RING_RESP_EN_OFFSET;
}
static __inline void mac_rx_ctrl_sw_ack_check_ring_resp_en_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_CTRL_ADDR);
	tmp &= ~SW_ACK_CHECK_RING_RESP_EN_MASK;
	tmp |= (value << SW_ACK_CHECK_RING_RESP_EN_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_rx_ctrl_sw_ack_check_ring_resp_en_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_CTRL_ADDR)) & SW_ACK_CHECK_RING_RESP_EN_MASK) >> SW_ACK_CHECK_RING_RESP_EN_OFFSET;
}
static __inline void mac_rx_ctrl_sw_rx_ht_mgmt_htc_exist_en_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_CTRL_ADDR);
	tmp &= ~SW_RX_HT_MGMT_HTC_EXIST_EN_MASK;
	tmp |= (value << SW_RX_HT_MGMT_HTC_EXIST_EN_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_rx_ctrl_sw_rx_ht_mgmt_htc_exist_en_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_CTRL_ADDR)) & SW_RX_HT_MGMT_HTC_EXIST_EN_MASK) >> SW_RX_HT_MGMT_HTC_EXIST_EN_OFFSET;
}
static __inline void mac_rx_ctrl_sw_rx_crc_reorder_en_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_CTRL_ADDR);
	tmp &= ~SW_RX_CRC_REORDER_EN_MASK;
	tmp |= (value << SW_RX_CRC_REORDER_EN_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_rx_ctrl_sw_rx_crc_reorder_en_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_CTRL_ADDR)) & SW_RX_CRC_REORDER_EN_MASK) >> SW_RX_CRC_REORDER_EN_OFFSET;
}
static __inline void mac_rx_ctrl_sw_not_hw_nav_update_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_CTRL_ADDR);
	tmp &= ~SW_NOT_HW_NAV_UPDATE_MASK;
	tmp |= (value << SW_NOT_HW_NAV_UPDATE_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_rx_ctrl_sw_not_hw_nav_update_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_CTRL_ADDR)) & SW_NOT_HW_NAV_UPDATE_MASK) >> SW_NOT_HW_NAV_UPDATE_OFFSET;
}
static __inline void mac_rx_ctrl_sw_force_response_cts_en_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_CTRL_ADDR);
	tmp &= ~SW_FORCE_RESPONSE_CTS_EN_MASK;
	tmp |= (value << SW_FORCE_RESPONSE_CTS_EN_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_rx_ctrl_sw_force_response_cts_en_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_CTRL_ADDR)) & SW_FORCE_RESPONSE_CTS_EN_MASK) >> SW_FORCE_RESPONSE_CTS_EN_OFFSET;
}
static __inline void mac_rx_ctrl_sw_force_response_ba_en_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_CTRL_ADDR);
	tmp &= ~SW_FORCE_RESPONSE_BA_EN_MASK;
	tmp |= (value << SW_FORCE_RESPONSE_BA_EN_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_rx_ctrl_sw_force_response_ba_en_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_CTRL_ADDR)) & SW_FORCE_RESPONSE_BA_EN_MASK) >> SW_FORCE_RESPONSE_BA_EN_OFFSET;
}
static __inline void mac_rx_ctrl_sw_force_response_ack_en_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_CTRL_ADDR);
	tmp &= ~SW_FORCE_RESPONSE_ACK_EN_MASK;
	tmp |= (value << SW_FORCE_RESPONSE_ACK_EN_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_rx_ctrl_sw_force_response_ack_en_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_CTRL_ADDR)) & SW_FORCE_RESPONSE_ACK_EN_MASK) >> SW_FORCE_RESPONSE_ACK_EN_OFFSET;
}
static __inline void mac_rx_ctrl_sw_mac_rx_prot_en_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_CTRL_ADDR);
	tmp &= ~SW_MAC_RX_PROT_EN_MASK;
	tmp |= (value << SW_MAC_RX_PROT_EN_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_rx_ctrl_sw_mac_rx_prot_en_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_CTRL_ADDR)) & SW_MAC_RX_PROT_EN_MASK) >> SW_MAC_RX_PROT_EN_OFFSET;
}
static __inline void mac_rx_ctrl_sw_not_response_cts_en_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_CTRL_ADDR);
	tmp &= ~SW_NOT_RESPONSE_CTS_EN_MASK;
	tmp |= (value << SW_NOT_RESPONSE_CTS_EN_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_rx_ctrl_sw_not_response_cts_en_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_CTRL_ADDR)) & SW_NOT_RESPONSE_CTS_EN_MASK) >> SW_NOT_RESPONSE_CTS_EN_OFFSET;
}
static __inline void mac_rx_ctrl_sw_not_response_ba_en_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_CTRL_ADDR);
	tmp &= ~SW_NOT_RESPONSE_BA_EN_MASK;
	tmp |= (value << SW_NOT_RESPONSE_BA_EN_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_rx_ctrl_sw_not_response_ba_en_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_CTRL_ADDR)) & SW_NOT_RESPONSE_BA_EN_MASK) >> SW_NOT_RESPONSE_BA_EN_OFFSET;
}
static __inline void mac_rx_ctrl_sw_not_response_ack_en_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_CTRL_ADDR);
	tmp &= ~SW_NOT_RESPONSE_ACK_EN_MASK;
	tmp |= (value << SW_NOT_RESPONSE_ACK_EN_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_rx_ctrl_sw_not_response_ack_en_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_CTRL_ADDR)) & SW_NOT_RESPONSE_ACK_EN_MASK) >> SW_NOT_RESPONSE_ACK_EN_OFFSET;
}
static __inline void mac_rx_ctrl_sw_force_no_decrypt_en_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_CTRL_ADDR);
	tmp &= ~SW_FORCE_NO_DECRYPT_EN_MASK;
	tmp |= (value << SW_FORCE_NO_DECRYPT_EN_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_rx_ctrl_sw_force_no_decrypt_en_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_CTRL_ADDR)) & SW_FORCE_NO_DECRYPT_EN_MASK) >> SW_FORCE_NO_DECRYPT_EN_OFFSET;
}
static __inline void mac_rx_ctrl_sw_force_mpdu_a_rx_desc_en_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_CTRL_ADDR);
	tmp &= ~SW_FORCE_MPDU_A_RX_DESC_EN_MASK;
	tmp |= (value << SW_FORCE_MPDU_A_RX_DESC_EN_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_rx_ctrl_sw_force_mpdu_a_rx_desc_en_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_CTRL_ADDR)) & SW_FORCE_MPDU_A_RX_DESC_EN_MASK) >> SW_FORCE_MPDU_A_RX_DESC_EN_OFFSET;
}
static __inline void mac_rx_ctrl_sw_too_long_ack_en_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_CTRL_ADDR);
	tmp &= ~SW_TOO_LONG_ACK_EN_MASK;
	tmp |= (value << SW_TOO_LONG_ACK_EN_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_rx_ctrl_sw_too_long_ack_en_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_CTRL_ADDR)) & SW_TOO_LONG_ACK_EN_MASK) >> SW_TOO_LONG_ACK_EN_OFFSET;
}
static __inline void mac_rx_ctrl_sw_mac_rx_disable_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_CTRL_ADDR);
	tmp &= ~SW_MAC_RX_DISABLE_MASK;
	tmp |= (value << SW_MAC_RX_DISABLE_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_rx_ctrl_sw_mac_rx_disable_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_CTRL_ADDR)) & SW_MAC_RX_DISABLE_MASK) >> SW_MAC_RX_DISABLE_OFFSET;
}
static __inline void mac_rx_ctrl_set(uint32_t value)
{
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_CTRL_ADDR, value);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_CTRL_ADDR), value);
}
static __inline uint32_t mac_rx_ctrl_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_CTRL_ADDR));
}
static __inline void mac_rx_ctrl_pack(uint32_t sw_mac_rx_phy_rate_prot_en, uint32_t sw_mac_rx_mpdu_len_prot_en, uint32_t sw_ampdu_ignore_delim_sig_en, uint32_t sw_cfend_force_set_nav_zero_en, uint32_t sw_cts_check_ring_resp_en, uint32_t sw_ba_check_ring_resp_en, uint32_t sw_ack_check_ring_resp_en, uint32_t sw_rx_ht_mgmt_htc_exist_en, uint32_t sw_rx_crc_reorder_en, uint32_t sw_not_hw_nav_update, uint32_t sw_force_response_cts_en, uint32_t sw_force_response_ba_en, uint32_t sw_force_response_ack_en, uint32_t sw_mac_rx_prot_en, uint32_t sw_not_response_cts_en, uint32_t sw_not_response_ba_en, uint32_t sw_not_response_ack_en, uint32_t sw_force_no_decrypt_en, uint32_t sw_force_mpdu_a_rx_desc_en, uint32_t sw_too_long_ack_en, uint32_t sw_mac_rx_disable)
{
	uint32_t tmp;

	assert((((uint32_t)sw_mac_rx_phy_rate_prot_en << SW_MAC_RX_PHY_RATE_PROT_EN_OFFSET) & ~((uint32_t)SW_MAC_RX_PHY_RATE_PROT_EN_MASK)) == 0);
	assert((((uint32_t)sw_mac_rx_mpdu_len_prot_en << SW_MAC_RX_MPDU_LEN_PROT_EN_OFFSET) & ~((uint32_t)SW_MAC_RX_MPDU_LEN_PROT_EN_MASK)) == 0);
	assert((((uint32_t)sw_ampdu_ignore_delim_sig_en << SW_AMPDU_IGNORE_DELIM_SIG_EN_OFFSET) & ~((uint32_t)SW_AMPDU_IGNORE_DELIM_SIG_EN_MASK)) == 0);
	assert((((uint32_t)sw_cfend_force_set_nav_zero_en << SW_CFEND_FORCE_SET_NAV_ZERO_EN_OFFSET) & ~((uint32_t)SW_CFEND_FORCE_SET_NAV_ZERO_EN_MASK)) == 0);
	assert((((uint32_t)sw_cts_check_ring_resp_en << SW_CTS_CHECK_RING_RESP_EN_OFFSET) & ~((uint32_t)SW_CTS_CHECK_RING_RESP_EN_MASK)) == 0);
	assert((((uint32_t)sw_ba_check_ring_resp_en << SW_BA_CHECK_RING_RESP_EN_OFFSET) & ~((uint32_t)SW_BA_CHECK_RING_RESP_EN_MASK)) == 0);
	assert((((uint32_t)sw_ack_check_ring_resp_en << SW_ACK_CHECK_RING_RESP_EN_OFFSET) & ~((uint32_t)SW_ACK_CHECK_RING_RESP_EN_MASK)) == 0);
	assert((((uint32_t)sw_rx_ht_mgmt_htc_exist_en << SW_RX_HT_MGMT_HTC_EXIST_EN_OFFSET) & ~((uint32_t)SW_RX_HT_MGMT_HTC_EXIST_EN_MASK)) == 0);
	assert((((uint32_t)sw_rx_crc_reorder_en << SW_RX_CRC_REORDER_EN_OFFSET) & ~((uint32_t)SW_RX_CRC_REORDER_EN_MASK)) == 0);
	assert((((uint32_t)sw_not_hw_nav_update << SW_NOT_HW_NAV_UPDATE_OFFSET) & ~((uint32_t)SW_NOT_HW_NAV_UPDATE_MASK)) == 0);
	assert((((uint32_t)sw_force_response_cts_en << SW_FORCE_RESPONSE_CTS_EN_OFFSET) & ~((uint32_t)SW_FORCE_RESPONSE_CTS_EN_MASK)) == 0);
	assert((((uint32_t)sw_force_response_ba_en << SW_FORCE_RESPONSE_BA_EN_OFFSET) & ~((uint32_t)SW_FORCE_RESPONSE_BA_EN_MASK)) == 0);
	assert((((uint32_t)sw_force_response_ack_en << SW_FORCE_RESPONSE_ACK_EN_OFFSET) & ~((uint32_t)SW_FORCE_RESPONSE_ACK_EN_MASK)) == 0);
	assert((((uint32_t)sw_mac_rx_prot_en << SW_MAC_RX_PROT_EN_OFFSET) & ~((uint32_t)SW_MAC_RX_PROT_EN_MASK)) == 0);
	assert((((uint32_t)sw_not_response_cts_en << SW_NOT_RESPONSE_CTS_EN_OFFSET) & ~((uint32_t)SW_NOT_RESPONSE_CTS_EN_MASK)) == 0);
	assert((((uint32_t)sw_not_response_ba_en << SW_NOT_RESPONSE_BA_EN_OFFSET) & ~((uint32_t)SW_NOT_RESPONSE_BA_EN_MASK)) == 0);
	assert((((uint32_t)sw_not_response_ack_en << SW_NOT_RESPONSE_ACK_EN_OFFSET) & ~((uint32_t)SW_NOT_RESPONSE_ACK_EN_MASK)) == 0);
	assert((((uint32_t)sw_force_no_decrypt_en << SW_FORCE_NO_DECRYPT_EN_OFFSET) & ~((uint32_t)SW_FORCE_NO_DECRYPT_EN_MASK)) == 0);
	assert((((uint32_t)sw_force_mpdu_a_rx_desc_en << SW_FORCE_MPDU_A_RX_DESC_EN_OFFSET) & ~((uint32_t)SW_FORCE_MPDU_A_RX_DESC_EN_MASK)) == 0);
	assert((((uint32_t)sw_too_long_ack_en << SW_TOO_LONG_ACK_EN_OFFSET) & ~((uint32_t)SW_TOO_LONG_ACK_EN_MASK)) == 0);
	assert((((uint32_t)sw_mac_rx_disable << SW_MAC_RX_DISABLE_OFFSET) & ~((uint32_t)SW_MAC_RX_DISABLE_MASK)) == 0);
	tmp =
		((uint32_t)sw_mac_rx_phy_rate_prot_en << SW_MAC_RX_PHY_RATE_PROT_EN_OFFSET) |
		((uint32_t)sw_mac_rx_mpdu_len_prot_en << SW_MAC_RX_MPDU_LEN_PROT_EN_OFFSET) |
		((uint32_t)sw_ampdu_ignore_delim_sig_en << SW_AMPDU_IGNORE_DELIM_SIG_EN_OFFSET) |
		((uint32_t)sw_cfend_force_set_nav_zero_en << SW_CFEND_FORCE_SET_NAV_ZERO_EN_OFFSET) |
		((uint32_t)sw_cts_check_ring_resp_en << SW_CTS_CHECK_RING_RESP_EN_OFFSET) |
		((uint32_t)sw_ba_check_ring_resp_en << SW_BA_CHECK_RING_RESP_EN_OFFSET) |
		((uint32_t)sw_ack_check_ring_resp_en << SW_ACK_CHECK_RING_RESP_EN_OFFSET) |
		((uint32_t)sw_rx_ht_mgmt_htc_exist_en << SW_RX_HT_MGMT_HTC_EXIST_EN_OFFSET) |
		((uint32_t)sw_rx_crc_reorder_en << SW_RX_CRC_REORDER_EN_OFFSET) |
		((uint32_t)sw_not_hw_nav_update << SW_NOT_HW_NAV_UPDATE_OFFSET) |
		((uint32_t)sw_force_response_cts_en << SW_FORCE_RESPONSE_CTS_EN_OFFSET) |
		((uint32_t)sw_force_response_ba_en << SW_FORCE_RESPONSE_BA_EN_OFFSET) |
		((uint32_t)sw_force_response_ack_en << SW_FORCE_RESPONSE_ACK_EN_OFFSET) |
		((uint32_t)sw_mac_rx_prot_en << SW_MAC_RX_PROT_EN_OFFSET) |
		((uint32_t)sw_not_response_cts_en << SW_NOT_RESPONSE_CTS_EN_OFFSET) |
		((uint32_t)sw_not_response_ba_en << SW_NOT_RESPONSE_BA_EN_OFFSET) |
		((uint32_t)sw_not_response_ack_en << SW_NOT_RESPONSE_ACK_EN_OFFSET) |
		((uint32_t)sw_force_no_decrypt_en << SW_FORCE_NO_DECRYPT_EN_OFFSET) |
		((uint32_t)sw_force_mpdu_a_rx_desc_en << SW_FORCE_MPDU_A_RX_DESC_EN_OFFSET) |
		((uint32_t)sw_too_long_ack_en << SW_TOO_LONG_ACK_EN_OFFSET) |
		((uint32_t)sw_mac_rx_disable << SW_MAC_RX_DISABLE_OFFSET) ;
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_CTRL_ADDR), tmp);
}
static __inline void mac_rx_ctrl_unpack(volatile uint32_t* sw_mac_rx_phy_rate_prot_en, volatile uint32_t* sw_mac_rx_mpdu_len_prot_en, volatile uint32_t* sw_ampdu_ignore_delim_sig_en, volatile uint32_t* sw_cfend_force_set_nav_zero_en, volatile uint32_t* sw_cts_check_ring_resp_en, volatile uint32_t* sw_ba_check_ring_resp_en, volatile uint32_t* sw_ack_check_ring_resp_en, volatile uint32_t* sw_rx_ht_mgmt_htc_exist_en, volatile uint32_t* sw_rx_crc_reorder_en, volatile uint32_t* sw_not_hw_nav_update, volatile uint32_t* sw_force_response_cts_en, volatile uint32_t* sw_force_response_ba_en, volatile uint32_t* sw_force_response_ack_en, volatile uint32_t* sw_mac_rx_prot_en, volatile uint32_t* sw_not_response_cts_en, volatile uint32_t* sw_not_response_ba_en, volatile uint32_t* sw_not_response_ack_en, volatile uint32_t* sw_force_no_decrypt_en, volatile uint32_t* sw_force_mpdu_a_rx_desc_en, volatile uint32_t* sw_too_long_ack_en, volatile uint32_t* sw_mac_rx_disable)
{
	uint32_t tmp;

	tmp = mac_rx_ctrl_get();
	*sw_mac_rx_phy_rate_prot_en = (tmp & ((uint32_t)SW_MAC_RX_PHY_RATE_PROT_EN_MASK)) >> SW_MAC_RX_PHY_RATE_PROT_EN_OFFSET;
	*sw_mac_rx_mpdu_len_prot_en = (tmp & ((uint32_t)SW_MAC_RX_MPDU_LEN_PROT_EN_MASK)) >> SW_MAC_RX_MPDU_LEN_PROT_EN_OFFSET;
	*sw_ampdu_ignore_delim_sig_en = (tmp & ((uint32_t)SW_AMPDU_IGNORE_DELIM_SIG_EN_MASK)) >> SW_AMPDU_IGNORE_DELIM_SIG_EN_OFFSET;
	*sw_cfend_force_set_nav_zero_en = (tmp & ((uint32_t)SW_CFEND_FORCE_SET_NAV_ZERO_EN_MASK)) >> SW_CFEND_FORCE_SET_NAV_ZERO_EN_OFFSET;
	*sw_cts_check_ring_resp_en = (tmp & ((uint32_t)SW_CTS_CHECK_RING_RESP_EN_MASK)) >> SW_CTS_CHECK_RING_RESP_EN_OFFSET;
	*sw_ba_check_ring_resp_en = (tmp & ((uint32_t)SW_BA_CHECK_RING_RESP_EN_MASK)) >> SW_BA_CHECK_RING_RESP_EN_OFFSET;
	*sw_ack_check_ring_resp_en = (tmp & ((uint32_t)SW_ACK_CHECK_RING_RESP_EN_MASK)) >> SW_ACK_CHECK_RING_RESP_EN_OFFSET;
	*sw_rx_ht_mgmt_htc_exist_en = (tmp & ((uint32_t)SW_RX_HT_MGMT_HTC_EXIST_EN_MASK)) >> SW_RX_HT_MGMT_HTC_EXIST_EN_OFFSET;
	*sw_rx_crc_reorder_en = (tmp & ((uint32_t)SW_RX_CRC_REORDER_EN_MASK)) >> SW_RX_CRC_REORDER_EN_OFFSET;
	*sw_not_hw_nav_update = (tmp & ((uint32_t)SW_NOT_HW_NAV_UPDATE_MASK)) >> SW_NOT_HW_NAV_UPDATE_OFFSET;
	*sw_force_response_cts_en = (tmp & ((uint32_t)SW_FORCE_RESPONSE_CTS_EN_MASK)) >> SW_FORCE_RESPONSE_CTS_EN_OFFSET;
	*sw_force_response_ba_en = (tmp & ((uint32_t)SW_FORCE_RESPONSE_BA_EN_MASK)) >> SW_FORCE_RESPONSE_BA_EN_OFFSET;
	*sw_force_response_ack_en = (tmp & ((uint32_t)SW_FORCE_RESPONSE_ACK_EN_MASK)) >> SW_FORCE_RESPONSE_ACK_EN_OFFSET;
	*sw_mac_rx_prot_en = (tmp & ((uint32_t)SW_MAC_RX_PROT_EN_MASK)) >> SW_MAC_RX_PROT_EN_OFFSET;
	*sw_not_response_cts_en = (tmp & ((uint32_t)SW_NOT_RESPONSE_CTS_EN_MASK)) >> SW_NOT_RESPONSE_CTS_EN_OFFSET;
	*sw_not_response_ba_en = (tmp & ((uint32_t)SW_NOT_RESPONSE_BA_EN_MASK)) >> SW_NOT_RESPONSE_BA_EN_OFFSET;
	*sw_not_response_ack_en = (tmp & ((uint32_t)SW_NOT_RESPONSE_ACK_EN_MASK)) >> SW_NOT_RESPONSE_ACK_EN_OFFSET;
	*sw_force_no_decrypt_en = (tmp & ((uint32_t)SW_FORCE_NO_DECRYPT_EN_MASK)) >> SW_FORCE_NO_DECRYPT_EN_OFFSET;
	*sw_force_mpdu_a_rx_desc_en = (tmp & ((uint32_t)SW_FORCE_MPDU_A_RX_DESC_EN_MASK)) >> SW_FORCE_MPDU_A_RX_DESC_EN_OFFSET;
	*sw_too_long_ack_en = (tmp & ((uint32_t)SW_TOO_LONG_ACK_EN_MASK)) >> SW_TOO_LONG_ACK_EN_OFFSET;
	*sw_mac_rx_disable = (tmp & ((uint32_t)SW_MAC_RX_DISABLE_MASK)) >> SW_MAC_RX_DISABLE_OFFSET;
}
static __inline void mac_rx_abort_sw_mac_rx_abort_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_ABORT_ADDR);
	tmp &= ~SW_MAC_RX_ABORT_MASK;
	tmp |= (value << SW_MAC_RX_ABORT_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_ABORT_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_ABORT_ADDR), tmp);
}
static __inline void mac_rx_abort_set(uint32_t value)
{
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_ABORT_ADDR, value);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_ABORT_ADDR), value);
}
static __inline uint32_t mac_rx_abort_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_ABORT_ADDR));
}
static __inline void mac_rx_abort_pack(uint32_t sw_mac_rx_abort)
{
	uint32_t tmp;

	assert((((uint32_t)sw_mac_rx_abort << SW_MAC_RX_ABORT_OFFSET) & ~((uint32_t)SW_MAC_RX_ABORT_MASK)) == 0);
	tmp =
		((uint32_t)sw_mac_rx_abort << SW_MAC_RX_ABORT_OFFSET) ;
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_ABORT_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_ABORT_ADDR), tmp);
}
static __inline void mac_rx_dbg_sigtap_ctrl_sw_mac_rx_sigtap_mux_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_DBG_SIGTAP_CTRL_ADDR);
	tmp &= ~SW_MAC_RX_SIGTAP_MUX_MASK;
	tmp |= (value << SW_MAC_RX_SIGTAP_MUX_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_DBG_SIGTAP_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_DBG_SIGTAP_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_rx_dbg_sigtap_ctrl_sw_mac_rx_sigtap_mux_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_DBG_SIGTAP_CTRL_ADDR)) & SW_MAC_RX_SIGTAP_MUX_MASK) >> SW_MAC_RX_SIGTAP_MUX_OFFSET;
}
static __inline void mac_rx_dbg_sigtap_ctrl_sw_mac_rx_sigtap_trig_mux_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_DBG_SIGTAP_CTRL_ADDR);
	tmp &= ~SW_MAC_RX_SIGTAP_TRIG_MUX_MASK;
	tmp |= (value << SW_MAC_RX_SIGTAP_TRIG_MUX_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_DBG_SIGTAP_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_DBG_SIGTAP_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_rx_dbg_sigtap_ctrl_sw_mac_rx_sigtap_trig_mux_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_DBG_SIGTAP_CTRL_ADDR)) & SW_MAC_RX_SIGTAP_TRIG_MUX_MASK) >> SW_MAC_RX_SIGTAP_TRIG_MUX_OFFSET;
}
static __inline void mac_rx_dbg_sigtap_ctrl_set(uint32_t value)
{
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_DBG_SIGTAP_CTRL_ADDR, value);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_DBG_SIGTAP_CTRL_ADDR), value);
}
static __inline uint32_t mac_rx_dbg_sigtap_ctrl_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_DBG_SIGTAP_CTRL_ADDR));
}
static __inline void mac_rx_dbg_sigtap_ctrl_pack(uint32_t sw_mac_rx_sigtap_mux, uint32_t sw_mac_rx_sigtap_trig_mux)
{
	uint32_t tmp;

	assert((((uint32_t)sw_mac_rx_sigtap_mux << SW_MAC_RX_SIGTAP_MUX_OFFSET) & ~((uint32_t)SW_MAC_RX_SIGTAP_MUX_MASK)) == 0);
	assert((((uint32_t)sw_mac_rx_sigtap_trig_mux << SW_MAC_RX_SIGTAP_TRIG_MUX_OFFSET) & ~((uint32_t)SW_MAC_RX_SIGTAP_TRIG_MUX_MASK)) == 0);
	tmp =
		((uint32_t)sw_mac_rx_sigtap_mux << SW_MAC_RX_SIGTAP_MUX_OFFSET) |
		((uint32_t)sw_mac_rx_sigtap_trig_mux << SW_MAC_RX_SIGTAP_TRIG_MUX_OFFSET) ;
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_DBG_SIGTAP_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_DBG_SIGTAP_CTRL_ADDR), tmp);
}
static __inline void mac_rx_dbg_sigtap_ctrl_unpack(volatile uint32_t* sw_mac_rx_sigtap_mux, volatile uint32_t* sw_mac_rx_sigtap_trig_mux)
{
	uint32_t tmp;

	tmp = mac_rx_dbg_sigtap_ctrl_get();
	*sw_mac_rx_sigtap_mux = (tmp & ((uint32_t)SW_MAC_RX_SIGTAP_MUX_MASK)) >> SW_MAC_RX_SIGTAP_MUX_OFFSET;
	*sw_mac_rx_sigtap_trig_mux = (tmp & ((uint32_t)SW_MAC_RX_SIGTAP_TRIG_MUX_MASK)) >> SW_MAC_RX_SIGTAP_TRIG_MUX_OFFSET;
}
static __inline void mac_rx_dbg_ctrl_sw_mac_rx_dbg_general_clr_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_DBG_CTRL_ADDR);
	tmp &= ~SW_MAC_RX_DBG_GENERAL_CLR_MASK;
	tmp |= (value << SW_MAC_RX_DBG_GENERAL_CLR_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_DBG_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_DBG_CTRL_ADDR), tmp);
}
static __inline void mac_rx_dbg_ctrl_set(uint32_t value)
{
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_DBG_CTRL_ADDR, value);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_DBG_CTRL_ADDR), value);
}
static __inline uint32_t mac_rx_dbg_ctrl_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_DBG_CTRL_ADDR));
}
static __inline void mac_rx_dbg_ctrl_pack(uint32_t sw_mac_rx_dbg_general_clr)
{
	uint32_t tmp;

	assert((((uint32_t)sw_mac_rx_dbg_general_clr << SW_MAC_RX_DBG_GENERAL_CLR_OFFSET) & ~((uint32_t)SW_MAC_RX_DBG_GENERAL_CLR_MASK)) == 0);
	tmp =
		((uint32_t)sw_mac_rx_dbg_general_clr << SW_MAC_RX_DBG_GENERAL_CLR_OFFSET) ;
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_DBG_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_DBG_CTRL_ADDR), tmp);
}
static __inline void mac_resp_ctrl_sw_ack_check_rx_duration_en_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RESP_CTRL_ADDR);
	tmp &= ~SW_ACK_CHECK_RX_DURATION_EN_MASK;
	tmp |= (value << SW_ACK_CHECK_RX_DURATION_EN_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RESP_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RESP_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_resp_ctrl_sw_ack_check_rx_duration_en_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RESP_CTRL_ADDR)) & SW_ACK_CHECK_RX_DURATION_EN_MASK) >> SW_ACK_CHECK_RX_DURATION_EN_OFFSET;
}
static __inline void mac_resp_ctrl_sw_rx_filter_fail_resp_cts_en_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RESP_CTRL_ADDR);
	tmp &= ~SW_RX_FILTER_FAIL_RESP_CTS_EN_MASK;
	tmp |= (value << SW_RX_FILTER_FAIL_RESP_CTS_EN_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RESP_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RESP_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_resp_ctrl_sw_rx_filter_fail_resp_cts_en_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RESP_CTRL_ADDR)) & SW_RX_FILTER_FAIL_RESP_CTS_EN_MASK) >> SW_RX_FILTER_FAIL_RESP_CTS_EN_OFFSET;
}
static __inline void mac_resp_ctrl_sw_rx_filter_fail_resp_ba_en_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RESP_CTRL_ADDR);
	tmp &= ~SW_RX_FILTER_FAIL_RESP_BA_EN_MASK;
	tmp |= (value << SW_RX_FILTER_FAIL_RESP_BA_EN_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RESP_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RESP_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_resp_ctrl_sw_rx_filter_fail_resp_ba_en_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RESP_CTRL_ADDR)) & SW_RX_FILTER_FAIL_RESP_BA_EN_MASK) >> SW_RX_FILTER_FAIL_RESP_BA_EN_OFFSET;
}
static __inline void mac_resp_ctrl_sw_rx_filter_fail_resp_ack_en_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RESP_CTRL_ADDR);
	tmp &= ~SW_RX_FILTER_FAIL_RESP_ACK_EN_MASK;
	tmp |= (value << SW_RX_FILTER_FAIL_RESP_ACK_EN_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RESP_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RESP_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_resp_ctrl_sw_rx_filter_fail_resp_ack_en_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RESP_CTRL_ADDR)) & SW_RX_FILTER_FAIL_RESP_ACK_EN_MASK) >> SW_RX_FILTER_FAIL_RESP_ACK_EN_OFFSET;
}
static __inline void mac_resp_ctrl_sw_resp_cts_ignore_nav_en_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RESP_CTRL_ADDR);
	tmp &= ~SW_RESP_CTS_IGNORE_NAV_EN_MASK;
	tmp |= (value << SW_RESP_CTS_IGNORE_NAV_EN_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RESP_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RESP_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_resp_ctrl_sw_resp_cts_ignore_nav_en_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RESP_CTRL_ADDR)) & SW_RESP_CTS_IGNORE_NAV_EN_MASK) >> SW_RESP_CTS_IGNORE_NAV_EN_OFFSET;
}
static __inline void mac_resp_ctrl_sw_resp_fc_power_mode_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RESP_CTRL_ADDR);
	tmp &= ~SW_RESP_FC_POWER_MODE_MASK;
	tmp |= (value << SW_RESP_FC_POWER_MODE_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RESP_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RESP_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_resp_ctrl_sw_resp_fc_power_mode_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RESP_CTRL_ADDR)) & SW_RESP_FC_POWER_MODE_MASK) >> SW_RESP_FC_POWER_MODE_OFFSET;
}
static __inline void mac_resp_ctrl_set(uint32_t value)
{
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RESP_CTRL_ADDR, value);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RESP_CTRL_ADDR), value);
}
static __inline uint32_t mac_resp_ctrl_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RESP_CTRL_ADDR));
}
static __inline void mac_resp_ctrl_pack(uint32_t sw_ack_check_rx_duration_en, uint32_t sw_rx_filter_fail_resp_cts_en, uint32_t sw_rx_filter_fail_resp_ba_en, uint32_t sw_rx_filter_fail_resp_ack_en, uint32_t sw_resp_cts_ignore_nav_en, uint32_t sw_resp_fc_power_mode)
{
	uint32_t tmp;

	assert((((uint32_t)sw_ack_check_rx_duration_en << SW_ACK_CHECK_RX_DURATION_EN_OFFSET) & ~((uint32_t)SW_ACK_CHECK_RX_DURATION_EN_MASK)) == 0);
	assert((((uint32_t)sw_rx_filter_fail_resp_cts_en << SW_RX_FILTER_FAIL_RESP_CTS_EN_OFFSET) & ~((uint32_t)SW_RX_FILTER_FAIL_RESP_CTS_EN_MASK)) == 0);
	assert((((uint32_t)sw_rx_filter_fail_resp_ba_en << SW_RX_FILTER_FAIL_RESP_BA_EN_OFFSET) & ~((uint32_t)SW_RX_FILTER_FAIL_RESP_BA_EN_MASK)) == 0);
	assert((((uint32_t)sw_rx_filter_fail_resp_ack_en << SW_RX_FILTER_FAIL_RESP_ACK_EN_OFFSET) & ~((uint32_t)SW_RX_FILTER_FAIL_RESP_ACK_EN_MASK)) == 0);
	assert((((uint32_t)sw_resp_cts_ignore_nav_en << SW_RESP_CTS_IGNORE_NAV_EN_OFFSET) & ~((uint32_t)SW_RESP_CTS_IGNORE_NAV_EN_MASK)) == 0);
	assert((((uint32_t)sw_resp_fc_power_mode << SW_RESP_FC_POWER_MODE_OFFSET) & ~((uint32_t)SW_RESP_FC_POWER_MODE_MASK)) == 0);
	tmp =
		((uint32_t)sw_ack_check_rx_duration_en << SW_ACK_CHECK_RX_DURATION_EN_OFFSET) |
		((uint32_t)sw_rx_filter_fail_resp_cts_en << SW_RX_FILTER_FAIL_RESP_CTS_EN_OFFSET) |
		((uint32_t)sw_rx_filter_fail_resp_ba_en << SW_RX_FILTER_FAIL_RESP_BA_EN_OFFSET) |
		((uint32_t)sw_rx_filter_fail_resp_ack_en << SW_RX_FILTER_FAIL_RESP_ACK_EN_OFFSET) |
		((uint32_t)sw_resp_cts_ignore_nav_en << SW_RESP_CTS_IGNORE_NAV_EN_OFFSET) |
		((uint32_t)sw_resp_fc_power_mode << SW_RESP_FC_POWER_MODE_OFFSET) ;
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RESP_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RESP_CTRL_ADDR), tmp);
}
static __inline void mac_resp_ctrl_unpack(volatile uint32_t* sw_ack_check_rx_duration_en, volatile uint32_t* sw_rx_filter_fail_resp_cts_en, volatile uint32_t* sw_rx_filter_fail_resp_ba_en, volatile uint32_t* sw_rx_filter_fail_resp_ack_en, volatile uint32_t* sw_resp_cts_ignore_nav_en, volatile uint32_t* sw_resp_fc_power_mode)
{
	uint32_t tmp;

	tmp = mac_resp_ctrl_get();
	*sw_ack_check_rx_duration_en = (tmp & ((uint32_t)SW_ACK_CHECK_RX_DURATION_EN_MASK)) >> SW_ACK_CHECK_RX_DURATION_EN_OFFSET;
	*sw_rx_filter_fail_resp_cts_en = (tmp & ((uint32_t)SW_RX_FILTER_FAIL_RESP_CTS_EN_MASK)) >> SW_RX_FILTER_FAIL_RESP_CTS_EN_OFFSET;
	*sw_rx_filter_fail_resp_ba_en = (tmp & ((uint32_t)SW_RX_FILTER_FAIL_RESP_BA_EN_MASK)) >> SW_RX_FILTER_FAIL_RESP_BA_EN_OFFSET;
	*sw_rx_filter_fail_resp_ack_en = (tmp & ((uint32_t)SW_RX_FILTER_FAIL_RESP_ACK_EN_MASK)) >> SW_RX_FILTER_FAIL_RESP_ACK_EN_OFFSET;
	*sw_resp_cts_ignore_nav_en = (tmp & ((uint32_t)SW_RESP_CTS_IGNORE_NAV_EN_MASK)) >> SW_RESP_CTS_IGNORE_NAV_EN_OFFSET;
	*sw_resp_fc_power_mode = (tmp & ((uint32_t)SW_RESP_FC_POWER_MODE_MASK)) >> SW_RESP_FC_POWER_MODE_OFFSET;
}
static __inline void mac_resp_cts_ctrl_sw_resp_cts_nav_threshold_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RESP_CTS_CTRL_ADDR);
	tmp &= ~SW_RESP_CTS_NAV_THRESHOLD_MASK;
	tmp |= (value << SW_RESP_CTS_NAV_THRESHOLD_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RESP_CTS_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RESP_CTS_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_resp_cts_ctrl_sw_resp_cts_nav_threshold_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RESP_CTS_CTRL_ADDR)) & SW_RESP_CTS_NAV_THRESHOLD_MASK) >> SW_RESP_CTS_NAV_THRESHOLD_OFFSET;
}
static __inline void mac_resp_cts_ctrl_set(uint32_t value)
{
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RESP_CTS_CTRL_ADDR, value);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RESP_CTS_CTRL_ADDR), value);
}
static __inline uint32_t mac_resp_cts_ctrl_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RESP_CTS_CTRL_ADDR));
}
static __inline void mac_resp_cts_ctrl_pack(uint32_t sw_resp_cts_nav_threshold)
{
	uint32_t tmp;

	assert((((uint32_t)sw_resp_cts_nav_threshold << SW_RESP_CTS_NAV_THRESHOLD_OFFSET) & ~((uint32_t)SW_RESP_CTS_NAV_THRESHOLD_MASK)) == 0);
	tmp =
		((uint32_t)sw_resp_cts_nav_threshold << SW_RESP_CTS_NAV_THRESHOLD_OFFSET) ;
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RESP_CTS_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RESP_CTS_CTRL_ADDR), tmp);
}
static __inline void mac_resp_cts_ctrl_unpack(volatile uint32_t* sw_resp_cts_nav_threshold)
{
	uint32_t tmp;

	tmp = mac_resp_cts_ctrl_get();
	*sw_resp_cts_nav_threshold = (tmp & ((uint32_t)SW_RESP_CTS_NAV_THRESHOLD_MASK)) >> SW_RESP_CTS_NAV_THRESHOLD_OFFSET;
}
static __inline void mac_mpdu_len_prot_limit_sw_mac_rx_max_valid_mpdu_len_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_MPDU_LEN_PROT_LIMIT_ADDR);
	tmp &= ~SW_MAC_RX_MAX_VALID_MPDU_LEN_MASK;
	tmp |= (value << SW_MAC_RX_MAX_VALID_MPDU_LEN_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_MPDU_LEN_PROT_LIMIT_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_MPDU_LEN_PROT_LIMIT_ADDR), tmp);
}
static __inline uint32_t mac_mpdu_len_prot_limit_sw_mac_rx_max_valid_mpdu_len_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_MPDU_LEN_PROT_LIMIT_ADDR)) & SW_MAC_RX_MAX_VALID_MPDU_LEN_MASK) >> SW_MAC_RX_MAX_VALID_MPDU_LEN_OFFSET;
}
static __inline void mac_mpdu_len_prot_limit_sw_mac_rx_min_valid_mpdu_len_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_MPDU_LEN_PROT_LIMIT_ADDR);
	tmp &= ~SW_MAC_RX_MIN_VALID_MPDU_LEN_MASK;
	tmp |= (value << SW_MAC_RX_MIN_VALID_MPDU_LEN_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_MPDU_LEN_PROT_LIMIT_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_MPDU_LEN_PROT_LIMIT_ADDR), tmp);
}
static __inline uint32_t mac_mpdu_len_prot_limit_sw_mac_rx_min_valid_mpdu_len_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_MPDU_LEN_PROT_LIMIT_ADDR)) & SW_MAC_RX_MIN_VALID_MPDU_LEN_MASK) >> SW_MAC_RX_MIN_VALID_MPDU_LEN_OFFSET;
}
static __inline void mac_mpdu_len_prot_limit_set(uint32_t value)
{
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_MPDU_LEN_PROT_LIMIT_ADDR, value);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_MPDU_LEN_PROT_LIMIT_ADDR), value);
}
static __inline uint32_t mac_mpdu_len_prot_limit_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_MPDU_LEN_PROT_LIMIT_ADDR));
}
static __inline void mac_mpdu_len_prot_limit_pack(uint32_t sw_mac_rx_max_valid_mpdu_len, uint32_t sw_mac_rx_min_valid_mpdu_len)
{
	uint32_t tmp;

	assert((((uint32_t)sw_mac_rx_max_valid_mpdu_len << SW_MAC_RX_MAX_VALID_MPDU_LEN_OFFSET) & ~((uint32_t)SW_MAC_RX_MAX_VALID_MPDU_LEN_MASK)) == 0);
	assert((((uint32_t)sw_mac_rx_min_valid_mpdu_len << SW_MAC_RX_MIN_VALID_MPDU_LEN_OFFSET) & ~((uint32_t)SW_MAC_RX_MIN_VALID_MPDU_LEN_MASK)) == 0);
	tmp =
		((uint32_t)sw_mac_rx_max_valid_mpdu_len << SW_MAC_RX_MAX_VALID_MPDU_LEN_OFFSET) |
		((uint32_t)sw_mac_rx_min_valid_mpdu_len << SW_MAC_RX_MIN_VALID_MPDU_LEN_OFFSET) ;
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_MPDU_LEN_PROT_LIMIT_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_MPDU_LEN_PROT_LIMIT_ADDR), tmp);
}
static __inline void mac_mpdu_len_prot_limit_unpack(volatile uint32_t* sw_mac_rx_max_valid_mpdu_len, volatile uint32_t* sw_mac_rx_min_valid_mpdu_len)
{
	uint32_t tmp;

	tmp = mac_mpdu_len_prot_limit_get();
	*sw_mac_rx_max_valid_mpdu_len = (tmp & ((uint32_t)SW_MAC_RX_MAX_VALID_MPDU_LEN_MASK)) >> SW_MAC_RX_MAX_VALID_MPDU_LEN_OFFSET;
	*sw_mac_rx_min_valid_mpdu_len = (tmp & ((uint32_t)SW_MAC_RX_MIN_VALID_MPDU_LEN_MASK)) >> SW_MAC_RX_MIN_VALID_MPDU_LEN_OFFSET;
}
static __inline void mac_rx_ht_short_gi_rate_ctrl_sw_ofdm_ht_40m_short_gi_mcs_32_en_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_HT_SHORT_GI_RATE_CTRL_ADDR);
	tmp &= ~SW_OFDM_HT_40M_SHORT_GI_MCS_32_EN_MASK;
	tmp |= (value << SW_OFDM_HT_40M_SHORT_GI_MCS_32_EN_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_HT_SHORT_GI_RATE_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_HT_SHORT_GI_RATE_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_rx_ht_short_gi_rate_ctrl_sw_ofdm_ht_40m_short_gi_mcs_32_en_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_HT_SHORT_GI_RATE_CTRL_ADDR)) & SW_OFDM_HT_40M_SHORT_GI_MCS_32_EN_MASK) >> SW_OFDM_HT_40M_SHORT_GI_MCS_32_EN_OFFSET;
}
static __inline void mac_rx_ht_short_gi_rate_ctrl_sw_ofdm_ht_40m_short_gi_mcs_7_en_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_HT_SHORT_GI_RATE_CTRL_ADDR);
	tmp &= ~SW_OFDM_HT_40M_SHORT_GI_MCS_7_EN_MASK;
	tmp |= (value << SW_OFDM_HT_40M_SHORT_GI_MCS_7_EN_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_HT_SHORT_GI_RATE_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_HT_SHORT_GI_RATE_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_rx_ht_short_gi_rate_ctrl_sw_ofdm_ht_40m_short_gi_mcs_7_en_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_HT_SHORT_GI_RATE_CTRL_ADDR)) & SW_OFDM_HT_40M_SHORT_GI_MCS_7_EN_MASK) >> SW_OFDM_HT_40M_SHORT_GI_MCS_7_EN_OFFSET;
}
static __inline void mac_rx_ht_short_gi_rate_ctrl_sw_ofdm_ht_40m_short_gi_mcs_6_en_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_HT_SHORT_GI_RATE_CTRL_ADDR);
	tmp &= ~SW_OFDM_HT_40M_SHORT_GI_MCS_6_EN_MASK;
	tmp |= (value << SW_OFDM_HT_40M_SHORT_GI_MCS_6_EN_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_HT_SHORT_GI_RATE_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_HT_SHORT_GI_RATE_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_rx_ht_short_gi_rate_ctrl_sw_ofdm_ht_40m_short_gi_mcs_6_en_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_HT_SHORT_GI_RATE_CTRL_ADDR)) & SW_OFDM_HT_40M_SHORT_GI_MCS_6_EN_MASK) >> SW_OFDM_HT_40M_SHORT_GI_MCS_6_EN_OFFSET;
}
static __inline void mac_rx_ht_short_gi_rate_ctrl_sw_ofdm_ht_40m_short_gi_mcs_5_en_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_HT_SHORT_GI_RATE_CTRL_ADDR);
	tmp &= ~SW_OFDM_HT_40M_SHORT_GI_MCS_5_EN_MASK;
	tmp |= (value << SW_OFDM_HT_40M_SHORT_GI_MCS_5_EN_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_HT_SHORT_GI_RATE_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_HT_SHORT_GI_RATE_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_rx_ht_short_gi_rate_ctrl_sw_ofdm_ht_40m_short_gi_mcs_5_en_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_HT_SHORT_GI_RATE_CTRL_ADDR)) & SW_OFDM_HT_40M_SHORT_GI_MCS_5_EN_MASK) >> SW_OFDM_HT_40M_SHORT_GI_MCS_5_EN_OFFSET;
}
static __inline void mac_rx_ht_short_gi_rate_ctrl_sw_ofdm_ht_40m_short_gi_mcs_4_en_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_HT_SHORT_GI_RATE_CTRL_ADDR);
	tmp &= ~SW_OFDM_HT_40M_SHORT_GI_MCS_4_EN_MASK;
	tmp |= (value << SW_OFDM_HT_40M_SHORT_GI_MCS_4_EN_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_HT_SHORT_GI_RATE_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_HT_SHORT_GI_RATE_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_rx_ht_short_gi_rate_ctrl_sw_ofdm_ht_40m_short_gi_mcs_4_en_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_HT_SHORT_GI_RATE_CTRL_ADDR)) & SW_OFDM_HT_40M_SHORT_GI_MCS_4_EN_MASK) >> SW_OFDM_HT_40M_SHORT_GI_MCS_4_EN_OFFSET;
}
static __inline void mac_rx_ht_short_gi_rate_ctrl_sw_ofdm_ht_40m_short_gi_mcs_3_en_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_HT_SHORT_GI_RATE_CTRL_ADDR);
	tmp &= ~SW_OFDM_HT_40M_SHORT_GI_MCS_3_EN_MASK;
	tmp |= (value << SW_OFDM_HT_40M_SHORT_GI_MCS_3_EN_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_HT_SHORT_GI_RATE_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_HT_SHORT_GI_RATE_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_rx_ht_short_gi_rate_ctrl_sw_ofdm_ht_40m_short_gi_mcs_3_en_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_HT_SHORT_GI_RATE_CTRL_ADDR)) & SW_OFDM_HT_40M_SHORT_GI_MCS_3_EN_MASK) >> SW_OFDM_HT_40M_SHORT_GI_MCS_3_EN_OFFSET;
}
static __inline void mac_rx_ht_short_gi_rate_ctrl_sw_ofdm_ht_40m_short_gi_mcs_2_en_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_HT_SHORT_GI_RATE_CTRL_ADDR);
	tmp &= ~SW_OFDM_HT_40M_SHORT_GI_MCS_2_EN_MASK;
	tmp |= (value << SW_OFDM_HT_40M_SHORT_GI_MCS_2_EN_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_HT_SHORT_GI_RATE_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_HT_SHORT_GI_RATE_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_rx_ht_short_gi_rate_ctrl_sw_ofdm_ht_40m_short_gi_mcs_2_en_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_HT_SHORT_GI_RATE_CTRL_ADDR)) & SW_OFDM_HT_40M_SHORT_GI_MCS_2_EN_MASK) >> SW_OFDM_HT_40M_SHORT_GI_MCS_2_EN_OFFSET;
}
static __inline void mac_rx_ht_short_gi_rate_ctrl_sw_ofdm_ht_40m_short_gi_mcs_1_en_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_HT_SHORT_GI_RATE_CTRL_ADDR);
	tmp &= ~SW_OFDM_HT_40M_SHORT_GI_MCS_1_EN_MASK;
	tmp |= (value << SW_OFDM_HT_40M_SHORT_GI_MCS_1_EN_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_HT_SHORT_GI_RATE_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_HT_SHORT_GI_RATE_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_rx_ht_short_gi_rate_ctrl_sw_ofdm_ht_40m_short_gi_mcs_1_en_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_HT_SHORT_GI_RATE_CTRL_ADDR)) & SW_OFDM_HT_40M_SHORT_GI_MCS_1_EN_MASK) >> SW_OFDM_HT_40M_SHORT_GI_MCS_1_EN_OFFSET;
}
static __inline void mac_rx_ht_short_gi_rate_ctrl_sw_ofdm_ht_40m_short_gi_mcs_0_en_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_HT_SHORT_GI_RATE_CTRL_ADDR);
	tmp &= ~SW_OFDM_HT_40M_SHORT_GI_MCS_0_EN_MASK;
	tmp |= (value << SW_OFDM_HT_40M_SHORT_GI_MCS_0_EN_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_HT_SHORT_GI_RATE_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_HT_SHORT_GI_RATE_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_rx_ht_short_gi_rate_ctrl_sw_ofdm_ht_40m_short_gi_mcs_0_en_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_HT_SHORT_GI_RATE_CTRL_ADDR)) & SW_OFDM_HT_40M_SHORT_GI_MCS_0_EN_MASK) >> SW_OFDM_HT_40M_SHORT_GI_MCS_0_EN_OFFSET;
}
static __inline void mac_rx_ht_short_gi_rate_ctrl_sw_ofdm_ht_20m_short_gi_mcs_7_en_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_HT_SHORT_GI_RATE_CTRL_ADDR);
	tmp &= ~SW_OFDM_HT_20M_SHORT_GI_MCS_7_EN_MASK;
	tmp |= (value << SW_OFDM_HT_20M_SHORT_GI_MCS_7_EN_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_HT_SHORT_GI_RATE_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_HT_SHORT_GI_RATE_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_rx_ht_short_gi_rate_ctrl_sw_ofdm_ht_20m_short_gi_mcs_7_en_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_HT_SHORT_GI_RATE_CTRL_ADDR)) & SW_OFDM_HT_20M_SHORT_GI_MCS_7_EN_MASK) >> SW_OFDM_HT_20M_SHORT_GI_MCS_7_EN_OFFSET;
}
static __inline void mac_rx_ht_short_gi_rate_ctrl_sw_ofdm_ht_20m_short_gi_mcs_6_en_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_HT_SHORT_GI_RATE_CTRL_ADDR);
	tmp &= ~SW_OFDM_HT_20M_SHORT_GI_MCS_6_EN_MASK;
	tmp |= (value << SW_OFDM_HT_20M_SHORT_GI_MCS_6_EN_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_HT_SHORT_GI_RATE_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_HT_SHORT_GI_RATE_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_rx_ht_short_gi_rate_ctrl_sw_ofdm_ht_20m_short_gi_mcs_6_en_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_HT_SHORT_GI_RATE_CTRL_ADDR)) & SW_OFDM_HT_20M_SHORT_GI_MCS_6_EN_MASK) >> SW_OFDM_HT_20M_SHORT_GI_MCS_6_EN_OFFSET;
}
static __inline void mac_rx_ht_short_gi_rate_ctrl_sw_ofdm_ht_20m_short_gi_mcs_5_en_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_HT_SHORT_GI_RATE_CTRL_ADDR);
	tmp &= ~SW_OFDM_HT_20M_SHORT_GI_MCS_5_EN_MASK;
	tmp |= (value << SW_OFDM_HT_20M_SHORT_GI_MCS_5_EN_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_HT_SHORT_GI_RATE_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_HT_SHORT_GI_RATE_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_rx_ht_short_gi_rate_ctrl_sw_ofdm_ht_20m_short_gi_mcs_5_en_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_HT_SHORT_GI_RATE_CTRL_ADDR)) & SW_OFDM_HT_20M_SHORT_GI_MCS_5_EN_MASK) >> SW_OFDM_HT_20M_SHORT_GI_MCS_5_EN_OFFSET;
}
static __inline void mac_rx_ht_short_gi_rate_ctrl_sw_ofdm_ht_20m_short_gi_mcs_4_en_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_HT_SHORT_GI_RATE_CTRL_ADDR);
	tmp &= ~SW_OFDM_HT_20M_SHORT_GI_MCS_4_EN_MASK;
	tmp |= (value << SW_OFDM_HT_20M_SHORT_GI_MCS_4_EN_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_HT_SHORT_GI_RATE_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_HT_SHORT_GI_RATE_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_rx_ht_short_gi_rate_ctrl_sw_ofdm_ht_20m_short_gi_mcs_4_en_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_HT_SHORT_GI_RATE_CTRL_ADDR)) & SW_OFDM_HT_20M_SHORT_GI_MCS_4_EN_MASK) >> SW_OFDM_HT_20M_SHORT_GI_MCS_4_EN_OFFSET;
}
static __inline void mac_rx_ht_short_gi_rate_ctrl_sw_ofdm_ht_20m_short_gi_mcs_3_en_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_HT_SHORT_GI_RATE_CTRL_ADDR);
	tmp &= ~SW_OFDM_HT_20M_SHORT_GI_MCS_3_EN_MASK;
	tmp |= (value << SW_OFDM_HT_20M_SHORT_GI_MCS_3_EN_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_HT_SHORT_GI_RATE_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_HT_SHORT_GI_RATE_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_rx_ht_short_gi_rate_ctrl_sw_ofdm_ht_20m_short_gi_mcs_3_en_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_HT_SHORT_GI_RATE_CTRL_ADDR)) & SW_OFDM_HT_20M_SHORT_GI_MCS_3_EN_MASK) >> SW_OFDM_HT_20M_SHORT_GI_MCS_3_EN_OFFSET;
}
static __inline void mac_rx_ht_short_gi_rate_ctrl_sw_ofdm_ht_20m_short_gi_mcs_2_en_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_HT_SHORT_GI_RATE_CTRL_ADDR);
	tmp &= ~SW_OFDM_HT_20M_SHORT_GI_MCS_2_EN_MASK;
	tmp |= (value << SW_OFDM_HT_20M_SHORT_GI_MCS_2_EN_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_HT_SHORT_GI_RATE_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_HT_SHORT_GI_RATE_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_rx_ht_short_gi_rate_ctrl_sw_ofdm_ht_20m_short_gi_mcs_2_en_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_HT_SHORT_GI_RATE_CTRL_ADDR)) & SW_OFDM_HT_20M_SHORT_GI_MCS_2_EN_MASK) >> SW_OFDM_HT_20M_SHORT_GI_MCS_2_EN_OFFSET;
}
static __inline void mac_rx_ht_short_gi_rate_ctrl_sw_ofdm_ht_20m_short_gi_mcs_1_en_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_HT_SHORT_GI_RATE_CTRL_ADDR);
	tmp &= ~SW_OFDM_HT_20M_SHORT_GI_MCS_1_EN_MASK;
	tmp |= (value << SW_OFDM_HT_20M_SHORT_GI_MCS_1_EN_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_HT_SHORT_GI_RATE_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_HT_SHORT_GI_RATE_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_rx_ht_short_gi_rate_ctrl_sw_ofdm_ht_20m_short_gi_mcs_1_en_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_HT_SHORT_GI_RATE_CTRL_ADDR)) & SW_OFDM_HT_20M_SHORT_GI_MCS_1_EN_MASK) >> SW_OFDM_HT_20M_SHORT_GI_MCS_1_EN_OFFSET;
}
static __inline void mac_rx_ht_short_gi_rate_ctrl_sw_ofdm_ht_20m_short_gi_mcs_0_en_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_HT_SHORT_GI_RATE_CTRL_ADDR);
	tmp &= ~SW_OFDM_HT_20M_SHORT_GI_MCS_0_EN_MASK;
	tmp |= (value << SW_OFDM_HT_20M_SHORT_GI_MCS_0_EN_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_HT_SHORT_GI_RATE_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_HT_SHORT_GI_RATE_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_rx_ht_short_gi_rate_ctrl_sw_ofdm_ht_20m_short_gi_mcs_0_en_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_HT_SHORT_GI_RATE_CTRL_ADDR)) & SW_OFDM_HT_20M_SHORT_GI_MCS_0_EN_MASK) >> SW_OFDM_HT_20M_SHORT_GI_MCS_0_EN_OFFSET;
}
static __inline void mac_rx_ht_short_gi_rate_ctrl_set(uint32_t value)
{
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_HT_SHORT_GI_RATE_CTRL_ADDR, value);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_HT_SHORT_GI_RATE_CTRL_ADDR), value);
}
static __inline uint32_t mac_rx_ht_short_gi_rate_ctrl_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_HT_SHORT_GI_RATE_CTRL_ADDR));
}
static __inline void mac_rx_ht_short_gi_rate_ctrl_pack(uint32_t sw_ofdm_ht_40m_short_gi_mcs_32_en, uint32_t sw_ofdm_ht_40m_short_gi_mcs_7_en, uint32_t sw_ofdm_ht_40m_short_gi_mcs_6_en, uint32_t sw_ofdm_ht_40m_short_gi_mcs_5_en, uint32_t sw_ofdm_ht_40m_short_gi_mcs_4_en, uint32_t sw_ofdm_ht_40m_short_gi_mcs_3_en, uint32_t sw_ofdm_ht_40m_short_gi_mcs_2_en, uint32_t sw_ofdm_ht_40m_short_gi_mcs_1_en, uint32_t sw_ofdm_ht_40m_short_gi_mcs_0_en, uint32_t sw_ofdm_ht_20m_short_gi_mcs_7_en, uint32_t sw_ofdm_ht_20m_short_gi_mcs_6_en, uint32_t sw_ofdm_ht_20m_short_gi_mcs_5_en, uint32_t sw_ofdm_ht_20m_short_gi_mcs_4_en, uint32_t sw_ofdm_ht_20m_short_gi_mcs_3_en, uint32_t sw_ofdm_ht_20m_short_gi_mcs_2_en, uint32_t sw_ofdm_ht_20m_short_gi_mcs_1_en, uint32_t sw_ofdm_ht_20m_short_gi_mcs_0_en)
{
	uint32_t tmp;

	assert((((uint32_t)sw_ofdm_ht_40m_short_gi_mcs_32_en << SW_OFDM_HT_40M_SHORT_GI_MCS_32_EN_OFFSET) & ~((uint32_t)SW_OFDM_HT_40M_SHORT_GI_MCS_32_EN_MASK)) == 0);
	assert((((uint32_t)sw_ofdm_ht_40m_short_gi_mcs_7_en << SW_OFDM_HT_40M_SHORT_GI_MCS_7_EN_OFFSET) & ~((uint32_t)SW_OFDM_HT_40M_SHORT_GI_MCS_7_EN_MASK)) == 0);
	assert((((uint32_t)sw_ofdm_ht_40m_short_gi_mcs_6_en << SW_OFDM_HT_40M_SHORT_GI_MCS_6_EN_OFFSET) & ~((uint32_t)SW_OFDM_HT_40M_SHORT_GI_MCS_6_EN_MASK)) == 0);
	assert((((uint32_t)sw_ofdm_ht_40m_short_gi_mcs_5_en << SW_OFDM_HT_40M_SHORT_GI_MCS_5_EN_OFFSET) & ~((uint32_t)SW_OFDM_HT_40M_SHORT_GI_MCS_5_EN_MASK)) == 0);
	assert((((uint32_t)sw_ofdm_ht_40m_short_gi_mcs_4_en << SW_OFDM_HT_40M_SHORT_GI_MCS_4_EN_OFFSET) & ~((uint32_t)SW_OFDM_HT_40M_SHORT_GI_MCS_4_EN_MASK)) == 0);
	assert((((uint32_t)sw_ofdm_ht_40m_short_gi_mcs_3_en << SW_OFDM_HT_40M_SHORT_GI_MCS_3_EN_OFFSET) & ~((uint32_t)SW_OFDM_HT_40M_SHORT_GI_MCS_3_EN_MASK)) == 0);
	assert((((uint32_t)sw_ofdm_ht_40m_short_gi_mcs_2_en << SW_OFDM_HT_40M_SHORT_GI_MCS_2_EN_OFFSET) & ~((uint32_t)SW_OFDM_HT_40M_SHORT_GI_MCS_2_EN_MASK)) == 0);
	assert((((uint32_t)sw_ofdm_ht_40m_short_gi_mcs_1_en << SW_OFDM_HT_40M_SHORT_GI_MCS_1_EN_OFFSET) & ~((uint32_t)SW_OFDM_HT_40M_SHORT_GI_MCS_1_EN_MASK)) == 0);
	assert((((uint32_t)sw_ofdm_ht_40m_short_gi_mcs_0_en << SW_OFDM_HT_40M_SHORT_GI_MCS_0_EN_OFFSET) & ~((uint32_t)SW_OFDM_HT_40M_SHORT_GI_MCS_0_EN_MASK)) == 0);
	assert((((uint32_t)sw_ofdm_ht_20m_short_gi_mcs_7_en << SW_OFDM_HT_20M_SHORT_GI_MCS_7_EN_OFFSET) & ~((uint32_t)SW_OFDM_HT_20M_SHORT_GI_MCS_7_EN_MASK)) == 0);
	assert((((uint32_t)sw_ofdm_ht_20m_short_gi_mcs_6_en << SW_OFDM_HT_20M_SHORT_GI_MCS_6_EN_OFFSET) & ~((uint32_t)SW_OFDM_HT_20M_SHORT_GI_MCS_6_EN_MASK)) == 0);
	assert((((uint32_t)sw_ofdm_ht_20m_short_gi_mcs_5_en << SW_OFDM_HT_20M_SHORT_GI_MCS_5_EN_OFFSET) & ~((uint32_t)SW_OFDM_HT_20M_SHORT_GI_MCS_5_EN_MASK)) == 0);
	assert((((uint32_t)sw_ofdm_ht_20m_short_gi_mcs_4_en << SW_OFDM_HT_20M_SHORT_GI_MCS_4_EN_OFFSET) & ~((uint32_t)SW_OFDM_HT_20M_SHORT_GI_MCS_4_EN_MASK)) == 0);
	assert((((uint32_t)sw_ofdm_ht_20m_short_gi_mcs_3_en << SW_OFDM_HT_20M_SHORT_GI_MCS_3_EN_OFFSET) & ~((uint32_t)SW_OFDM_HT_20M_SHORT_GI_MCS_3_EN_MASK)) == 0);
	assert((((uint32_t)sw_ofdm_ht_20m_short_gi_mcs_2_en << SW_OFDM_HT_20M_SHORT_GI_MCS_2_EN_OFFSET) & ~((uint32_t)SW_OFDM_HT_20M_SHORT_GI_MCS_2_EN_MASK)) == 0);
	assert((((uint32_t)sw_ofdm_ht_20m_short_gi_mcs_1_en << SW_OFDM_HT_20M_SHORT_GI_MCS_1_EN_OFFSET) & ~((uint32_t)SW_OFDM_HT_20M_SHORT_GI_MCS_1_EN_MASK)) == 0);
	assert((((uint32_t)sw_ofdm_ht_20m_short_gi_mcs_0_en << SW_OFDM_HT_20M_SHORT_GI_MCS_0_EN_OFFSET) & ~((uint32_t)SW_OFDM_HT_20M_SHORT_GI_MCS_0_EN_MASK)) == 0);
	tmp =
		((uint32_t)sw_ofdm_ht_40m_short_gi_mcs_32_en << SW_OFDM_HT_40M_SHORT_GI_MCS_32_EN_OFFSET) |
		((uint32_t)sw_ofdm_ht_40m_short_gi_mcs_7_en << SW_OFDM_HT_40M_SHORT_GI_MCS_7_EN_OFFSET) |
		((uint32_t)sw_ofdm_ht_40m_short_gi_mcs_6_en << SW_OFDM_HT_40M_SHORT_GI_MCS_6_EN_OFFSET) |
		((uint32_t)sw_ofdm_ht_40m_short_gi_mcs_5_en << SW_OFDM_HT_40M_SHORT_GI_MCS_5_EN_OFFSET) |
		((uint32_t)sw_ofdm_ht_40m_short_gi_mcs_4_en << SW_OFDM_HT_40M_SHORT_GI_MCS_4_EN_OFFSET) |
		((uint32_t)sw_ofdm_ht_40m_short_gi_mcs_3_en << SW_OFDM_HT_40M_SHORT_GI_MCS_3_EN_OFFSET) |
		((uint32_t)sw_ofdm_ht_40m_short_gi_mcs_2_en << SW_OFDM_HT_40M_SHORT_GI_MCS_2_EN_OFFSET) |
		((uint32_t)sw_ofdm_ht_40m_short_gi_mcs_1_en << SW_OFDM_HT_40M_SHORT_GI_MCS_1_EN_OFFSET) |
		((uint32_t)sw_ofdm_ht_40m_short_gi_mcs_0_en << SW_OFDM_HT_40M_SHORT_GI_MCS_0_EN_OFFSET) |
		((uint32_t)sw_ofdm_ht_20m_short_gi_mcs_7_en << SW_OFDM_HT_20M_SHORT_GI_MCS_7_EN_OFFSET) |
		((uint32_t)sw_ofdm_ht_20m_short_gi_mcs_6_en << SW_OFDM_HT_20M_SHORT_GI_MCS_6_EN_OFFSET) |
		((uint32_t)sw_ofdm_ht_20m_short_gi_mcs_5_en << SW_OFDM_HT_20M_SHORT_GI_MCS_5_EN_OFFSET) |
		((uint32_t)sw_ofdm_ht_20m_short_gi_mcs_4_en << SW_OFDM_HT_20M_SHORT_GI_MCS_4_EN_OFFSET) |
		((uint32_t)sw_ofdm_ht_20m_short_gi_mcs_3_en << SW_OFDM_HT_20M_SHORT_GI_MCS_3_EN_OFFSET) |
		((uint32_t)sw_ofdm_ht_20m_short_gi_mcs_2_en << SW_OFDM_HT_20M_SHORT_GI_MCS_2_EN_OFFSET) |
		((uint32_t)sw_ofdm_ht_20m_short_gi_mcs_1_en << SW_OFDM_HT_20M_SHORT_GI_MCS_1_EN_OFFSET) |
		((uint32_t)sw_ofdm_ht_20m_short_gi_mcs_0_en << SW_OFDM_HT_20M_SHORT_GI_MCS_0_EN_OFFSET) ;
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_HT_SHORT_GI_RATE_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_HT_SHORT_GI_RATE_CTRL_ADDR), tmp);
}
static __inline void mac_rx_ht_short_gi_rate_ctrl_unpack(volatile uint32_t* sw_ofdm_ht_40m_short_gi_mcs_32_en, volatile uint32_t* sw_ofdm_ht_40m_short_gi_mcs_7_en, volatile uint32_t* sw_ofdm_ht_40m_short_gi_mcs_6_en, volatile uint32_t* sw_ofdm_ht_40m_short_gi_mcs_5_en, volatile uint32_t* sw_ofdm_ht_40m_short_gi_mcs_4_en, volatile uint32_t* sw_ofdm_ht_40m_short_gi_mcs_3_en, volatile uint32_t* sw_ofdm_ht_40m_short_gi_mcs_2_en, volatile uint32_t* sw_ofdm_ht_40m_short_gi_mcs_1_en, volatile uint32_t* sw_ofdm_ht_40m_short_gi_mcs_0_en, volatile uint32_t* sw_ofdm_ht_20m_short_gi_mcs_7_en, volatile uint32_t* sw_ofdm_ht_20m_short_gi_mcs_6_en, volatile uint32_t* sw_ofdm_ht_20m_short_gi_mcs_5_en, volatile uint32_t* sw_ofdm_ht_20m_short_gi_mcs_4_en, volatile uint32_t* sw_ofdm_ht_20m_short_gi_mcs_3_en, volatile uint32_t* sw_ofdm_ht_20m_short_gi_mcs_2_en, volatile uint32_t* sw_ofdm_ht_20m_short_gi_mcs_1_en, volatile uint32_t* sw_ofdm_ht_20m_short_gi_mcs_0_en)
{
	uint32_t tmp;

	tmp = mac_rx_ht_short_gi_rate_ctrl_get();
	*sw_ofdm_ht_40m_short_gi_mcs_32_en = (tmp & ((uint32_t)SW_OFDM_HT_40M_SHORT_GI_MCS_32_EN_MASK)) >> SW_OFDM_HT_40M_SHORT_GI_MCS_32_EN_OFFSET;
	*sw_ofdm_ht_40m_short_gi_mcs_7_en = (tmp & ((uint32_t)SW_OFDM_HT_40M_SHORT_GI_MCS_7_EN_MASK)) >> SW_OFDM_HT_40M_SHORT_GI_MCS_7_EN_OFFSET;
	*sw_ofdm_ht_40m_short_gi_mcs_6_en = (tmp & ((uint32_t)SW_OFDM_HT_40M_SHORT_GI_MCS_6_EN_MASK)) >> SW_OFDM_HT_40M_SHORT_GI_MCS_6_EN_OFFSET;
	*sw_ofdm_ht_40m_short_gi_mcs_5_en = (tmp & ((uint32_t)SW_OFDM_HT_40M_SHORT_GI_MCS_5_EN_MASK)) >> SW_OFDM_HT_40M_SHORT_GI_MCS_5_EN_OFFSET;
	*sw_ofdm_ht_40m_short_gi_mcs_4_en = (tmp & ((uint32_t)SW_OFDM_HT_40M_SHORT_GI_MCS_4_EN_MASK)) >> SW_OFDM_HT_40M_SHORT_GI_MCS_4_EN_OFFSET;
	*sw_ofdm_ht_40m_short_gi_mcs_3_en = (tmp & ((uint32_t)SW_OFDM_HT_40M_SHORT_GI_MCS_3_EN_MASK)) >> SW_OFDM_HT_40M_SHORT_GI_MCS_3_EN_OFFSET;
	*sw_ofdm_ht_40m_short_gi_mcs_2_en = (tmp & ((uint32_t)SW_OFDM_HT_40M_SHORT_GI_MCS_2_EN_MASK)) >> SW_OFDM_HT_40M_SHORT_GI_MCS_2_EN_OFFSET;
	*sw_ofdm_ht_40m_short_gi_mcs_1_en = (tmp & ((uint32_t)SW_OFDM_HT_40M_SHORT_GI_MCS_1_EN_MASK)) >> SW_OFDM_HT_40M_SHORT_GI_MCS_1_EN_OFFSET;
	*sw_ofdm_ht_40m_short_gi_mcs_0_en = (tmp & ((uint32_t)SW_OFDM_HT_40M_SHORT_GI_MCS_0_EN_MASK)) >> SW_OFDM_HT_40M_SHORT_GI_MCS_0_EN_OFFSET;
	*sw_ofdm_ht_20m_short_gi_mcs_7_en = (tmp & ((uint32_t)SW_OFDM_HT_20M_SHORT_GI_MCS_7_EN_MASK)) >> SW_OFDM_HT_20M_SHORT_GI_MCS_7_EN_OFFSET;
	*sw_ofdm_ht_20m_short_gi_mcs_6_en = (tmp & ((uint32_t)SW_OFDM_HT_20M_SHORT_GI_MCS_6_EN_MASK)) >> SW_OFDM_HT_20M_SHORT_GI_MCS_6_EN_OFFSET;
	*sw_ofdm_ht_20m_short_gi_mcs_5_en = (tmp & ((uint32_t)SW_OFDM_HT_20M_SHORT_GI_MCS_5_EN_MASK)) >> SW_OFDM_HT_20M_SHORT_GI_MCS_5_EN_OFFSET;
	*sw_ofdm_ht_20m_short_gi_mcs_4_en = (tmp & ((uint32_t)SW_OFDM_HT_20M_SHORT_GI_MCS_4_EN_MASK)) >> SW_OFDM_HT_20M_SHORT_GI_MCS_4_EN_OFFSET;
	*sw_ofdm_ht_20m_short_gi_mcs_3_en = (tmp & ((uint32_t)SW_OFDM_HT_20M_SHORT_GI_MCS_3_EN_MASK)) >> SW_OFDM_HT_20M_SHORT_GI_MCS_3_EN_OFFSET;
	*sw_ofdm_ht_20m_short_gi_mcs_2_en = (tmp & ((uint32_t)SW_OFDM_HT_20M_SHORT_GI_MCS_2_EN_MASK)) >> SW_OFDM_HT_20M_SHORT_GI_MCS_2_EN_OFFSET;
	*sw_ofdm_ht_20m_short_gi_mcs_1_en = (tmp & ((uint32_t)SW_OFDM_HT_20M_SHORT_GI_MCS_1_EN_MASK)) >> SW_OFDM_HT_20M_SHORT_GI_MCS_1_EN_OFFSET;
	*sw_ofdm_ht_20m_short_gi_mcs_0_en = (tmp & ((uint32_t)SW_OFDM_HT_20M_SHORT_GI_MCS_0_EN_MASK)) >> SW_OFDM_HT_20M_SHORT_GI_MCS_0_EN_OFFSET;
}
static __inline void mac_rx_ht_long_gi_rate_ctrl_sw_ofdm_ht_40m_long_gi_mcs_32_en_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_HT_LONG_GI_RATE_CTRL_ADDR);
	tmp &= ~SW_OFDM_HT_40M_LONG_GI_MCS_32_EN_MASK;
	tmp |= (value << SW_OFDM_HT_40M_LONG_GI_MCS_32_EN_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_HT_LONG_GI_RATE_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_HT_LONG_GI_RATE_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_rx_ht_long_gi_rate_ctrl_sw_ofdm_ht_40m_long_gi_mcs_32_en_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_HT_LONG_GI_RATE_CTRL_ADDR)) & SW_OFDM_HT_40M_LONG_GI_MCS_32_EN_MASK) >> SW_OFDM_HT_40M_LONG_GI_MCS_32_EN_OFFSET;
}
static __inline void mac_rx_ht_long_gi_rate_ctrl_sw_ofdm_ht_40m_long_gi_mcs_7_en_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_HT_LONG_GI_RATE_CTRL_ADDR);
	tmp &= ~SW_OFDM_HT_40M_LONG_GI_MCS_7_EN_MASK;
	tmp |= (value << SW_OFDM_HT_40M_LONG_GI_MCS_7_EN_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_HT_LONG_GI_RATE_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_HT_LONG_GI_RATE_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_rx_ht_long_gi_rate_ctrl_sw_ofdm_ht_40m_long_gi_mcs_7_en_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_HT_LONG_GI_RATE_CTRL_ADDR)) & SW_OFDM_HT_40M_LONG_GI_MCS_7_EN_MASK) >> SW_OFDM_HT_40M_LONG_GI_MCS_7_EN_OFFSET;
}
static __inline void mac_rx_ht_long_gi_rate_ctrl_sw_ofdm_ht_40m_long_gi_mcs_6_en_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_HT_LONG_GI_RATE_CTRL_ADDR);
	tmp &= ~SW_OFDM_HT_40M_LONG_GI_MCS_6_EN_MASK;
	tmp |= (value << SW_OFDM_HT_40M_LONG_GI_MCS_6_EN_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_HT_LONG_GI_RATE_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_HT_LONG_GI_RATE_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_rx_ht_long_gi_rate_ctrl_sw_ofdm_ht_40m_long_gi_mcs_6_en_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_HT_LONG_GI_RATE_CTRL_ADDR)) & SW_OFDM_HT_40M_LONG_GI_MCS_6_EN_MASK) >> SW_OFDM_HT_40M_LONG_GI_MCS_6_EN_OFFSET;
}
static __inline void mac_rx_ht_long_gi_rate_ctrl_sw_ofdm_ht_40m_long_gi_mcs_5_en_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_HT_LONG_GI_RATE_CTRL_ADDR);
	tmp &= ~SW_OFDM_HT_40M_LONG_GI_MCS_5_EN_MASK;
	tmp |= (value << SW_OFDM_HT_40M_LONG_GI_MCS_5_EN_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_HT_LONG_GI_RATE_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_HT_LONG_GI_RATE_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_rx_ht_long_gi_rate_ctrl_sw_ofdm_ht_40m_long_gi_mcs_5_en_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_HT_LONG_GI_RATE_CTRL_ADDR)) & SW_OFDM_HT_40M_LONG_GI_MCS_5_EN_MASK) >> SW_OFDM_HT_40M_LONG_GI_MCS_5_EN_OFFSET;
}
static __inline void mac_rx_ht_long_gi_rate_ctrl_sw_ofdm_ht_40m_long_gi_mcs_4_en_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_HT_LONG_GI_RATE_CTRL_ADDR);
	tmp &= ~SW_OFDM_HT_40M_LONG_GI_MCS_4_EN_MASK;
	tmp |= (value << SW_OFDM_HT_40M_LONG_GI_MCS_4_EN_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_HT_LONG_GI_RATE_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_HT_LONG_GI_RATE_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_rx_ht_long_gi_rate_ctrl_sw_ofdm_ht_40m_long_gi_mcs_4_en_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_HT_LONG_GI_RATE_CTRL_ADDR)) & SW_OFDM_HT_40M_LONG_GI_MCS_4_EN_MASK) >> SW_OFDM_HT_40M_LONG_GI_MCS_4_EN_OFFSET;
}
static __inline void mac_rx_ht_long_gi_rate_ctrl_sw_ofdm_ht_40m_long_gi_mcs_3_en_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_HT_LONG_GI_RATE_CTRL_ADDR);
	tmp &= ~SW_OFDM_HT_40M_LONG_GI_MCS_3_EN_MASK;
	tmp |= (value << SW_OFDM_HT_40M_LONG_GI_MCS_3_EN_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_HT_LONG_GI_RATE_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_HT_LONG_GI_RATE_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_rx_ht_long_gi_rate_ctrl_sw_ofdm_ht_40m_long_gi_mcs_3_en_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_HT_LONG_GI_RATE_CTRL_ADDR)) & SW_OFDM_HT_40M_LONG_GI_MCS_3_EN_MASK) >> SW_OFDM_HT_40M_LONG_GI_MCS_3_EN_OFFSET;
}
static __inline void mac_rx_ht_long_gi_rate_ctrl_sw_ofdm_ht_40m_long_gi_mcs_2_en_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_HT_LONG_GI_RATE_CTRL_ADDR);
	tmp &= ~SW_OFDM_HT_40M_LONG_GI_MCS_2_EN_MASK;
	tmp |= (value << SW_OFDM_HT_40M_LONG_GI_MCS_2_EN_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_HT_LONG_GI_RATE_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_HT_LONG_GI_RATE_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_rx_ht_long_gi_rate_ctrl_sw_ofdm_ht_40m_long_gi_mcs_2_en_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_HT_LONG_GI_RATE_CTRL_ADDR)) & SW_OFDM_HT_40M_LONG_GI_MCS_2_EN_MASK) >> SW_OFDM_HT_40M_LONG_GI_MCS_2_EN_OFFSET;
}
static __inline void mac_rx_ht_long_gi_rate_ctrl_sw_ofdm_ht_40m_long_gi_mcs_1_en_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_HT_LONG_GI_RATE_CTRL_ADDR);
	tmp &= ~SW_OFDM_HT_40M_LONG_GI_MCS_1_EN_MASK;
	tmp |= (value << SW_OFDM_HT_40M_LONG_GI_MCS_1_EN_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_HT_LONG_GI_RATE_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_HT_LONG_GI_RATE_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_rx_ht_long_gi_rate_ctrl_sw_ofdm_ht_40m_long_gi_mcs_1_en_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_HT_LONG_GI_RATE_CTRL_ADDR)) & SW_OFDM_HT_40M_LONG_GI_MCS_1_EN_MASK) >> SW_OFDM_HT_40M_LONG_GI_MCS_1_EN_OFFSET;
}
static __inline void mac_rx_ht_long_gi_rate_ctrl_sw_ofdm_ht_40m_long_gi_mcs_0_en_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_HT_LONG_GI_RATE_CTRL_ADDR);
	tmp &= ~SW_OFDM_HT_40M_LONG_GI_MCS_0_EN_MASK;
	tmp |= (value << SW_OFDM_HT_40M_LONG_GI_MCS_0_EN_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_HT_LONG_GI_RATE_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_HT_LONG_GI_RATE_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_rx_ht_long_gi_rate_ctrl_sw_ofdm_ht_40m_long_gi_mcs_0_en_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_HT_LONG_GI_RATE_CTRL_ADDR)) & SW_OFDM_HT_40M_LONG_GI_MCS_0_EN_MASK) >> SW_OFDM_HT_40M_LONG_GI_MCS_0_EN_OFFSET;
}
static __inline void mac_rx_ht_long_gi_rate_ctrl_sw_ofdm_ht_20m_long_gi_mcs_7_en_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_HT_LONG_GI_RATE_CTRL_ADDR);
	tmp &= ~SW_OFDM_HT_20M_LONG_GI_MCS_7_EN_MASK;
	tmp |= (value << SW_OFDM_HT_20M_LONG_GI_MCS_7_EN_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_HT_LONG_GI_RATE_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_HT_LONG_GI_RATE_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_rx_ht_long_gi_rate_ctrl_sw_ofdm_ht_20m_long_gi_mcs_7_en_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_HT_LONG_GI_RATE_CTRL_ADDR)) & SW_OFDM_HT_20M_LONG_GI_MCS_7_EN_MASK) >> SW_OFDM_HT_20M_LONG_GI_MCS_7_EN_OFFSET;
}
static __inline void mac_rx_ht_long_gi_rate_ctrl_sw_ofdm_ht_20m_long_gi_mcs_6_en_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_HT_LONG_GI_RATE_CTRL_ADDR);
	tmp &= ~SW_OFDM_HT_20M_LONG_GI_MCS_6_EN_MASK;
	tmp |= (value << SW_OFDM_HT_20M_LONG_GI_MCS_6_EN_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_HT_LONG_GI_RATE_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_HT_LONG_GI_RATE_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_rx_ht_long_gi_rate_ctrl_sw_ofdm_ht_20m_long_gi_mcs_6_en_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_HT_LONG_GI_RATE_CTRL_ADDR)) & SW_OFDM_HT_20M_LONG_GI_MCS_6_EN_MASK) >> SW_OFDM_HT_20M_LONG_GI_MCS_6_EN_OFFSET;
}
static __inline void mac_rx_ht_long_gi_rate_ctrl_sw_ofdm_ht_20m_long_gi_mcs_5_en_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_HT_LONG_GI_RATE_CTRL_ADDR);
	tmp &= ~SW_OFDM_HT_20M_LONG_GI_MCS_5_EN_MASK;
	tmp |= (value << SW_OFDM_HT_20M_LONG_GI_MCS_5_EN_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_HT_LONG_GI_RATE_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_HT_LONG_GI_RATE_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_rx_ht_long_gi_rate_ctrl_sw_ofdm_ht_20m_long_gi_mcs_5_en_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_HT_LONG_GI_RATE_CTRL_ADDR)) & SW_OFDM_HT_20M_LONG_GI_MCS_5_EN_MASK) >> SW_OFDM_HT_20M_LONG_GI_MCS_5_EN_OFFSET;
}
static __inline void mac_rx_ht_long_gi_rate_ctrl_sw_ofdm_ht_20m_long_gi_mcs_4_en_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_HT_LONG_GI_RATE_CTRL_ADDR);
	tmp &= ~SW_OFDM_HT_20M_LONG_GI_MCS_4_EN_MASK;
	tmp |= (value << SW_OFDM_HT_20M_LONG_GI_MCS_4_EN_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_HT_LONG_GI_RATE_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_HT_LONG_GI_RATE_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_rx_ht_long_gi_rate_ctrl_sw_ofdm_ht_20m_long_gi_mcs_4_en_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_HT_LONG_GI_RATE_CTRL_ADDR)) & SW_OFDM_HT_20M_LONG_GI_MCS_4_EN_MASK) >> SW_OFDM_HT_20M_LONG_GI_MCS_4_EN_OFFSET;
}
static __inline void mac_rx_ht_long_gi_rate_ctrl_sw_ofdm_ht_20m_long_gi_mcs_3_en_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_HT_LONG_GI_RATE_CTRL_ADDR);
	tmp &= ~SW_OFDM_HT_20M_LONG_GI_MCS_3_EN_MASK;
	tmp |= (value << SW_OFDM_HT_20M_LONG_GI_MCS_3_EN_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_HT_LONG_GI_RATE_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_HT_LONG_GI_RATE_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_rx_ht_long_gi_rate_ctrl_sw_ofdm_ht_20m_long_gi_mcs_3_en_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_HT_LONG_GI_RATE_CTRL_ADDR)) & SW_OFDM_HT_20M_LONG_GI_MCS_3_EN_MASK) >> SW_OFDM_HT_20M_LONG_GI_MCS_3_EN_OFFSET;
}
static __inline void mac_rx_ht_long_gi_rate_ctrl_sw_ofdm_ht_20m_long_gi_mcs_2_en_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_HT_LONG_GI_RATE_CTRL_ADDR);
	tmp &= ~SW_OFDM_HT_20M_LONG_GI_MCS_2_EN_MASK;
	tmp |= (value << SW_OFDM_HT_20M_LONG_GI_MCS_2_EN_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_HT_LONG_GI_RATE_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_HT_LONG_GI_RATE_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_rx_ht_long_gi_rate_ctrl_sw_ofdm_ht_20m_long_gi_mcs_2_en_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_HT_LONG_GI_RATE_CTRL_ADDR)) & SW_OFDM_HT_20M_LONG_GI_MCS_2_EN_MASK) >> SW_OFDM_HT_20M_LONG_GI_MCS_2_EN_OFFSET;
}
static __inline void mac_rx_ht_long_gi_rate_ctrl_sw_ofdm_ht_20m_long_gi_mcs_1_en_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_HT_LONG_GI_RATE_CTRL_ADDR);
	tmp &= ~SW_OFDM_HT_20M_LONG_GI_MCS_1_EN_MASK;
	tmp |= (value << SW_OFDM_HT_20M_LONG_GI_MCS_1_EN_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_HT_LONG_GI_RATE_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_HT_LONG_GI_RATE_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_rx_ht_long_gi_rate_ctrl_sw_ofdm_ht_20m_long_gi_mcs_1_en_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_HT_LONG_GI_RATE_CTRL_ADDR)) & SW_OFDM_HT_20M_LONG_GI_MCS_1_EN_MASK) >> SW_OFDM_HT_20M_LONG_GI_MCS_1_EN_OFFSET;
}
static __inline void mac_rx_ht_long_gi_rate_ctrl_sw_ofdm_ht_20m_long_gi_mcs_0_en_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_HT_LONG_GI_RATE_CTRL_ADDR);
	tmp &= ~SW_OFDM_HT_20M_LONG_GI_MCS_0_EN_MASK;
	tmp |= (value << SW_OFDM_HT_20M_LONG_GI_MCS_0_EN_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_HT_LONG_GI_RATE_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_HT_LONG_GI_RATE_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_rx_ht_long_gi_rate_ctrl_sw_ofdm_ht_20m_long_gi_mcs_0_en_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_HT_LONG_GI_RATE_CTRL_ADDR)) & SW_OFDM_HT_20M_LONG_GI_MCS_0_EN_MASK) >> SW_OFDM_HT_20M_LONG_GI_MCS_0_EN_OFFSET;
}
static __inline void mac_rx_ht_long_gi_rate_ctrl_set(uint32_t value)
{
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_HT_LONG_GI_RATE_CTRL_ADDR, value);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_HT_LONG_GI_RATE_CTRL_ADDR), value);
}
static __inline uint32_t mac_rx_ht_long_gi_rate_ctrl_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_HT_LONG_GI_RATE_CTRL_ADDR));
}
static __inline void mac_rx_ht_long_gi_rate_ctrl_pack(uint32_t sw_ofdm_ht_40m_long_gi_mcs_32_en, uint32_t sw_ofdm_ht_40m_long_gi_mcs_7_en, uint32_t sw_ofdm_ht_40m_long_gi_mcs_6_en, uint32_t sw_ofdm_ht_40m_long_gi_mcs_5_en, uint32_t sw_ofdm_ht_40m_long_gi_mcs_4_en, uint32_t sw_ofdm_ht_40m_long_gi_mcs_3_en, uint32_t sw_ofdm_ht_40m_long_gi_mcs_2_en, uint32_t sw_ofdm_ht_40m_long_gi_mcs_1_en, uint32_t sw_ofdm_ht_40m_long_gi_mcs_0_en, uint32_t sw_ofdm_ht_20m_long_gi_mcs_7_en, uint32_t sw_ofdm_ht_20m_long_gi_mcs_6_en, uint32_t sw_ofdm_ht_20m_long_gi_mcs_5_en, uint32_t sw_ofdm_ht_20m_long_gi_mcs_4_en, uint32_t sw_ofdm_ht_20m_long_gi_mcs_3_en, uint32_t sw_ofdm_ht_20m_long_gi_mcs_2_en, uint32_t sw_ofdm_ht_20m_long_gi_mcs_1_en, uint32_t sw_ofdm_ht_20m_long_gi_mcs_0_en)
{
	uint32_t tmp;

	assert((((uint32_t)sw_ofdm_ht_40m_long_gi_mcs_32_en << SW_OFDM_HT_40M_LONG_GI_MCS_32_EN_OFFSET) & ~((uint32_t)SW_OFDM_HT_40M_LONG_GI_MCS_32_EN_MASK)) == 0);
	assert((((uint32_t)sw_ofdm_ht_40m_long_gi_mcs_7_en << SW_OFDM_HT_40M_LONG_GI_MCS_7_EN_OFFSET) & ~((uint32_t)SW_OFDM_HT_40M_LONG_GI_MCS_7_EN_MASK)) == 0);
	assert((((uint32_t)sw_ofdm_ht_40m_long_gi_mcs_6_en << SW_OFDM_HT_40M_LONG_GI_MCS_6_EN_OFFSET) & ~((uint32_t)SW_OFDM_HT_40M_LONG_GI_MCS_6_EN_MASK)) == 0);
	assert((((uint32_t)sw_ofdm_ht_40m_long_gi_mcs_5_en << SW_OFDM_HT_40M_LONG_GI_MCS_5_EN_OFFSET) & ~((uint32_t)SW_OFDM_HT_40M_LONG_GI_MCS_5_EN_MASK)) == 0);
	assert((((uint32_t)sw_ofdm_ht_40m_long_gi_mcs_4_en << SW_OFDM_HT_40M_LONG_GI_MCS_4_EN_OFFSET) & ~((uint32_t)SW_OFDM_HT_40M_LONG_GI_MCS_4_EN_MASK)) == 0);
	assert((((uint32_t)sw_ofdm_ht_40m_long_gi_mcs_3_en << SW_OFDM_HT_40M_LONG_GI_MCS_3_EN_OFFSET) & ~((uint32_t)SW_OFDM_HT_40M_LONG_GI_MCS_3_EN_MASK)) == 0);
	assert((((uint32_t)sw_ofdm_ht_40m_long_gi_mcs_2_en << SW_OFDM_HT_40M_LONG_GI_MCS_2_EN_OFFSET) & ~((uint32_t)SW_OFDM_HT_40M_LONG_GI_MCS_2_EN_MASK)) == 0);
	assert((((uint32_t)sw_ofdm_ht_40m_long_gi_mcs_1_en << SW_OFDM_HT_40M_LONG_GI_MCS_1_EN_OFFSET) & ~((uint32_t)SW_OFDM_HT_40M_LONG_GI_MCS_1_EN_MASK)) == 0);
	assert((((uint32_t)sw_ofdm_ht_40m_long_gi_mcs_0_en << SW_OFDM_HT_40M_LONG_GI_MCS_0_EN_OFFSET) & ~((uint32_t)SW_OFDM_HT_40M_LONG_GI_MCS_0_EN_MASK)) == 0);
	assert((((uint32_t)sw_ofdm_ht_20m_long_gi_mcs_7_en << SW_OFDM_HT_20M_LONG_GI_MCS_7_EN_OFFSET) & ~((uint32_t)SW_OFDM_HT_20M_LONG_GI_MCS_7_EN_MASK)) == 0);
	assert((((uint32_t)sw_ofdm_ht_20m_long_gi_mcs_6_en << SW_OFDM_HT_20M_LONG_GI_MCS_6_EN_OFFSET) & ~((uint32_t)SW_OFDM_HT_20M_LONG_GI_MCS_6_EN_MASK)) == 0);
	assert((((uint32_t)sw_ofdm_ht_20m_long_gi_mcs_5_en << SW_OFDM_HT_20M_LONG_GI_MCS_5_EN_OFFSET) & ~((uint32_t)SW_OFDM_HT_20M_LONG_GI_MCS_5_EN_MASK)) == 0);
	assert((((uint32_t)sw_ofdm_ht_20m_long_gi_mcs_4_en << SW_OFDM_HT_20M_LONG_GI_MCS_4_EN_OFFSET) & ~((uint32_t)SW_OFDM_HT_20M_LONG_GI_MCS_4_EN_MASK)) == 0);
	assert((((uint32_t)sw_ofdm_ht_20m_long_gi_mcs_3_en << SW_OFDM_HT_20M_LONG_GI_MCS_3_EN_OFFSET) & ~((uint32_t)SW_OFDM_HT_20M_LONG_GI_MCS_3_EN_MASK)) == 0);
	assert((((uint32_t)sw_ofdm_ht_20m_long_gi_mcs_2_en << SW_OFDM_HT_20M_LONG_GI_MCS_2_EN_OFFSET) & ~((uint32_t)SW_OFDM_HT_20M_LONG_GI_MCS_2_EN_MASK)) == 0);
	assert((((uint32_t)sw_ofdm_ht_20m_long_gi_mcs_1_en << SW_OFDM_HT_20M_LONG_GI_MCS_1_EN_OFFSET) & ~((uint32_t)SW_OFDM_HT_20M_LONG_GI_MCS_1_EN_MASK)) == 0);
	assert((((uint32_t)sw_ofdm_ht_20m_long_gi_mcs_0_en << SW_OFDM_HT_20M_LONG_GI_MCS_0_EN_OFFSET) & ~((uint32_t)SW_OFDM_HT_20M_LONG_GI_MCS_0_EN_MASK)) == 0);
	tmp =
		((uint32_t)sw_ofdm_ht_40m_long_gi_mcs_32_en << SW_OFDM_HT_40M_LONG_GI_MCS_32_EN_OFFSET) |
		((uint32_t)sw_ofdm_ht_40m_long_gi_mcs_7_en << SW_OFDM_HT_40M_LONG_GI_MCS_7_EN_OFFSET) |
		((uint32_t)sw_ofdm_ht_40m_long_gi_mcs_6_en << SW_OFDM_HT_40M_LONG_GI_MCS_6_EN_OFFSET) |
		((uint32_t)sw_ofdm_ht_40m_long_gi_mcs_5_en << SW_OFDM_HT_40M_LONG_GI_MCS_5_EN_OFFSET) |
		((uint32_t)sw_ofdm_ht_40m_long_gi_mcs_4_en << SW_OFDM_HT_40M_LONG_GI_MCS_4_EN_OFFSET) |
		((uint32_t)sw_ofdm_ht_40m_long_gi_mcs_3_en << SW_OFDM_HT_40M_LONG_GI_MCS_3_EN_OFFSET) |
		((uint32_t)sw_ofdm_ht_40m_long_gi_mcs_2_en << SW_OFDM_HT_40M_LONG_GI_MCS_2_EN_OFFSET) |
		((uint32_t)sw_ofdm_ht_40m_long_gi_mcs_1_en << SW_OFDM_HT_40M_LONG_GI_MCS_1_EN_OFFSET) |
		((uint32_t)sw_ofdm_ht_40m_long_gi_mcs_0_en << SW_OFDM_HT_40M_LONG_GI_MCS_0_EN_OFFSET) |
		((uint32_t)sw_ofdm_ht_20m_long_gi_mcs_7_en << SW_OFDM_HT_20M_LONG_GI_MCS_7_EN_OFFSET) |
		((uint32_t)sw_ofdm_ht_20m_long_gi_mcs_6_en << SW_OFDM_HT_20M_LONG_GI_MCS_6_EN_OFFSET) |
		((uint32_t)sw_ofdm_ht_20m_long_gi_mcs_5_en << SW_OFDM_HT_20M_LONG_GI_MCS_5_EN_OFFSET) |
		((uint32_t)sw_ofdm_ht_20m_long_gi_mcs_4_en << SW_OFDM_HT_20M_LONG_GI_MCS_4_EN_OFFSET) |
		((uint32_t)sw_ofdm_ht_20m_long_gi_mcs_3_en << SW_OFDM_HT_20M_LONG_GI_MCS_3_EN_OFFSET) |
		((uint32_t)sw_ofdm_ht_20m_long_gi_mcs_2_en << SW_OFDM_HT_20M_LONG_GI_MCS_2_EN_OFFSET) |
		((uint32_t)sw_ofdm_ht_20m_long_gi_mcs_1_en << SW_OFDM_HT_20M_LONG_GI_MCS_1_EN_OFFSET) |
		((uint32_t)sw_ofdm_ht_20m_long_gi_mcs_0_en << SW_OFDM_HT_20M_LONG_GI_MCS_0_EN_OFFSET) ;
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_HT_LONG_GI_RATE_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_HT_LONG_GI_RATE_CTRL_ADDR), tmp);
}
static __inline void mac_rx_ht_long_gi_rate_ctrl_unpack(volatile uint32_t* sw_ofdm_ht_40m_long_gi_mcs_32_en, volatile uint32_t* sw_ofdm_ht_40m_long_gi_mcs_7_en, volatile uint32_t* sw_ofdm_ht_40m_long_gi_mcs_6_en, volatile uint32_t* sw_ofdm_ht_40m_long_gi_mcs_5_en, volatile uint32_t* sw_ofdm_ht_40m_long_gi_mcs_4_en, volatile uint32_t* sw_ofdm_ht_40m_long_gi_mcs_3_en, volatile uint32_t* sw_ofdm_ht_40m_long_gi_mcs_2_en, volatile uint32_t* sw_ofdm_ht_40m_long_gi_mcs_1_en, volatile uint32_t* sw_ofdm_ht_40m_long_gi_mcs_0_en, volatile uint32_t* sw_ofdm_ht_20m_long_gi_mcs_7_en, volatile uint32_t* sw_ofdm_ht_20m_long_gi_mcs_6_en, volatile uint32_t* sw_ofdm_ht_20m_long_gi_mcs_5_en, volatile uint32_t* sw_ofdm_ht_20m_long_gi_mcs_4_en, volatile uint32_t* sw_ofdm_ht_20m_long_gi_mcs_3_en, volatile uint32_t* sw_ofdm_ht_20m_long_gi_mcs_2_en, volatile uint32_t* sw_ofdm_ht_20m_long_gi_mcs_1_en, volatile uint32_t* sw_ofdm_ht_20m_long_gi_mcs_0_en)
{
	uint32_t tmp;

	tmp = mac_rx_ht_long_gi_rate_ctrl_get();
	*sw_ofdm_ht_40m_long_gi_mcs_32_en = (tmp & ((uint32_t)SW_OFDM_HT_40M_LONG_GI_MCS_32_EN_MASK)) >> SW_OFDM_HT_40M_LONG_GI_MCS_32_EN_OFFSET;
	*sw_ofdm_ht_40m_long_gi_mcs_7_en = (tmp & ((uint32_t)SW_OFDM_HT_40M_LONG_GI_MCS_7_EN_MASK)) >> SW_OFDM_HT_40M_LONG_GI_MCS_7_EN_OFFSET;
	*sw_ofdm_ht_40m_long_gi_mcs_6_en = (tmp & ((uint32_t)SW_OFDM_HT_40M_LONG_GI_MCS_6_EN_MASK)) >> SW_OFDM_HT_40M_LONG_GI_MCS_6_EN_OFFSET;
	*sw_ofdm_ht_40m_long_gi_mcs_5_en = (tmp & ((uint32_t)SW_OFDM_HT_40M_LONG_GI_MCS_5_EN_MASK)) >> SW_OFDM_HT_40M_LONG_GI_MCS_5_EN_OFFSET;
	*sw_ofdm_ht_40m_long_gi_mcs_4_en = (tmp & ((uint32_t)SW_OFDM_HT_40M_LONG_GI_MCS_4_EN_MASK)) >> SW_OFDM_HT_40M_LONG_GI_MCS_4_EN_OFFSET;
	*sw_ofdm_ht_40m_long_gi_mcs_3_en = (tmp & ((uint32_t)SW_OFDM_HT_40M_LONG_GI_MCS_3_EN_MASK)) >> SW_OFDM_HT_40M_LONG_GI_MCS_3_EN_OFFSET;
	*sw_ofdm_ht_40m_long_gi_mcs_2_en = (tmp & ((uint32_t)SW_OFDM_HT_40M_LONG_GI_MCS_2_EN_MASK)) >> SW_OFDM_HT_40M_LONG_GI_MCS_2_EN_OFFSET;
	*sw_ofdm_ht_40m_long_gi_mcs_1_en = (tmp & ((uint32_t)SW_OFDM_HT_40M_LONG_GI_MCS_1_EN_MASK)) >> SW_OFDM_HT_40M_LONG_GI_MCS_1_EN_OFFSET;
	*sw_ofdm_ht_40m_long_gi_mcs_0_en = (tmp & ((uint32_t)SW_OFDM_HT_40M_LONG_GI_MCS_0_EN_MASK)) >> SW_OFDM_HT_40M_LONG_GI_MCS_0_EN_OFFSET;
	*sw_ofdm_ht_20m_long_gi_mcs_7_en = (tmp & ((uint32_t)SW_OFDM_HT_20M_LONG_GI_MCS_7_EN_MASK)) >> SW_OFDM_HT_20M_LONG_GI_MCS_7_EN_OFFSET;
	*sw_ofdm_ht_20m_long_gi_mcs_6_en = (tmp & ((uint32_t)SW_OFDM_HT_20M_LONG_GI_MCS_6_EN_MASK)) >> SW_OFDM_HT_20M_LONG_GI_MCS_6_EN_OFFSET;
	*sw_ofdm_ht_20m_long_gi_mcs_5_en = (tmp & ((uint32_t)SW_OFDM_HT_20M_LONG_GI_MCS_5_EN_MASK)) >> SW_OFDM_HT_20M_LONG_GI_MCS_5_EN_OFFSET;
	*sw_ofdm_ht_20m_long_gi_mcs_4_en = (tmp & ((uint32_t)SW_OFDM_HT_20M_LONG_GI_MCS_4_EN_MASK)) >> SW_OFDM_HT_20M_LONG_GI_MCS_4_EN_OFFSET;
	*sw_ofdm_ht_20m_long_gi_mcs_3_en = (tmp & ((uint32_t)SW_OFDM_HT_20M_LONG_GI_MCS_3_EN_MASK)) >> SW_OFDM_HT_20M_LONG_GI_MCS_3_EN_OFFSET;
	*sw_ofdm_ht_20m_long_gi_mcs_2_en = (tmp & ((uint32_t)SW_OFDM_HT_20M_LONG_GI_MCS_2_EN_MASK)) >> SW_OFDM_HT_20M_LONG_GI_MCS_2_EN_OFFSET;
	*sw_ofdm_ht_20m_long_gi_mcs_1_en = (tmp & ((uint32_t)SW_OFDM_HT_20M_LONG_GI_MCS_1_EN_MASK)) >> SW_OFDM_HT_20M_LONG_GI_MCS_1_EN_OFFSET;
	*sw_ofdm_ht_20m_long_gi_mcs_0_en = (tmp & ((uint32_t)SW_OFDM_HT_20M_LONG_GI_MCS_0_EN_MASK)) >> SW_OFDM_HT_20M_LONG_GI_MCS_0_EN_OFFSET;
}
static __inline void mac_rx_nonht_rate_ctrl_sw_ofdm_non_ht_40m_54mbps_en_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_NONHT_RATE_CTRL_ADDR);
	tmp &= ~SW_OFDM_NON_HT_40M_54MBPS_EN_MASK;
	tmp |= (value << SW_OFDM_NON_HT_40M_54MBPS_EN_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_NONHT_RATE_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_NONHT_RATE_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_rx_nonht_rate_ctrl_sw_ofdm_non_ht_40m_54mbps_en_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_NONHT_RATE_CTRL_ADDR)) & SW_OFDM_NON_HT_40M_54MBPS_EN_MASK) >> SW_OFDM_NON_HT_40M_54MBPS_EN_OFFSET;
}
static __inline void mac_rx_nonht_rate_ctrl_sw_ofdm_non_ht_40m_48mbps_en_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_NONHT_RATE_CTRL_ADDR);
	tmp &= ~SW_OFDM_NON_HT_40M_48MBPS_EN_MASK;
	tmp |= (value << SW_OFDM_NON_HT_40M_48MBPS_EN_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_NONHT_RATE_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_NONHT_RATE_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_rx_nonht_rate_ctrl_sw_ofdm_non_ht_40m_48mbps_en_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_NONHT_RATE_CTRL_ADDR)) & SW_OFDM_NON_HT_40M_48MBPS_EN_MASK) >> SW_OFDM_NON_HT_40M_48MBPS_EN_OFFSET;
}
static __inline void mac_rx_nonht_rate_ctrl_sw_ofdm_non_ht_40m_36mbps_en_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_NONHT_RATE_CTRL_ADDR);
	tmp &= ~SW_OFDM_NON_HT_40M_36MBPS_EN_MASK;
	tmp |= (value << SW_OFDM_NON_HT_40M_36MBPS_EN_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_NONHT_RATE_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_NONHT_RATE_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_rx_nonht_rate_ctrl_sw_ofdm_non_ht_40m_36mbps_en_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_NONHT_RATE_CTRL_ADDR)) & SW_OFDM_NON_HT_40M_36MBPS_EN_MASK) >> SW_OFDM_NON_HT_40M_36MBPS_EN_OFFSET;
}
static __inline void mac_rx_nonht_rate_ctrl_sw_ofdm_non_ht_40m_24mbps_en_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_NONHT_RATE_CTRL_ADDR);
	tmp &= ~SW_OFDM_NON_HT_40M_24MBPS_EN_MASK;
	tmp |= (value << SW_OFDM_NON_HT_40M_24MBPS_EN_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_NONHT_RATE_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_NONHT_RATE_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_rx_nonht_rate_ctrl_sw_ofdm_non_ht_40m_24mbps_en_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_NONHT_RATE_CTRL_ADDR)) & SW_OFDM_NON_HT_40M_24MBPS_EN_MASK) >> SW_OFDM_NON_HT_40M_24MBPS_EN_OFFSET;
}
static __inline void mac_rx_nonht_rate_ctrl_sw_ofdm_non_ht_40m_18mbps_en_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_NONHT_RATE_CTRL_ADDR);
	tmp &= ~SW_OFDM_NON_HT_40M_18MBPS_EN_MASK;
	tmp |= (value << SW_OFDM_NON_HT_40M_18MBPS_EN_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_NONHT_RATE_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_NONHT_RATE_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_rx_nonht_rate_ctrl_sw_ofdm_non_ht_40m_18mbps_en_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_NONHT_RATE_CTRL_ADDR)) & SW_OFDM_NON_HT_40M_18MBPS_EN_MASK) >> SW_OFDM_NON_HT_40M_18MBPS_EN_OFFSET;
}
static __inline void mac_rx_nonht_rate_ctrl_sw_ofdm_non_ht_40m_12mbps_en_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_NONHT_RATE_CTRL_ADDR);
	tmp &= ~SW_OFDM_NON_HT_40M_12MBPS_EN_MASK;
	tmp |= (value << SW_OFDM_NON_HT_40M_12MBPS_EN_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_NONHT_RATE_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_NONHT_RATE_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_rx_nonht_rate_ctrl_sw_ofdm_non_ht_40m_12mbps_en_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_NONHT_RATE_CTRL_ADDR)) & SW_OFDM_NON_HT_40M_12MBPS_EN_MASK) >> SW_OFDM_NON_HT_40M_12MBPS_EN_OFFSET;
}
static __inline void mac_rx_nonht_rate_ctrl_sw_ofdm_non_ht_40m_9mbps_en_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_NONHT_RATE_CTRL_ADDR);
	tmp &= ~SW_OFDM_NON_HT_40M_9MBPS_EN_MASK;
	tmp |= (value << SW_OFDM_NON_HT_40M_9MBPS_EN_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_NONHT_RATE_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_NONHT_RATE_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_rx_nonht_rate_ctrl_sw_ofdm_non_ht_40m_9mbps_en_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_NONHT_RATE_CTRL_ADDR)) & SW_OFDM_NON_HT_40M_9MBPS_EN_MASK) >> SW_OFDM_NON_HT_40M_9MBPS_EN_OFFSET;
}
static __inline void mac_rx_nonht_rate_ctrl_sw_ofdm_non_ht_40m_6mbps_en_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_NONHT_RATE_CTRL_ADDR);
	tmp &= ~SW_OFDM_NON_HT_40M_6MBPS_EN_MASK;
	tmp |= (value << SW_OFDM_NON_HT_40M_6MBPS_EN_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_NONHT_RATE_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_NONHT_RATE_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_rx_nonht_rate_ctrl_sw_ofdm_non_ht_40m_6mbps_en_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_NONHT_RATE_CTRL_ADDR)) & SW_OFDM_NON_HT_40M_6MBPS_EN_MASK) >> SW_OFDM_NON_HT_40M_6MBPS_EN_OFFSET;
}
static __inline void mac_rx_nonht_rate_ctrl_sw_ofdm_non_ht_20m_54mbps_en_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_NONHT_RATE_CTRL_ADDR);
	tmp &= ~SW_OFDM_NON_HT_20M_54MBPS_EN_MASK;
	tmp |= (value << SW_OFDM_NON_HT_20M_54MBPS_EN_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_NONHT_RATE_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_NONHT_RATE_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_rx_nonht_rate_ctrl_sw_ofdm_non_ht_20m_54mbps_en_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_NONHT_RATE_CTRL_ADDR)) & SW_OFDM_NON_HT_20M_54MBPS_EN_MASK) >> SW_OFDM_NON_HT_20M_54MBPS_EN_OFFSET;
}
static __inline void mac_rx_nonht_rate_ctrl_sw_ofdm_non_ht_20m_48mbps_en_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_NONHT_RATE_CTRL_ADDR);
	tmp &= ~SW_OFDM_NON_HT_20M_48MBPS_EN_MASK;
	tmp |= (value << SW_OFDM_NON_HT_20M_48MBPS_EN_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_NONHT_RATE_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_NONHT_RATE_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_rx_nonht_rate_ctrl_sw_ofdm_non_ht_20m_48mbps_en_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_NONHT_RATE_CTRL_ADDR)) & SW_OFDM_NON_HT_20M_48MBPS_EN_MASK) >> SW_OFDM_NON_HT_20M_48MBPS_EN_OFFSET;
}
static __inline void mac_rx_nonht_rate_ctrl_sw_ofdm_non_ht_20m_36mbps_en_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_NONHT_RATE_CTRL_ADDR);
	tmp &= ~SW_OFDM_NON_HT_20M_36MBPS_EN_MASK;
	tmp |= (value << SW_OFDM_NON_HT_20M_36MBPS_EN_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_NONHT_RATE_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_NONHT_RATE_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_rx_nonht_rate_ctrl_sw_ofdm_non_ht_20m_36mbps_en_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_NONHT_RATE_CTRL_ADDR)) & SW_OFDM_NON_HT_20M_36MBPS_EN_MASK) >> SW_OFDM_NON_HT_20M_36MBPS_EN_OFFSET;
}
static __inline void mac_rx_nonht_rate_ctrl_sw_ofdm_non_ht_20m_24mbps_en_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_NONHT_RATE_CTRL_ADDR);
	tmp &= ~SW_OFDM_NON_HT_20M_24MBPS_EN_MASK;
	tmp |= (value << SW_OFDM_NON_HT_20M_24MBPS_EN_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_NONHT_RATE_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_NONHT_RATE_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_rx_nonht_rate_ctrl_sw_ofdm_non_ht_20m_24mbps_en_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_NONHT_RATE_CTRL_ADDR)) & SW_OFDM_NON_HT_20M_24MBPS_EN_MASK) >> SW_OFDM_NON_HT_20M_24MBPS_EN_OFFSET;
}
static __inline void mac_rx_nonht_rate_ctrl_sw_ofdm_non_ht_20m_18mbps_en_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_NONHT_RATE_CTRL_ADDR);
	tmp &= ~SW_OFDM_NON_HT_20M_18MBPS_EN_MASK;
	tmp |= (value << SW_OFDM_NON_HT_20M_18MBPS_EN_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_NONHT_RATE_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_NONHT_RATE_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_rx_nonht_rate_ctrl_sw_ofdm_non_ht_20m_18mbps_en_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_NONHT_RATE_CTRL_ADDR)) & SW_OFDM_NON_HT_20M_18MBPS_EN_MASK) >> SW_OFDM_NON_HT_20M_18MBPS_EN_OFFSET;
}
static __inline void mac_rx_nonht_rate_ctrl_sw_ofdm_non_ht_20m_12mbps_en_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_NONHT_RATE_CTRL_ADDR);
	tmp &= ~SW_OFDM_NON_HT_20M_12MBPS_EN_MASK;
	tmp |= (value << SW_OFDM_NON_HT_20M_12MBPS_EN_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_NONHT_RATE_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_NONHT_RATE_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_rx_nonht_rate_ctrl_sw_ofdm_non_ht_20m_12mbps_en_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_NONHT_RATE_CTRL_ADDR)) & SW_OFDM_NON_HT_20M_12MBPS_EN_MASK) >> SW_OFDM_NON_HT_20M_12MBPS_EN_OFFSET;
}
static __inline void mac_rx_nonht_rate_ctrl_sw_ofdm_non_ht_20m_9mbps_en_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_NONHT_RATE_CTRL_ADDR);
	tmp &= ~SW_OFDM_NON_HT_20M_9MBPS_EN_MASK;
	tmp |= (value << SW_OFDM_NON_HT_20M_9MBPS_EN_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_NONHT_RATE_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_NONHT_RATE_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_rx_nonht_rate_ctrl_sw_ofdm_non_ht_20m_9mbps_en_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_NONHT_RATE_CTRL_ADDR)) & SW_OFDM_NON_HT_20M_9MBPS_EN_MASK) >> SW_OFDM_NON_HT_20M_9MBPS_EN_OFFSET;
}
static __inline void mac_rx_nonht_rate_ctrl_sw_ofdm_non_ht_20m_6mbps_en_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_NONHT_RATE_CTRL_ADDR);
	tmp &= ~SW_OFDM_NON_HT_20M_6MBPS_EN_MASK;
	tmp |= (value << SW_OFDM_NON_HT_20M_6MBPS_EN_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_NONHT_RATE_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_NONHT_RATE_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_rx_nonht_rate_ctrl_sw_ofdm_non_ht_20m_6mbps_en_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_NONHT_RATE_CTRL_ADDR)) & SW_OFDM_NON_HT_20M_6MBPS_EN_MASK) >> SW_OFDM_NON_HT_20M_6MBPS_EN_OFFSET;
}
static __inline void mac_rx_nonht_rate_ctrl_set(uint32_t value)
{
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_NONHT_RATE_CTRL_ADDR, value);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_NONHT_RATE_CTRL_ADDR), value);
}
static __inline uint32_t mac_rx_nonht_rate_ctrl_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_NONHT_RATE_CTRL_ADDR));
}
static __inline void mac_rx_nonht_rate_ctrl_pack(uint32_t sw_ofdm_non_ht_40m_54mbps_en, uint32_t sw_ofdm_non_ht_40m_48mbps_en, uint32_t sw_ofdm_non_ht_40m_36mbps_en, uint32_t sw_ofdm_non_ht_40m_24mbps_en, uint32_t sw_ofdm_non_ht_40m_18mbps_en, uint32_t sw_ofdm_non_ht_40m_12mbps_en, uint32_t sw_ofdm_non_ht_40m_9mbps_en, uint32_t sw_ofdm_non_ht_40m_6mbps_en, uint32_t sw_ofdm_non_ht_20m_54mbps_en, uint32_t sw_ofdm_non_ht_20m_48mbps_en, uint32_t sw_ofdm_non_ht_20m_36mbps_en, uint32_t sw_ofdm_non_ht_20m_24mbps_en, uint32_t sw_ofdm_non_ht_20m_18mbps_en, uint32_t sw_ofdm_non_ht_20m_12mbps_en, uint32_t sw_ofdm_non_ht_20m_9mbps_en, uint32_t sw_ofdm_non_ht_20m_6mbps_en)
{
	uint32_t tmp;

	assert((((uint32_t)sw_ofdm_non_ht_40m_54mbps_en << SW_OFDM_NON_HT_40M_54MBPS_EN_OFFSET) & ~((uint32_t)SW_OFDM_NON_HT_40M_54MBPS_EN_MASK)) == 0);
	assert((((uint32_t)sw_ofdm_non_ht_40m_48mbps_en << SW_OFDM_NON_HT_40M_48MBPS_EN_OFFSET) & ~((uint32_t)SW_OFDM_NON_HT_40M_48MBPS_EN_MASK)) == 0);
	assert((((uint32_t)sw_ofdm_non_ht_40m_36mbps_en << SW_OFDM_NON_HT_40M_36MBPS_EN_OFFSET) & ~((uint32_t)SW_OFDM_NON_HT_40M_36MBPS_EN_MASK)) == 0);
	assert((((uint32_t)sw_ofdm_non_ht_40m_24mbps_en << SW_OFDM_NON_HT_40M_24MBPS_EN_OFFSET) & ~((uint32_t)SW_OFDM_NON_HT_40M_24MBPS_EN_MASK)) == 0);
	assert((((uint32_t)sw_ofdm_non_ht_40m_18mbps_en << SW_OFDM_NON_HT_40M_18MBPS_EN_OFFSET) & ~((uint32_t)SW_OFDM_NON_HT_40M_18MBPS_EN_MASK)) == 0);
	assert((((uint32_t)sw_ofdm_non_ht_40m_12mbps_en << SW_OFDM_NON_HT_40M_12MBPS_EN_OFFSET) & ~((uint32_t)SW_OFDM_NON_HT_40M_12MBPS_EN_MASK)) == 0);
	assert((((uint32_t)sw_ofdm_non_ht_40m_9mbps_en << SW_OFDM_NON_HT_40M_9MBPS_EN_OFFSET) & ~((uint32_t)SW_OFDM_NON_HT_40M_9MBPS_EN_MASK)) == 0);
	assert((((uint32_t)sw_ofdm_non_ht_40m_6mbps_en << SW_OFDM_NON_HT_40M_6MBPS_EN_OFFSET) & ~((uint32_t)SW_OFDM_NON_HT_40M_6MBPS_EN_MASK)) == 0);
	assert((((uint32_t)sw_ofdm_non_ht_20m_54mbps_en << SW_OFDM_NON_HT_20M_54MBPS_EN_OFFSET) & ~((uint32_t)SW_OFDM_NON_HT_20M_54MBPS_EN_MASK)) == 0);
	assert((((uint32_t)sw_ofdm_non_ht_20m_48mbps_en << SW_OFDM_NON_HT_20M_48MBPS_EN_OFFSET) & ~((uint32_t)SW_OFDM_NON_HT_20M_48MBPS_EN_MASK)) == 0);
	assert((((uint32_t)sw_ofdm_non_ht_20m_36mbps_en << SW_OFDM_NON_HT_20M_36MBPS_EN_OFFSET) & ~((uint32_t)SW_OFDM_NON_HT_20M_36MBPS_EN_MASK)) == 0);
	assert((((uint32_t)sw_ofdm_non_ht_20m_24mbps_en << SW_OFDM_NON_HT_20M_24MBPS_EN_OFFSET) & ~((uint32_t)SW_OFDM_NON_HT_20M_24MBPS_EN_MASK)) == 0);
	assert((((uint32_t)sw_ofdm_non_ht_20m_18mbps_en << SW_OFDM_NON_HT_20M_18MBPS_EN_OFFSET) & ~((uint32_t)SW_OFDM_NON_HT_20M_18MBPS_EN_MASK)) == 0);
	assert((((uint32_t)sw_ofdm_non_ht_20m_12mbps_en << SW_OFDM_NON_HT_20M_12MBPS_EN_OFFSET) & ~((uint32_t)SW_OFDM_NON_HT_20M_12MBPS_EN_MASK)) == 0);
	assert((((uint32_t)sw_ofdm_non_ht_20m_9mbps_en << SW_OFDM_NON_HT_20M_9MBPS_EN_OFFSET) & ~((uint32_t)SW_OFDM_NON_HT_20M_9MBPS_EN_MASK)) == 0);
	assert((((uint32_t)sw_ofdm_non_ht_20m_6mbps_en << SW_OFDM_NON_HT_20M_6MBPS_EN_OFFSET) & ~((uint32_t)SW_OFDM_NON_HT_20M_6MBPS_EN_MASK)) == 0);
	tmp =
		((uint32_t)sw_ofdm_non_ht_40m_54mbps_en << SW_OFDM_NON_HT_40M_54MBPS_EN_OFFSET) |
		((uint32_t)sw_ofdm_non_ht_40m_48mbps_en << SW_OFDM_NON_HT_40M_48MBPS_EN_OFFSET) |
		((uint32_t)sw_ofdm_non_ht_40m_36mbps_en << SW_OFDM_NON_HT_40M_36MBPS_EN_OFFSET) |
		((uint32_t)sw_ofdm_non_ht_40m_24mbps_en << SW_OFDM_NON_HT_40M_24MBPS_EN_OFFSET) |
		((uint32_t)sw_ofdm_non_ht_40m_18mbps_en << SW_OFDM_NON_HT_40M_18MBPS_EN_OFFSET) |
		((uint32_t)sw_ofdm_non_ht_40m_12mbps_en << SW_OFDM_NON_HT_40M_12MBPS_EN_OFFSET) |
		((uint32_t)sw_ofdm_non_ht_40m_9mbps_en << SW_OFDM_NON_HT_40M_9MBPS_EN_OFFSET) |
		((uint32_t)sw_ofdm_non_ht_40m_6mbps_en << SW_OFDM_NON_HT_40M_6MBPS_EN_OFFSET) |
		((uint32_t)sw_ofdm_non_ht_20m_54mbps_en << SW_OFDM_NON_HT_20M_54MBPS_EN_OFFSET) |
		((uint32_t)sw_ofdm_non_ht_20m_48mbps_en << SW_OFDM_NON_HT_20M_48MBPS_EN_OFFSET) |
		((uint32_t)sw_ofdm_non_ht_20m_36mbps_en << SW_OFDM_NON_HT_20M_36MBPS_EN_OFFSET) |
		((uint32_t)sw_ofdm_non_ht_20m_24mbps_en << SW_OFDM_NON_HT_20M_24MBPS_EN_OFFSET) |
		((uint32_t)sw_ofdm_non_ht_20m_18mbps_en << SW_OFDM_NON_HT_20M_18MBPS_EN_OFFSET) |
		((uint32_t)sw_ofdm_non_ht_20m_12mbps_en << SW_OFDM_NON_HT_20M_12MBPS_EN_OFFSET) |
		((uint32_t)sw_ofdm_non_ht_20m_9mbps_en << SW_OFDM_NON_HT_20M_9MBPS_EN_OFFSET) |
		((uint32_t)sw_ofdm_non_ht_20m_6mbps_en << SW_OFDM_NON_HT_20M_6MBPS_EN_OFFSET) ;
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_NONHT_RATE_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_NONHT_RATE_CTRL_ADDR), tmp);
}
static __inline void mac_rx_nonht_rate_ctrl_unpack(volatile uint32_t* sw_ofdm_non_ht_40m_54mbps_en, volatile uint32_t* sw_ofdm_non_ht_40m_48mbps_en, volatile uint32_t* sw_ofdm_non_ht_40m_36mbps_en, volatile uint32_t* sw_ofdm_non_ht_40m_24mbps_en, volatile uint32_t* sw_ofdm_non_ht_40m_18mbps_en, volatile uint32_t* sw_ofdm_non_ht_40m_12mbps_en, volatile uint32_t* sw_ofdm_non_ht_40m_9mbps_en, volatile uint32_t* sw_ofdm_non_ht_40m_6mbps_en, volatile uint32_t* sw_ofdm_non_ht_20m_54mbps_en, volatile uint32_t* sw_ofdm_non_ht_20m_48mbps_en, volatile uint32_t* sw_ofdm_non_ht_20m_36mbps_en, volatile uint32_t* sw_ofdm_non_ht_20m_24mbps_en, volatile uint32_t* sw_ofdm_non_ht_20m_18mbps_en, volatile uint32_t* sw_ofdm_non_ht_20m_12mbps_en, volatile uint32_t* sw_ofdm_non_ht_20m_9mbps_en, volatile uint32_t* sw_ofdm_non_ht_20m_6mbps_en)
{
	uint32_t tmp;

	tmp = mac_rx_nonht_rate_ctrl_get();
	*sw_ofdm_non_ht_40m_54mbps_en = (tmp & ((uint32_t)SW_OFDM_NON_HT_40M_54MBPS_EN_MASK)) >> SW_OFDM_NON_HT_40M_54MBPS_EN_OFFSET;
	*sw_ofdm_non_ht_40m_48mbps_en = (tmp & ((uint32_t)SW_OFDM_NON_HT_40M_48MBPS_EN_MASK)) >> SW_OFDM_NON_HT_40M_48MBPS_EN_OFFSET;
	*sw_ofdm_non_ht_40m_36mbps_en = (tmp & ((uint32_t)SW_OFDM_NON_HT_40M_36MBPS_EN_MASK)) >> SW_OFDM_NON_HT_40M_36MBPS_EN_OFFSET;
	*sw_ofdm_non_ht_40m_24mbps_en = (tmp & ((uint32_t)SW_OFDM_NON_HT_40M_24MBPS_EN_MASK)) >> SW_OFDM_NON_HT_40M_24MBPS_EN_OFFSET;
	*sw_ofdm_non_ht_40m_18mbps_en = (tmp & ((uint32_t)SW_OFDM_NON_HT_40M_18MBPS_EN_MASK)) >> SW_OFDM_NON_HT_40M_18MBPS_EN_OFFSET;
	*sw_ofdm_non_ht_40m_12mbps_en = (tmp & ((uint32_t)SW_OFDM_NON_HT_40M_12MBPS_EN_MASK)) >> SW_OFDM_NON_HT_40M_12MBPS_EN_OFFSET;
	*sw_ofdm_non_ht_40m_9mbps_en = (tmp & ((uint32_t)SW_OFDM_NON_HT_40M_9MBPS_EN_MASK)) >> SW_OFDM_NON_HT_40M_9MBPS_EN_OFFSET;
	*sw_ofdm_non_ht_40m_6mbps_en = (tmp & ((uint32_t)SW_OFDM_NON_HT_40M_6MBPS_EN_MASK)) >> SW_OFDM_NON_HT_40M_6MBPS_EN_OFFSET;
	*sw_ofdm_non_ht_20m_54mbps_en = (tmp & ((uint32_t)SW_OFDM_NON_HT_20M_54MBPS_EN_MASK)) >> SW_OFDM_NON_HT_20M_54MBPS_EN_OFFSET;
	*sw_ofdm_non_ht_20m_48mbps_en = (tmp & ((uint32_t)SW_OFDM_NON_HT_20M_48MBPS_EN_MASK)) >> SW_OFDM_NON_HT_20M_48MBPS_EN_OFFSET;
	*sw_ofdm_non_ht_20m_36mbps_en = (tmp & ((uint32_t)SW_OFDM_NON_HT_20M_36MBPS_EN_MASK)) >> SW_OFDM_NON_HT_20M_36MBPS_EN_OFFSET;
	*sw_ofdm_non_ht_20m_24mbps_en = (tmp & ((uint32_t)SW_OFDM_NON_HT_20M_24MBPS_EN_MASK)) >> SW_OFDM_NON_HT_20M_24MBPS_EN_OFFSET;
	*sw_ofdm_non_ht_20m_18mbps_en = (tmp & ((uint32_t)SW_OFDM_NON_HT_20M_18MBPS_EN_MASK)) >> SW_OFDM_NON_HT_20M_18MBPS_EN_OFFSET;
	*sw_ofdm_non_ht_20m_12mbps_en = (tmp & ((uint32_t)SW_OFDM_NON_HT_20M_12MBPS_EN_MASK)) >> SW_OFDM_NON_HT_20M_12MBPS_EN_OFFSET;
	*sw_ofdm_non_ht_20m_9mbps_en = (tmp & ((uint32_t)SW_OFDM_NON_HT_20M_9MBPS_EN_MASK)) >> SW_OFDM_NON_HT_20M_9MBPS_EN_OFFSET;
	*sw_ofdm_non_ht_20m_6mbps_en = (tmp & ((uint32_t)SW_OFDM_NON_HT_20M_6MBPS_EN_MASK)) >> SW_OFDM_NON_HT_20M_6MBPS_EN_OFFSET;
}
static __inline void mac_rx_dsss_rate_ctrl_sw_dsss_short_preamble_11mbps_en_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_DSSS_RATE_CTRL_ADDR);
	tmp &= ~SW_DSSS_SHORT_PREAMBLE_11MBPS_EN_MASK;
	tmp |= (value << SW_DSSS_SHORT_PREAMBLE_11MBPS_EN_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_DSSS_RATE_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_DSSS_RATE_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_rx_dsss_rate_ctrl_sw_dsss_short_preamble_11mbps_en_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_DSSS_RATE_CTRL_ADDR)) & SW_DSSS_SHORT_PREAMBLE_11MBPS_EN_MASK) >> SW_DSSS_SHORT_PREAMBLE_11MBPS_EN_OFFSET;
}
static __inline void mac_rx_dsss_rate_ctrl_sw_dsss_short_preamble_5p5mbps_en_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_DSSS_RATE_CTRL_ADDR);
	tmp &= ~SW_DSSS_SHORT_PREAMBLE_5P5MBPS_EN_MASK;
	tmp |= (value << SW_DSSS_SHORT_PREAMBLE_5P5MBPS_EN_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_DSSS_RATE_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_DSSS_RATE_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_rx_dsss_rate_ctrl_sw_dsss_short_preamble_5p5mbps_en_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_DSSS_RATE_CTRL_ADDR)) & SW_DSSS_SHORT_PREAMBLE_5P5MBPS_EN_MASK) >> SW_DSSS_SHORT_PREAMBLE_5P5MBPS_EN_OFFSET;
}
static __inline void mac_rx_dsss_rate_ctrl_sw_dsss_short_preamble_2mbps_en_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_DSSS_RATE_CTRL_ADDR);
	tmp &= ~SW_DSSS_SHORT_PREAMBLE_2MBPS_EN_MASK;
	tmp |= (value << SW_DSSS_SHORT_PREAMBLE_2MBPS_EN_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_DSSS_RATE_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_DSSS_RATE_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_rx_dsss_rate_ctrl_sw_dsss_short_preamble_2mbps_en_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_DSSS_RATE_CTRL_ADDR)) & SW_DSSS_SHORT_PREAMBLE_2MBPS_EN_MASK) >> SW_DSSS_SHORT_PREAMBLE_2MBPS_EN_OFFSET;
}
static __inline void mac_rx_dsss_rate_ctrl_sw_dsss_long_preamble_11mbps_en_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_DSSS_RATE_CTRL_ADDR);
	tmp &= ~SW_DSSS_LONG_PREAMBLE_11MBPS_EN_MASK;
	tmp |= (value << SW_DSSS_LONG_PREAMBLE_11MBPS_EN_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_DSSS_RATE_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_DSSS_RATE_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_rx_dsss_rate_ctrl_sw_dsss_long_preamble_11mbps_en_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_DSSS_RATE_CTRL_ADDR)) & SW_DSSS_LONG_PREAMBLE_11MBPS_EN_MASK) >> SW_DSSS_LONG_PREAMBLE_11MBPS_EN_OFFSET;
}
static __inline void mac_rx_dsss_rate_ctrl_sw_dsss_long_preamble_5p5mbps_en_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_DSSS_RATE_CTRL_ADDR);
	tmp &= ~SW_DSSS_LONG_PREAMBLE_5P5MBPS_EN_MASK;
	tmp |= (value << SW_DSSS_LONG_PREAMBLE_5P5MBPS_EN_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_DSSS_RATE_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_DSSS_RATE_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_rx_dsss_rate_ctrl_sw_dsss_long_preamble_5p5mbps_en_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_DSSS_RATE_CTRL_ADDR)) & SW_DSSS_LONG_PREAMBLE_5P5MBPS_EN_MASK) >> SW_DSSS_LONG_PREAMBLE_5P5MBPS_EN_OFFSET;
}
static __inline void mac_rx_dsss_rate_ctrl_sw_dsss_long_preamble_2mbps_en_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_DSSS_RATE_CTRL_ADDR);
	tmp &= ~SW_DSSS_LONG_PREAMBLE_2MBPS_EN_MASK;
	tmp |= (value << SW_DSSS_LONG_PREAMBLE_2MBPS_EN_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_DSSS_RATE_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_DSSS_RATE_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_rx_dsss_rate_ctrl_sw_dsss_long_preamble_2mbps_en_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_DSSS_RATE_CTRL_ADDR)) & SW_DSSS_LONG_PREAMBLE_2MBPS_EN_MASK) >> SW_DSSS_LONG_PREAMBLE_2MBPS_EN_OFFSET;
}
static __inline void mac_rx_dsss_rate_ctrl_sw_dsss_long_preamble_1mbps_en_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_DSSS_RATE_CTRL_ADDR);
	tmp &= ~SW_DSSS_LONG_PREAMBLE_1MBPS_EN_MASK;
	tmp |= (value << SW_DSSS_LONG_PREAMBLE_1MBPS_EN_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_DSSS_RATE_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_DSSS_RATE_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_rx_dsss_rate_ctrl_sw_dsss_long_preamble_1mbps_en_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_DSSS_RATE_CTRL_ADDR)) & SW_DSSS_LONG_PREAMBLE_1MBPS_EN_MASK) >> SW_DSSS_LONG_PREAMBLE_1MBPS_EN_OFFSET;
}
static __inline void mac_rx_dsss_rate_ctrl_set(uint32_t value)
{
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_DSSS_RATE_CTRL_ADDR, value);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_DSSS_RATE_CTRL_ADDR), value);
}
static __inline uint32_t mac_rx_dsss_rate_ctrl_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_DSSS_RATE_CTRL_ADDR));
}
static __inline void mac_rx_dsss_rate_ctrl_pack(uint32_t sw_dsss_short_preamble_11mbps_en, uint32_t sw_dsss_short_preamble_5p5mbps_en, uint32_t sw_dsss_short_preamble_2mbps_en, uint32_t sw_dsss_long_preamble_11mbps_en, uint32_t sw_dsss_long_preamble_5p5mbps_en, uint32_t sw_dsss_long_preamble_2mbps_en, uint32_t sw_dsss_long_preamble_1mbps_en)
{
	uint32_t tmp;

	assert((((uint32_t)sw_dsss_short_preamble_11mbps_en << SW_DSSS_SHORT_PREAMBLE_11MBPS_EN_OFFSET) & ~((uint32_t)SW_DSSS_SHORT_PREAMBLE_11MBPS_EN_MASK)) == 0);
	assert((((uint32_t)sw_dsss_short_preamble_5p5mbps_en << SW_DSSS_SHORT_PREAMBLE_5P5MBPS_EN_OFFSET) & ~((uint32_t)SW_DSSS_SHORT_PREAMBLE_5P5MBPS_EN_MASK)) == 0);
	assert((((uint32_t)sw_dsss_short_preamble_2mbps_en << SW_DSSS_SHORT_PREAMBLE_2MBPS_EN_OFFSET) & ~((uint32_t)SW_DSSS_SHORT_PREAMBLE_2MBPS_EN_MASK)) == 0);
	assert((((uint32_t)sw_dsss_long_preamble_11mbps_en << SW_DSSS_LONG_PREAMBLE_11MBPS_EN_OFFSET) & ~((uint32_t)SW_DSSS_LONG_PREAMBLE_11MBPS_EN_MASK)) == 0);
	assert((((uint32_t)sw_dsss_long_preamble_5p5mbps_en << SW_DSSS_LONG_PREAMBLE_5P5MBPS_EN_OFFSET) & ~((uint32_t)SW_DSSS_LONG_PREAMBLE_5P5MBPS_EN_MASK)) == 0);
	assert((((uint32_t)sw_dsss_long_preamble_2mbps_en << SW_DSSS_LONG_PREAMBLE_2MBPS_EN_OFFSET) & ~((uint32_t)SW_DSSS_LONG_PREAMBLE_2MBPS_EN_MASK)) == 0);
	assert((((uint32_t)sw_dsss_long_preamble_1mbps_en << SW_DSSS_LONG_PREAMBLE_1MBPS_EN_OFFSET) & ~((uint32_t)SW_DSSS_LONG_PREAMBLE_1MBPS_EN_MASK)) == 0);
	tmp =
		((uint32_t)sw_dsss_short_preamble_11mbps_en << SW_DSSS_SHORT_PREAMBLE_11MBPS_EN_OFFSET) |
		((uint32_t)sw_dsss_short_preamble_5p5mbps_en << SW_DSSS_SHORT_PREAMBLE_5P5MBPS_EN_OFFSET) |
		((uint32_t)sw_dsss_short_preamble_2mbps_en << SW_DSSS_SHORT_PREAMBLE_2MBPS_EN_OFFSET) |
		((uint32_t)sw_dsss_long_preamble_11mbps_en << SW_DSSS_LONG_PREAMBLE_11MBPS_EN_OFFSET) |
		((uint32_t)sw_dsss_long_preamble_5p5mbps_en << SW_DSSS_LONG_PREAMBLE_5P5MBPS_EN_OFFSET) |
		((uint32_t)sw_dsss_long_preamble_2mbps_en << SW_DSSS_LONG_PREAMBLE_2MBPS_EN_OFFSET) |
		((uint32_t)sw_dsss_long_preamble_1mbps_en << SW_DSSS_LONG_PREAMBLE_1MBPS_EN_OFFSET) ;
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_DSSS_RATE_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_DSSS_RATE_CTRL_ADDR), tmp);
}
static __inline void mac_rx_dsss_rate_ctrl_unpack(volatile uint32_t* sw_dsss_short_preamble_11mbps_en, volatile uint32_t* sw_dsss_short_preamble_5p5mbps_en, volatile uint32_t* sw_dsss_short_preamble_2mbps_en, volatile uint32_t* sw_dsss_long_preamble_11mbps_en, volatile uint32_t* sw_dsss_long_preamble_5p5mbps_en, volatile uint32_t* sw_dsss_long_preamble_2mbps_en, volatile uint32_t* sw_dsss_long_preamble_1mbps_en)
{
	uint32_t tmp;

	tmp = mac_rx_dsss_rate_ctrl_get();
	*sw_dsss_short_preamble_11mbps_en = (tmp & ((uint32_t)SW_DSSS_SHORT_PREAMBLE_11MBPS_EN_MASK)) >> SW_DSSS_SHORT_PREAMBLE_11MBPS_EN_OFFSET;
	*sw_dsss_short_preamble_5p5mbps_en = (tmp & ((uint32_t)SW_DSSS_SHORT_PREAMBLE_5P5MBPS_EN_MASK)) >> SW_DSSS_SHORT_PREAMBLE_5P5MBPS_EN_OFFSET;
	*sw_dsss_short_preamble_2mbps_en = (tmp & ((uint32_t)SW_DSSS_SHORT_PREAMBLE_2MBPS_EN_MASK)) >> SW_DSSS_SHORT_PREAMBLE_2MBPS_EN_OFFSET;
	*sw_dsss_long_preamble_11mbps_en = (tmp & ((uint32_t)SW_DSSS_LONG_PREAMBLE_11MBPS_EN_MASK)) >> SW_DSSS_LONG_PREAMBLE_11MBPS_EN_OFFSET;
	*sw_dsss_long_preamble_5p5mbps_en = (tmp & ((uint32_t)SW_DSSS_LONG_PREAMBLE_5P5MBPS_EN_MASK)) >> SW_DSSS_LONG_PREAMBLE_5P5MBPS_EN_OFFSET;
	*sw_dsss_long_preamble_2mbps_en = (tmp & ((uint32_t)SW_DSSS_LONG_PREAMBLE_2MBPS_EN_MASK)) >> SW_DSSS_LONG_PREAMBLE_2MBPS_EN_OFFSET;
	*sw_dsss_long_preamble_1mbps_en = (tmp & ((uint32_t)SW_DSSS_LONG_PREAMBLE_1MBPS_EN_MASK)) >> SW_DSSS_LONG_PREAMBLE_1MBPS_EN_OFFSET;
}
static __inline void mac_decrypt_ctrl_sw_rx_tkip_ignore_mic_en_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_DECRYPT_CTRL_ADDR);
	tmp &= ~SW_RX_TKIP_IGNORE_MIC_EN_MASK;
	tmp |= (value << SW_RX_TKIP_IGNORE_MIC_EN_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_DECRYPT_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_DECRYPT_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_decrypt_ctrl_sw_rx_tkip_ignore_mic_en_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_DECRYPT_CTRL_ADDR)) & SW_RX_TKIP_IGNORE_MIC_EN_MASK) >> SW_RX_TKIP_IGNORE_MIC_EN_OFFSET;
}
static __inline void mac_decrypt_ctrl_set(uint32_t value)
{
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_DECRYPT_CTRL_ADDR, value);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_DECRYPT_CTRL_ADDR), value);
}
static __inline uint32_t mac_decrypt_ctrl_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_DECRYPT_CTRL_ADDR));
}
static __inline void mac_decrypt_ctrl_pack(uint32_t sw_rx_tkip_ignore_mic_en)
{
	uint32_t tmp;

	assert((((uint32_t)sw_rx_tkip_ignore_mic_en << SW_RX_TKIP_IGNORE_MIC_EN_OFFSET) & ~((uint32_t)SW_RX_TKIP_IGNORE_MIC_EN_MASK)) == 0);
	tmp =
		((uint32_t)sw_rx_tkip_ignore_mic_en << SW_RX_TKIP_IGNORE_MIC_EN_OFFSET) ;
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_DECRYPT_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_DECRYPT_CTRL_ADDR), tmp);
}
static __inline void mac_decrypt_ctrl_unpack(volatile uint32_t* sw_rx_tkip_ignore_mic_en)
{
	uint32_t tmp;

	tmp = mac_decrypt_ctrl_get();
	*sw_rx_tkip_ignore_mic_en = (tmp & ((uint32_t)SW_RX_TKIP_IGNORE_MIC_EN_MASK)) >> SW_RX_TKIP_IGNORE_MIC_EN_OFFSET;
}
static __inline void mac_decrypt_key_map_sw_rx_aes256_key_id_map_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_DECRYPT_KEY_MAP_ADDR);
	tmp &= ~SW_RX_AES256_KEY_ID_MAP_MASK;
	tmp |= (value << SW_RX_AES256_KEY_ID_MAP_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_DECRYPT_KEY_MAP_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_DECRYPT_KEY_MAP_ADDR), tmp);
}
static __inline uint32_t mac_decrypt_key_map_sw_rx_aes256_key_id_map_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_DECRYPT_KEY_MAP_ADDR)) & SW_RX_AES256_KEY_ID_MAP_MASK) >> SW_RX_AES256_KEY_ID_MAP_OFFSET;
}
static __inline void mac_decrypt_key_map_sw_rx_aes192_key_id_map_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_DECRYPT_KEY_MAP_ADDR);
	tmp &= ~SW_RX_AES192_KEY_ID_MAP_MASK;
	tmp |= (value << SW_RX_AES192_KEY_ID_MAP_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_DECRYPT_KEY_MAP_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_DECRYPT_KEY_MAP_ADDR), tmp);
}
static __inline uint32_t mac_decrypt_key_map_sw_rx_aes192_key_id_map_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_DECRYPT_KEY_MAP_ADDR)) & SW_RX_AES192_KEY_ID_MAP_MASK) >> SW_RX_AES192_KEY_ID_MAP_OFFSET;
}
static __inline void mac_decrypt_key_map_sw_rx_aes128_key_id_map_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_DECRYPT_KEY_MAP_ADDR);
	tmp &= ~SW_RX_AES128_KEY_ID_MAP_MASK;
	tmp |= (value << SW_RX_AES128_KEY_ID_MAP_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_DECRYPT_KEY_MAP_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_DECRYPT_KEY_MAP_ADDR), tmp);
}
static __inline uint32_t mac_decrypt_key_map_sw_rx_aes128_key_id_map_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_DECRYPT_KEY_MAP_ADDR)) & SW_RX_AES128_KEY_ID_MAP_MASK) >> SW_RX_AES128_KEY_ID_MAP_OFFSET;
}
static __inline void mac_decrypt_key_map_sw_rx_tkip_key_id_map_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_DECRYPT_KEY_MAP_ADDR);
	tmp &= ~SW_RX_TKIP_KEY_ID_MAP_MASK;
	tmp |= (value << SW_RX_TKIP_KEY_ID_MAP_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_DECRYPT_KEY_MAP_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_DECRYPT_KEY_MAP_ADDR), tmp);
}
static __inline uint32_t mac_decrypt_key_map_sw_rx_tkip_key_id_map_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_DECRYPT_KEY_MAP_ADDR)) & SW_RX_TKIP_KEY_ID_MAP_MASK) >> SW_RX_TKIP_KEY_ID_MAP_OFFSET;
}
static __inline void mac_decrypt_key_map_set(uint32_t value)
{
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_DECRYPT_KEY_MAP_ADDR, value);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_DECRYPT_KEY_MAP_ADDR), value);
}
static __inline uint32_t mac_decrypt_key_map_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_DECRYPT_KEY_MAP_ADDR));
}
static __inline void mac_decrypt_key_map_pack(uint32_t sw_rx_aes256_key_id_map, uint32_t sw_rx_aes192_key_id_map, uint32_t sw_rx_aes128_key_id_map, uint32_t sw_rx_tkip_key_id_map)
{
	uint32_t tmp;

	assert((((uint32_t)sw_rx_aes256_key_id_map << SW_RX_AES256_KEY_ID_MAP_OFFSET) & ~((uint32_t)SW_RX_AES256_KEY_ID_MAP_MASK)) == 0);
	assert((((uint32_t)sw_rx_aes192_key_id_map << SW_RX_AES192_KEY_ID_MAP_OFFSET) & ~((uint32_t)SW_RX_AES192_KEY_ID_MAP_MASK)) == 0);
	assert((((uint32_t)sw_rx_aes128_key_id_map << SW_RX_AES128_KEY_ID_MAP_OFFSET) & ~((uint32_t)SW_RX_AES128_KEY_ID_MAP_MASK)) == 0);
	assert((((uint32_t)sw_rx_tkip_key_id_map << SW_RX_TKIP_KEY_ID_MAP_OFFSET) & ~((uint32_t)SW_RX_TKIP_KEY_ID_MAP_MASK)) == 0);
	tmp =
		((uint32_t)sw_rx_aes256_key_id_map << SW_RX_AES256_KEY_ID_MAP_OFFSET) |
		((uint32_t)sw_rx_aes192_key_id_map << SW_RX_AES192_KEY_ID_MAP_OFFSET) |
		((uint32_t)sw_rx_aes128_key_id_map << SW_RX_AES128_KEY_ID_MAP_OFFSET) |
		((uint32_t)sw_rx_tkip_key_id_map << SW_RX_TKIP_KEY_ID_MAP_OFFSET) ;
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_DECRYPT_KEY_MAP_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_DECRYPT_KEY_MAP_ADDR), tmp);
}
static __inline void mac_decrypt_key_map_unpack(volatile uint32_t* sw_rx_aes256_key_id_map, volatile uint32_t* sw_rx_aes192_key_id_map, volatile uint32_t* sw_rx_aes128_key_id_map, volatile uint32_t* sw_rx_tkip_key_id_map)
{
	uint32_t tmp;

	tmp = mac_decrypt_key_map_get();
	*sw_rx_aes256_key_id_map = (tmp & ((uint32_t)SW_RX_AES256_KEY_ID_MAP_MASK)) >> SW_RX_AES256_KEY_ID_MAP_OFFSET;
	*sw_rx_aes192_key_id_map = (tmp & ((uint32_t)SW_RX_AES192_KEY_ID_MAP_MASK)) >> SW_RX_AES192_KEY_ID_MAP_OFFSET;
	*sw_rx_aes128_key_id_map = (tmp & ((uint32_t)SW_RX_AES128_KEY_ID_MAP_MASK)) >> SW_RX_AES128_KEY_ID_MAP_OFFSET;
	*sw_rx_tkip_key_id_map = (tmp & ((uint32_t)SW_RX_TKIP_KEY_ID_MAP_MASK)) >> SW_RX_TKIP_KEY_ID_MAP_OFFSET;
}
static __inline void mac_rts_reset_nav_ctrl_sw_rts_reset_nav_en_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RTS_RESET_NAV_CTRL_ADDR);
	tmp &= ~SW_RTS_RESET_NAV_EN_MASK;
	tmp |= (value << SW_RTS_RESET_NAV_EN_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RTS_RESET_NAV_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RTS_RESET_NAV_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_rts_reset_nav_ctrl_sw_rts_reset_nav_en_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RTS_RESET_NAV_CTRL_ADDR)) & SW_RTS_RESET_NAV_EN_MASK) >> SW_RTS_RESET_NAV_EN_OFFSET;
}
static __inline void mac_rts_reset_nav_ctrl_set(uint32_t value)
{
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RTS_RESET_NAV_CTRL_ADDR, value);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RTS_RESET_NAV_CTRL_ADDR), value);
}
static __inline uint32_t mac_rts_reset_nav_ctrl_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RTS_RESET_NAV_CTRL_ADDR));
}
static __inline void mac_rts_reset_nav_ctrl_pack(uint32_t sw_rts_reset_nav_en)
{
	uint32_t tmp;

	assert((((uint32_t)sw_rts_reset_nav_en << SW_RTS_RESET_NAV_EN_OFFSET) & ~((uint32_t)SW_RTS_RESET_NAV_EN_MASK)) == 0);
	tmp =
		((uint32_t)sw_rts_reset_nav_en << SW_RTS_RESET_NAV_EN_OFFSET) ;
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RTS_RESET_NAV_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RTS_RESET_NAV_CTRL_ADDR), tmp);
}
static __inline void mac_rts_reset_nav_ctrl_unpack(volatile uint32_t* sw_rts_reset_nav_en)
{
	uint32_t tmp;

	tmp = mac_rts_reset_nav_ctrl_get();
	*sw_rts_reset_nav_en = (tmp & ((uint32_t)SW_RTS_RESET_NAV_EN_MASK)) >> SW_RTS_RESET_NAV_EN_OFFSET;
}
static __inline void mac_rts_reset_nav_timer_0_sw_rts_reset_nav_timer_dsss_long_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RTS_RESET_NAV_TIMER_0_ADDR);
	tmp &= ~SW_RTS_RESET_NAV_TIMER_DSSS_LONG_MASK;
	tmp |= (value << SW_RTS_RESET_NAV_TIMER_DSSS_LONG_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RTS_RESET_NAV_TIMER_0_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RTS_RESET_NAV_TIMER_0_ADDR), tmp);
}
static __inline uint32_t mac_rts_reset_nav_timer_0_sw_rts_reset_nav_timer_dsss_long_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RTS_RESET_NAV_TIMER_0_ADDR)) & SW_RTS_RESET_NAV_TIMER_DSSS_LONG_MASK) >> SW_RTS_RESET_NAV_TIMER_DSSS_LONG_OFFSET;
}
static __inline void mac_rts_reset_nav_timer_0_sw_rts_reset_nav_timer_dsss_short_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RTS_RESET_NAV_TIMER_0_ADDR);
	tmp &= ~SW_RTS_RESET_NAV_TIMER_DSSS_SHORT_MASK;
	tmp |= (value << SW_RTS_RESET_NAV_TIMER_DSSS_SHORT_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RTS_RESET_NAV_TIMER_0_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RTS_RESET_NAV_TIMER_0_ADDR), tmp);
}
static __inline uint32_t mac_rts_reset_nav_timer_0_sw_rts_reset_nav_timer_dsss_short_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RTS_RESET_NAV_TIMER_0_ADDR)) & SW_RTS_RESET_NAV_TIMER_DSSS_SHORT_MASK) >> SW_RTS_RESET_NAV_TIMER_DSSS_SHORT_OFFSET;
}
static __inline void mac_rts_reset_nav_timer_0_set(uint32_t value)
{
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RTS_RESET_NAV_TIMER_0_ADDR, value);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RTS_RESET_NAV_TIMER_0_ADDR), value);
}
static __inline uint32_t mac_rts_reset_nav_timer_0_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RTS_RESET_NAV_TIMER_0_ADDR));
}
static __inline void mac_rts_reset_nav_timer_0_pack(uint32_t sw_rts_reset_nav_timer_dsss_long, uint32_t sw_rts_reset_nav_timer_dsss_short)
{
	uint32_t tmp;

	assert((((uint32_t)sw_rts_reset_nav_timer_dsss_long << SW_RTS_RESET_NAV_TIMER_DSSS_LONG_OFFSET) & ~((uint32_t)SW_RTS_RESET_NAV_TIMER_DSSS_LONG_MASK)) == 0);
	assert((((uint32_t)sw_rts_reset_nav_timer_dsss_short << SW_RTS_RESET_NAV_TIMER_DSSS_SHORT_OFFSET) & ~((uint32_t)SW_RTS_RESET_NAV_TIMER_DSSS_SHORT_MASK)) == 0);
	tmp =
		((uint32_t)sw_rts_reset_nav_timer_dsss_long << SW_RTS_RESET_NAV_TIMER_DSSS_LONG_OFFSET) |
		((uint32_t)sw_rts_reset_nav_timer_dsss_short << SW_RTS_RESET_NAV_TIMER_DSSS_SHORT_OFFSET) ;
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RTS_RESET_NAV_TIMER_0_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RTS_RESET_NAV_TIMER_0_ADDR), tmp);
}
static __inline void mac_rts_reset_nav_timer_0_unpack(volatile uint32_t* sw_rts_reset_nav_timer_dsss_long, volatile uint32_t* sw_rts_reset_nav_timer_dsss_short)
{
	uint32_t tmp;

	tmp = mac_rts_reset_nav_timer_0_get();
	*sw_rts_reset_nav_timer_dsss_long = (tmp & ((uint32_t)SW_RTS_RESET_NAV_TIMER_DSSS_LONG_MASK)) >> SW_RTS_RESET_NAV_TIMER_DSSS_LONG_OFFSET;
	*sw_rts_reset_nav_timer_dsss_short = (tmp & ((uint32_t)SW_RTS_RESET_NAV_TIMER_DSSS_SHORT_MASK)) >> SW_RTS_RESET_NAV_TIMER_DSSS_SHORT_OFFSET;
}
static __inline void mac_rts_reset_nav_timer_1_sw_rts_reset_nav_timer_ofdm_nonht_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RTS_RESET_NAV_TIMER_1_ADDR);
	tmp &= ~SW_RTS_RESET_NAV_TIMER_OFDM_NONHT_MASK;
	tmp |= (value << SW_RTS_RESET_NAV_TIMER_OFDM_NONHT_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RTS_RESET_NAV_TIMER_1_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RTS_RESET_NAV_TIMER_1_ADDR), tmp);
}
static __inline uint32_t mac_rts_reset_nav_timer_1_sw_rts_reset_nav_timer_ofdm_nonht_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RTS_RESET_NAV_TIMER_1_ADDR)) & SW_RTS_RESET_NAV_TIMER_OFDM_NONHT_MASK) >> SW_RTS_RESET_NAV_TIMER_OFDM_NONHT_OFFSET;
}
static __inline void mac_rts_reset_nav_timer_1_sw_rts_reset_nav_timer_ofdm_ht_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RTS_RESET_NAV_TIMER_1_ADDR);
	tmp &= ~SW_RTS_RESET_NAV_TIMER_OFDM_HT_MASK;
	tmp |= (value << SW_RTS_RESET_NAV_TIMER_OFDM_HT_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RTS_RESET_NAV_TIMER_1_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RTS_RESET_NAV_TIMER_1_ADDR), tmp);
}
static __inline uint32_t mac_rts_reset_nav_timer_1_sw_rts_reset_nav_timer_ofdm_ht_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RTS_RESET_NAV_TIMER_1_ADDR)) & SW_RTS_RESET_NAV_TIMER_OFDM_HT_MASK) >> SW_RTS_RESET_NAV_TIMER_OFDM_HT_OFFSET;
}
static __inline void mac_rts_reset_nav_timer_1_set(uint32_t value)
{
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RTS_RESET_NAV_TIMER_1_ADDR, value);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RTS_RESET_NAV_TIMER_1_ADDR), value);
}
static __inline uint32_t mac_rts_reset_nav_timer_1_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RTS_RESET_NAV_TIMER_1_ADDR));
}
static __inline void mac_rts_reset_nav_timer_1_pack(uint32_t sw_rts_reset_nav_timer_ofdm_nonht, uint32_t sw_rts_reset_nav_timer_ofdm_ht)
{
	uint32_t tmp;

	assert((((uint32_t)sw_rts_reset_nav_timer_ofdm_nonht << SW_RTS_RESET_NAV_TIMER_OFDM_NONHT_OFFSET) & ~((uint32_t)SW_RTS_RESET_NAV_TIMER_OFDM_NONHT_MASK)) == 0);
	assert((((uint32_t)sw_rts_reset_nav_timer_ofdm_ht << SW_RTS_RESET_NAV_TIMER_OFDM_HT_OFFSET) & ~((uint32_t)SW_RTS_RESET_NAV_TIMER_OFDM_HT_MASK)) == 0);
	tmp =
		((uint32_t)sw_rts_reset_nav_timer_ofdm_nonht << SW_RTS_RESET_NAV_TIMER_OFDM_NONHT_OFFSET) |
		((uint32_t)sw_rts_reset_nav_timer_ofdm_ht << SW_RTS_RESET_NAV_TIMER_OFDM_HT_OFFSET) ;
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RTS_RESET_NAV_TIMER_1_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RTS_RESET_NAV_TIMER_1_ADDR), tmp);
}
static __inline void mac_rts_reset_nav_timer_1_unpack(volatile uint32_t* sw_rts_reset_nav_timer_ofdm_nonht, volatile uint32_t* sw_rts_reset_nav_timer_ofdm_ht)
{
	uint32_t tmp;

	tmp = mac_rts_reset_nav_timer_1_get();
	*sw_rts_reset_nav_timer_ofdm_nonht = (tmp & ((uint32_t)SW_RTS_RESET_NAV_TIMER_OFDM_NONHT_MASK)) >> SW_RTS_RESET_NAV_TIMER_OFDM_NONHT_OFFSET;
	*sw_rts_reset_nav_timer_ofdm_ht = (tmp & ((uint32_t)SW_RTS_RESET_NAV_TIMER_OFDM_HT_MASK)) >> SW_RTS_RESET_NAV_TIMER_OFDM_HT_OFFSET;
}
static __inline void mac_lsig_update_nav_ctrl_sw_lsig_update_nav_en_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_LSIG_UPDATE_NAV_CTRL_ADDR);
	tmp &= ~SW_LSIG_UPDATE_NAV_EN_MASK;
	tmp |= (value << SW_LSIG_UPDATE_NAV_EN_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_LSIG_UPDATE_NAV_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_LSIG_UPDATE_NAV_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_lsig_update_nav_ctrl_sw_lsig_update_nav_en_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_LSIG_UPDATE_NAV_CTRL_ADDR)) & SW_LSIG_UPDATE_NAV_EN_MASK) >> SW_LSIG_UPDATE_NAV_EN_OFFSET;
}
static __inline void mac_lsig_update_nav_ctrl_set(uint32_t value)
{
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_LSIG_UPDATE_NAV_CTRL_ADDR, value);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_LSIG_UPDATE_NAV_CTRL_ADDR), value);
}
static __inline uint32_t mac_lsig_update_nav_ctrl_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_LSIG_UPDATE_NAV_CTRL_ADDR));
}
static __inline void mac_lsig_update_nav_ctrl_pack(uint32_t sw_lsig_update_nav_en)
{
	uint32_t tmp;

	assert((((uint32_t)sw_lsig_update_nav_en << SW_LSIG_UPDATE_NAV_EN_OFFSET) & ~((uint32_t)SW_LSIG_UPDATE_NAV_EN_MASK)) == 0);
	tmp =
		((uint32_t)sw_lsig_update_nav_en << SW_LSIG_UPDATE_NAV_EN_OFFSET) ;
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_LSIG_UPDATE_NAV_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_LSIG_UPDATE_NAV_CTRL_ADDR), tmp);
}
static __inline void mac_lsig_update_nav_ctrl_unpack(volatile uint32_t* sw_lsig_update_nav_en)
{
	uint32_t tmp;

	tmp = mac_lsig_update_nav_ctrl_get();
	*sw_lsig_update_nav_en = (tmp & ((uint32_t)SW_LSIG_UPDATE_NAV_EN_MASK)) >> SW_LSIG_UPDATE_NAV_EN_OFFSET;
}
static __inline void mac_rx_qos_update_bitmap_ctrl_sw_data_qosdata_type_update_en_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_QOS_UPDATE_BITMAP_CTRL_ADDR);
	tmp &= ~SW_DATA_QOSDATA_TYPE_UPDATE_EN_MASK;
	tmp |= (value << SW_DATA_QOSDATA_TYPE_UPDATE_EN_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_QOS_UPDATE_BITMAP_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_QOS_UPDATE_BITMAP_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_rx_qos_update_bitmap_ctrl_sw_data_qosdata_type_update_en_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_QOS_UPDATE_BITMAP_CTRL_ADDR)) & SW_DATA_QOSDATA_TYPE_UPDATE_EN_MASK) >> SW_DATA_QOSDATA_TYPE_UPDATE_EN_OFFSET;
}
static __inline void mac_rx_qos_update_bitmap_ctrl_sw_data_qosdata_cfack_type_update_en_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_QOS_UPDATE_BITMAP_CTRL_ADDR);
	tmp &= ~SW_DATA_QOSDATA_CFACK_TYPE_UPDATE_EN_MASK;
	tmp |= (value << SW_DATA_QOSDATA_CFACK_TYPE_UPDATE_EN_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_QOS_UPDATE_BITMAP_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_QOS_UPDATE_BITMAP_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_rx_qos_update_bitmap_ctrl_sw_data_qosdata_cfack_type_update_en_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_QOS_UPDATE_BITMAP_CTRL_ADDR)) & SW_DATA_QOSDATA_CFACK_TYPE_UPDATE_EN_MASK) >> SW_DATA_QOSDATA_CFACK_TYPE_UPDATE_EN_OFFSET;
}
static __inline void mac_rx_qos_update_bitmap_ctrl_sw_data_qosdata_cfpoll_type_update_en_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_QOS_UPDATE_BITMAP_CTRL_ADDR);
	tmp &= ~SW_DATA_QOSDATA_CFPOLL_TYPE_UPDATE_EN_MASK;
	tmp |= (value << SW_DATA_QOSDATA_CFPOLL_TYPE_UPDATE_EN_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_QOS_UPDATE_BITMAP_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_QOS_UPDATE_BITMAP_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_rx_qos_update_bitmap_ctrl_sw_data_qosdata_cfpoll_type_update_en_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_QOS_UPDATE_BITMAP_CTRL_ADDR)) & SW_DATA_QOSDATA_CFPOLL_TYPE_UPDATE_EN_MASK) >> SW_DATA_QOSDATA_CFPOLL_TYPE_UPDATE_EN_OFFSET;
}
static __inline void mac_rx_qos_update_bitmap_ctrl_sw_data_qosdata_cfack_cfpoll_type_update_en_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_QOS_UPDATE_BITMAP_CTRL_ADDR);
	tmp &= ~SW_DATA_QOSDATA_CFACK_CFPOLL_TYPE_UPDATE_EN_MASK;
	tmp |= (value << SW_DATA_QOSDATA_CFACK_CFPOLL_TYPE_UPDATE_EN_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_QOS_UPDATE_BITMAP_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_QOS_UPDATE_BITMAP_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_rx_qos_update_bitmap_ctrl_sw_data_qosdata_cfack_cfpoll_type_update_en_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_QOS_UPDATE_BITMAP_CTRL_ADDR)) & SW_DATA_QOSDATA_CFACK_CFPOLL_TYPE_UPDATE_EN_MASK) >> SW_DATA_QOSDATA_CFACK_CFPOLL_TYPE_UPDATE_EN_OFFSET;
}
static __inline void mac_rx_qos_update_bitmap_ctrl_sw_data_qosnull_type_update_en_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_QOS_UPDATE_BITMAP_CTRL_ADDR);
	tmp &= ~SW_DATA_QOSNULL_TYPE_UPDATE_EN_MASK;
	tmp |= (value << SW_DATA_QOSNULL_TYPE_UPDATE_EN_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_QOS_UPDATE_BITMAP_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_QOS_UPDATE_BITMAP_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_rx_qos_update_bitmap_ctrl_sw_data_qosnull_type_update_en_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_QOS_UPDATE_BITMAP_CTRL_ADDR)) & SW_DATA_QOSNULL_TYPE_UPDATE_EN_MASK) >> SW_DATA_QOSNULL_TYPE_UPDATE_EN_OFFSET;
}
static __inline void mac_rx_qos_update_bitmap_ctrl_sw_data_rsvd0_update_en_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_QOS_UPDATE_BITMAP_CTRL_ADDR);
	tmp &= ~SW_DATA_RSVD0_UPDATE_EN_MASK;
	tmp |= (value << SW_DATA_RSVD0_UPDATE_EN_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_QOS_UPDATE_BITMAP_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_QOS_UPDATE_BITMAP_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_rx_qos_update_bitmap_ctrl_sw_data_rsvd0_update_en_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_QOS_UPDATE_BITMAP_CTRL_ADDR)) & SW_DATA_RSVD0_UPDATE_EN_MASK) >> SW_DATA_RSVD0_UPDATE_EN_OFFSET;
}
static __inline void mac_rx_qos_update_bitmap_ctrl_sw_data_qos_cfpoll_type_update_en_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_QOS_UPDATE_BITMAP_CTRL_ADDR);
	tmp &= ~SW_DATA_QOS_CFPOLL_TYPE_UPDATE_EN_MASK;
	tmp |= (value << SW_DATA_QOS_CFPOLL_TYPE_UPDATE_EN_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_QOS_UPDATE_BITMAP_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_QOS_UPDATE_BITMAP_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_rx_qos_update_bitmap_ctrl_sw_data_qos_cfpoll_type_update_en_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_QOS_UPDATE_BITMAP_CTRL_ADDR)) & SW_DATA_QOS_CFPOLL_TYPE_UPDATE_EN_MASK) >> SW_DATA_QOS_CFPOLL_TYPE_UPDATE_EN_OFFSET;
}
static __inline void mac_rx_qos_update_bitmap_ctrl_sw_data_qos_cfack_cfpoll_type_update_en_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_QOS_UPDATE_BITMAP_CTRL_ADDR);
	tmp &= ~SW_DATA_QOS_CFACK_CFPOLL_TYPE_UPDATE_EN_MASK;
	tmp |= (value << SW_DATA_QOS_CFACK_CFPOLL_TYPE_UPDATE_EN_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_QOS_UPDATE_BITMAP_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_QOS_UPDATE_BITMAP_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_rx_qos_update_bitmap_ctrl_sw_data_qos_cfack_cfpoll_type_update_en_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_QOS_UPDATE_BITMAP_CTRL_ADDR)) & SW_DATA_QOS_CFACK_CFPOLL_TYPE_UPDATE_EN_MASK) >> SW_DATA_QOS_CFACK_CFPOLL_TYPE_UPDATE_EN_OFFSET;
}
static __inline void mac_rx_qos_update_bitmap_ctrl_set(uint32_t value)
{
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_QOS_UPDATE_BITMAP_CTRL_ADDR, value);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_QOS_UPDATE_BITMAP_CTRL_ADDR), value);
}
static __inline uint32_t mac_rx_qos_update_bitmap_ctrl_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_QOS_UPDATE_BITMAP_CTRL_ADDR));
}
static __inline void mac_rx_qos_update_bitmap_ctrl_pack(uint32_t sw_data_qosdata_type_update_en, uint32_t sw_data_qosdata_cfack_type_update_en, uint32_t sw_data_qosdata_cfpoll_type_update_en, uint32_t sw_data_qosdata_cfack_cfpoll_type_update_en, uint32_t sw_data_qosnull_type_update_en, uint32_t sw_data_rsvd0_update_en, uint32_t sw_data_qos_cfpoll_type_update_en, uint32_t sw_data_qos_cfack_cfpoll_type_update_en)
{
	uint32_t tmp;

	assert((((uint32_t)sw_data_qosdata_type_update_en << SW_DATA_QOSDATA_TYPE_UPDATE_EN_OFFSET) & ~((uint32_t)SW_DATA_QOSDATA_TYPE_UPDATE_EN_MASK)) == 0);
	assert((((uint32_t)sw_data_qosdata_cfack_type_update_en << SW_DATA_QOSDATA_CFACK_TYPE_UPDATE_EN_OFFSET) & ~((uint32_t)SW_DATA_QOSDATA_CFACK_TYPE_UPDATE_EN_MASK)) == 0);
	assert((((uint32_t)sw_data_qosdata_cfpoll_type_update_en << SW_DATA_QOSDATA_CFPOLL_TYPE_UPDATE_EN_OFFSET) & ~((uint32_t)SW_DATA_QOSDATA_CFPOLL_TYPE_UPDATE_EN_MASK)) == 0);
	assert((((uint32_t)sw_data_qosdata_cfack_cfpoll_type_update_en << SW_DATA_QOSDATA_CFACK_CFPOLL_TYPE_UPDATE_EN_OFFSET) & ~((uint32_t)SW_DATA_QOSDATA_CFACK_CFPOLL_TYPE_UPDATE_EN_MASK)) == 0);
	assert((((uint32_t)sw_data_qosnull_type_update_en << SW_DATA_QOSNULL_TYPE_UPDATE_EN_OFFSET) & ~((uint32_t)SW_DATA_QOSNULL_TYPE_UPDATE_EN_MASK)) == 0);
	assert((((uint32_t)sw_data_rsvd0_update_en << SW_DATA_RSVD0_UPDATE_EN_OFFSET) & ~((uint32_t)SW_DATA_RSVD0_UPDATE_EN_MASK)) == 0);
	assert((((uint32_t)sw_data_qos_cfpoll_type_update_en << SW_DATA_QOS_CFPOLL_TYPE_UPDATE_EN_OFFSET) & ~((uint32_t)SW_DATA_QOS_CFPOLL_TYPE_UPDATE_EN_MASK)) == 0);
	assert((((uint32_t)sw_data_qos_cfack_cfpoll_type_update_en << SW_DATA_QOS_CFACK_CFPOLL_TYPE_UPDATE_EN_OFFSET) & ~((uint32_t)SW_DATA_QOS_CFACK_CFPOLL_TYPE_UPDATE_EN_MASK)) == 0);
	tmp =
		((uint32_t)sw_data_qosdata_type_update_en << SW_DATA_QOSDATA_TYPE_UPDATE_EN_OFFSET) |
		((uint32_t)sw_data_qosdata_cfack_type_update_en << SW_DATA_QOSDATA_CFACK_TYPE_UPDATE_EN_OFFSET) |
		((uint32_t)sw_data_qosdata_cfpoll_type_update_en << SW_DATA_QOSDATA_CFPOLL_TYPE_UPDATE_EN_OFFSET) |
		((uint32_t)sw_data_qosdata_cfack_cfpoll_type_update_en << SW_DATA_QOSDATA_CFACK_CFPOLL_TYPE_UPDATE_EN_OFFSET) |
		((uint32_t)sw_data_qosnull_type_update_en << SW_DATA_QOSNULL_TYPE_UPDATE_EN_OFFSET) |
		((uint32_t)sw_data_rsvd0_update_en << SW_DATA_RSVD0_UPDATE_EN_OFFSET) |
		((uint32_t)sw_data_qos_cfpoll_type_update_en << SW_DATA_QOS_CFPOLL_TYPE_UPDATE_EN_OFFSET) |
		((uint32_t)sw_data_qos_cfack_cfpoll_type_update_en << SW_DATA_QOS_CFACK_CFPOLL_TYPE_UPDATE_EN_OFFSET) ;
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_QOS_UPDATE_BITMAP_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_QOS_UPDATE_BITMAP_CTRL_ADDR), tmp);
}
static __inline void mac_rx_qos_update_bitmap_ctrl_unpack(volatile uint32_t* sw_data_qosdata_type_update_en, volatile uint32_t* sw_data_qosdata_cfack_type_update_en, volatile uint32_t* sw_data_qosdata_cfpoll_type_update_en, volatile uint32_t* sw_data_qosdata_cfack_cfpoll_type_update_en, volatile uint32_t* sw_data_qosnull_type_update_en, volatile uint32_t* sw_data_rsvd0_update_en, volatile uint32_t* sw_data_qos_cfpoll_type_update_en, volatile uint32_t* sw_data_qos_cfack_cfpoll_type_update_en)
{
	uint32_t tmp;

	tmp = mac_rx_qos_update_bitmap_ctrl_get();
	*sw_data_qosdata_type_update_en = (tmp & ((uint32_t)SW_DATA_QOSDATA_TYPE_UPDATE_EN_MASK)) >> SW_DATA_QOSDATA_TYPE_UPDATE_EN_OFFSET;
	*sw_data_qosdata_cfack_type_update_en = (tmp & ((uint32_t)SW_DATA_QOSDATA_CFACK_TYPE_UPDATE_EN_MASK)) >> SW_DATA_QOSDATA_CFACK_TYPE_UPDATE_EN_OFFSET;
	*sw_data_qosdata_cfpoll_type_update_en = (tmp & ((uint32_t)SW_DATA_QOSDATA_CFPOLL_TYPE_UPDATE_EN_MASK)) >> SW_DATA_QOSDATA_CFPOLL_TYPE_UPDATE_EN_OFFSET;
	*sw_data_qosdata_cfack_cfpoll_type_update_en = (tmp & ((uint32_t)SW_DATA_QOSDATA_CFACK_CFPOLL_TYPE_UPDATE_EN_MASK)) >> SW_DATA_QOSDATA_CFACK_CFPOLL_TYPE_UPDATE_EN_OFFSET;
	*sw_data_qosnull_type_update_en = (tmp & ((uint32_t)SW_DATA_QOSNULL_TYPE_UPDATE_EN_MASK)) >> SW_DATA_QOSNULL_TYPE_UPDATE_EN_OFFSET;
	*sw_data_rsvd0_update_en = (tmp & ((uint32_t)SW_DATA_RSVD0_UPDATE_EN_MASK)) >> SW_DATA_RSVD0_UPDATE_EN_OFFSET;
	*sw_data_qos_cfpoll_type_update_en = (tmp & ((uint32_t)SW_DATA_QOS_CFPOLL_TYPE_UPDATE_EN_MASK)) >> SW_DATA_QOS_CFPOLL_TYPE_UPDATE_EN_OFFSET;
	*sw_data_qos_cfack_cfpoll_type_update_en = (tmp & ((uint32_t)SW_DATA_QOS_CFACK_CFPOLL_TYPE_UPDATE_EN_MASK)) >> SW_DATA_QOS_CFACK_CFPOLL_TYPE_UPDATE_EN_OFFSET;
}
static __inline void mac_bitmap_init_word_high_sw_ba_bitmap_init_word_high_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BITMAP_INIT_WORD_HIGH_ADDR);
	tmp &= ~SW_BA_BITMAP_INIT_WORD_HIGH_MASK;
	tmp |= (value << SW_BA_BITMAP_INIT_WORD_HIGH_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_BITMAP_INIT_WORD_HIGH_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_BITMAP_INIT_WORD_HIGH_ADDR), tmp);
}
static __inline uint32_t mac_bitmap_init_word_high_sw_ba_bitmap_init_word_high_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BITMAP_INIT_WORD_HIGH_ADDR)) & SW_BA_BITMAP_INIT_WORD_HIGH_MASK) >> SW_BA_BITMAP_INIT_WORD_HIGH_OFFSET;
}
static __inline void mac_bitmap_init_word_high_set(uint32_t value)
{
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_BITMAP_INIT_WORD_HIGH_ADDR, value);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_BITMAP_INIT_WORD_HIGH_ADDR), value);
}
static __inline uint32_t mac_bitmap_init_word_high_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BITMAP_INIT_WORD_HIGH_ADDR));
}
static __inline void mac_bitmap_init_word_high_pack(uint32_t sw_ba_bitmap_init_word_high)
{
	uint32_t tmp;

	assert((((uint32_t)sw_ba_bitmap_init_word_high << SW_BA_BITMAP_INIT_WORD_HIGH_OFFSET) & ~((uint32_t)SW_BA_BITMAP_INIT_WORD_HIGH_MASK)) == 0);
	tmp =
		((uint32_t)sw_ba_bitmap_init_word_high << SW_BA_BITMAP_INIT_WORD_HIGH_OFFSET) ;
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_BITMAP_INIT_WORD_HIGH_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_BITMAP_INIT_WORD_HIGH_ADDR), tmp);
}
static __inline void mac_bitmap_init_word_high_unpack(volatile uint32_t* sw_ba_bitmap_init_word_high)
{
	uint32_t tmp;

	tmp = mac_bitmap_init_word_high_get();
	*sw_ba_bitmap_init_word_high = (tmp & ((uint32_t)SW_BA_BITMAP_INIT_WORD_HIGH_MASK)) >> SW_BA_BITMAP_INIT_WORD_HIGH_OFFSET;
}
static __inline void mac_bitmap_init_word_low_sw_ba_bitmap_init_word_low_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BITMAP_INIT_WORD_LOW_ADDR);
	tmp &= ~SW_BA_BITMAP_INIT_WORD_LOW_MASK;
	tmp |= (value << SW_BA_BITMAP_INIT_WORD_LOW_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_BITMAP_INIT_WORD_LOW_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_BITMAP_INIT_WORD_LOW_ADDR), tmp);
}
static __inline uint32_t mac_bitmap_init_word_low_sw_ba_bitmap_init_word_low_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BITMAP_INIT_WORD_LOW_ADDR)) & SW_BA_BITMAP_INIT_WORD_LOW_MASK) >> SW_BA_BITMAP_INIT_WORD_LOW_OFFSET;
}
static __inline void mac_bitmap_init_word_low_set(uint32_t value)
{
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_BITMAP_INIT_WORD_LOW_ADDR, value);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_BITMAP_INIT_WORD_LOW_ADDR), value);
}
static __inline uint32_t mac_bitmap_init_word_low_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BITMAP_INIT_WORD_LOW_ADDR));
}
static __inline void mac_bitmap_init_word_low_pack(uint32_t sw_ba_bitmap_init_word_low)
{
	uint32_t tmp;

	assert((((uint32_t)sw_ba_bitmap_init_word_low << SW_BA_BITMAP_INIT_WORD_LOW_OFFSET) & ~((uint32_t)SW_BA_BITMAP_INIT_WORD_LOW_MASK)) == 0);
	tmp =
		((uint32_t)sw_ba_bitmap_init_word_low << SW_BA_BITMAP_INIT_WORD_LOW_OFFSET) ;
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_BITMAP_INIT_WORD_LOW_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_BITMAP_INIT_WORD_LOW_ADDR), tmp);
}
static __inline void mac_bitmap_init_word_low_unpack(volatile uint32_t* sw_ba_bitmap_init_word_low)
{
	uint32_t tmp;

	tmp = mac_bitmap_init_word_low_get();
	*sw_ba_bitmap_init_word_low = (tmp & ((uint32_t)SW_BA_BITMAP_INIT_WORD_LOW_MASK)) >> SW_BA_BITMAP_INIT_WORD_LOW_OFFSET;
}
static __inline void mac_rx_amsdu_ctrl_sw_amsdu_split_en_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_AMSDU_CTRL_ADDR);
	tmp &= ~SW_AMSDU_SPLIT_EN_MASK;
	tmp |= (value << SW_AMSDU_SPLIT_EN_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_AMSDU_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_AMSDU_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_rx_amsdu_ctrl_sw_amsdu_split_en_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_AMSDU_CTRL_ADDR)) & SW_AMSDU_SPLIT_EN_MASK) >> SW_AMSDU_SPLIT_EN_OFFSET;
}
static __inline void mac_rx_amsdu_ctrl_set(uint32_t value)
{
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_AMSDU_CTRL_ADDR, value);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_AMSDU_CTRL_ADDR), value);
}
static __inline uint32_t mac_rx_amsdu_ctrl_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_AMSDU_CTRL_ADDR));
}
static __inline void mac_rx_amsdu_ctrl_pack(uint32_t sw_amsdu_split_en)
{
	uint32_t tmp;

	assert((((uint32_t)sw_amsdu_split_en << SW_AMSDU_SPLIT_EN_OFFSET) & ~((uint32_t)SW_AMSDU_SPLIT_EN_MASK)) == 0);
	tmp =
		((uint32_t)sw_amsdu_split_en << SW_AMSDU_SPLIT_EN_OFFSET) ;
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_AMSDU_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_AMSDU_CTRL_ADDR), tmp);
}
static __inline void mac_rx_amsdu_ctrl_unpack(volatile uint32_t* sw_amsdu_split_en)
{
	uint32_t tmp;

	tmp = mac_rx_amsdu_ctrl_get();
	*sw_amsdu_split_en = (tmp & ((uint32_t)SW_AMSDU_SPLIT_EN_MASK)) >> SW_AMSDU_SPLIT_EN_OFFSET;
}
static __inline void mac_rx_ampdu_ctrl_sw_mac_rx_unuse_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_AMPDU_CTRL_ADDR);
	tmp &= ~SW_MAC_RX_UNUSE_MASK;
	tmp |= (value << SW_MAC_RX_UNUSE_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_AMPDU_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_AMPDU_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_rx_ampdu_ctrl_sw_mac_rx_unuse_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_AMPDU_CTRL_ADDR)) & SW_MAC_RX_UNUSE_MASK) >> SW_MAC_RX_UNUSE_OFFSET;
}
static __inline void mac_rx_ampdu_ctrl_set(uint32_t value)
{
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_AMPDU_CTRL_ADDR, value);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_AMPDU_CTRL_ADDR), value);
}
static __inline uint32_t mac_rx_ampdu_ctrl_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_AMPDU_CTRL_ADDR));
}
static __inline void mac_rx_ampdu_ctrl_pack(uint32_t sw_mac_rx_unuse)
{
	uint32_t tmp;

	assert((((uint32_t)sw_mac_rx_unuse << SW_MAC_RX_UNUSE_OFFSET) & ~((uint32_t)SW_MAC_RX_UNUSE_MASK)) == 0);
	tmp =
		((uint32_t)sw_mac_rx_unuse << SW_MAC_RX_UNUSE_OFFSET) ;
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_AMPDU_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_AMPDU_CTRL_ADDR), tmp);
}
static __inline void mac_rx_ampdu_ctrl_unpack(volatile uint32_t* sw_mac_rx_unuse)
{
	uint32_t tmp;

	tmp = mac_rx_ampdu_ctrl_get();
	*sw_mac_rx_unuse = (tmp & ((uint32_t)SW_MAC_RX_UNUSE_MASK)) >> SW_MAC_RX_UNUSE_OFFSET;
}
static __inline void mac_rx_fsm_start_timeout_sw_mac_rx_fsm_start_timeout_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_FSM_START_TIMEOUT_ADDR);
	tmp &= ~SW_MAC_RX_FSM_START_TIMEOUT_MASK;
	tmp |= (value << SW_MAC_RX_FSM_START_TIMEOUT_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_FSM_START_TIMEOUT_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_FSM_START_TIMEOUT_ADDR), tmp);
}
static __inline uint32_t mac_rx_fsm_start_timeout_sw_mac_rx_fsm_start_timeout_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_FSM_START_TIMEOUT_ADDR)) & SW_MAC_RX_FSM_START_TIMEOUT_MASK) >> SW_MAC_RX_FSM_START_TIMEOUT_OFFSET;
}
static __inline void mac_rx_fsm_start_timeout_set(uint32_t value)
{
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_FSM_START_TIMEOUT_ADDR, value);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_FSM_START_TIMEOUT_ADDR), value);
}
static __inline uint32_t mac_rx_fsm_start_timeout_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_FSM_START_TIMEOUT_ADDR));
}
static __inline void mac_rx_fsm_start_timeout_pack(uint32_t sw_mac_rx_fsm_start_timeout)
{
	uint32_t tmp;

	assert((((uint32_t)sw_mac_rx_fsm_start_timeout << SW_MAC_RX_FSM_START_TIMEOUT_OFFSET) & ~((uint32_t)SW_MAC_RX_FSM_START_TIMEOUT_MASK)) == 0);
	tmp =
		((uint32_t)sw_mac_rx_fsm_start_timeout << SW_MAC_RX_FSM_START_TIMEOUT_OFFSET) ;
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_FSM_START_TIMEOUT_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_FSM_START_TIMEOUT_ADDR), tmp);
}
static __inline void mac_rx_fsm_start_timeout_unpack(volatile uint32_t* sw_mac_rx_fsm_start_timeout)
{
	uint32_t tmp;

	tmp = mac_rx_fsm_start_timeout_get();
	*sw_mac_rx_fsm_start_timeout = (tmp & ((uint32_t)SW_MAC_RX_FSM_START_TIMEOUT_MASK)) >> SW_MAC_RX_FSM_START_TIMEOUT_OFFSET;
}
static __inline void mac_rx_fsm_done_timeout_sw_mac_rx_fsm_done_timeout_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_FSM_DONE_TIMEOUT_ADDR);
	tmp &= ~SW_MAC_RX_FSM_DONE_TIMEOUT_MASK;
	tmp |= (value << SW_MAC_RX_FSM_DONE_TIMEOUT_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_FSM_DONE_TIMEOUT_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_FSM_DONE_TIMEOUT_ADDR), tmp);
}
static __inline uint32_t mac_rx_fsm_done_timeout_sw_mac_rx_fsm_done_timeout_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_FSM_DONE_TIMEOUT_ADDR)) & SW_MAC_RX_FSM_DONE_TIMEOUT_MASK) >> SW_MAC_RX_FSM_DONE_TIMEOUT_OFFSET;
}
static __inline void mac_rx_fsm_done_timeout_set(uint32_t value)
{
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_FSM_DONE_TIMEOUT_ADDR, value);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_FSM_DONE_TIMEOUT_ADDR), value);
}
static __inline uint32_t mac_rx_fsm_done_timeout_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_FSM_DONE_TIMEOUT_ADDR));
}
static __inline void mac_rx_fsm_done_timeout_pack(uint32_t sw_mac_rx_fsm_done_timeout)
{
	uint32_t tmp;

	assert((((uint32_t)sw_mac_rx_fsm_done_timeout << SW_MAC_RX_FSM_DONE_TIMEOUT_OFFSET) & ~((uint32_t)SW_MAC_RX_FSM_DONE_TIMEOUT_MASK)) == 0);
	tmp =
		((uint32_t)sw_mac_rx_fsm_done_timeout << SW_MAC_RX_FSM_DONE_TIMEOUT_OFFSET) ;
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_FSM_DONE_TIMEOUT_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_FSM_DONE_TIMEOUT_ADDR), tmp);
}
static __inline void mac_rx_fsm_done_timeout_unpack(volatile uint32_t* sw_mac_rx_fsm_done_timeout)
{
	uint32_t tmp;

	tmp = mac_rx_fsm_done_timeout_get();
	*sw_mac_rx_fsm_done_timeout = (tmp & ((uint32_t)SW_MAC_RX_FSM_DONE_TIMEOUT_MASK)) >> SW_MAC_RX_FSM_DONE_TIMEOUT_OFFSET;
}
static __inline void mac_rx_fsm_start_ctrl_sw_mac_rx_timeout_type_chos_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_FSM_START_CTRL_ADDR);
	tmp &= ~SW_MAC_RX_TIMEOUT_TYPE_CHOS_MASK;
	tmp |= (value << SW_MAC_RX_TIMEOUT_TYPE_CHOS_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_FSM_START_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_FSM_START_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_rx_fsm_start_ctrl_sw_mac_rx_timeout_type_chos_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_FSM_START_CTRL_ADDR)) & SW_MAC_RX_TIMEOUT_TYPE_CHOS_MASK) >> SW_MAC_RX_TIMEOUT_TYPE_CHOS_OFFSET;
}
static __inline void mac_rx_fsm_start_ctrl_sw_mac_rx_fsm_start_timeout_delta_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_FSM_START_CTRL_ADDR);
	tmp &= ~SW_MAC_RX_FSM_START_TIMEOUT_DELTA_MASK;
	tmp |= (value << SW_MAC_RX_FSM_START_TIMEOUT_DELTA_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_FSM_START_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_FSM_START_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_rx_fsm_start_ctrl_sw_mac_rx_fsm_start_timeout_delta_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_FSM_START_CTRL_ADDR)) & SW_MAC_RX_FSM_START_TIMEOUT_DELTA_MASK) >> SW_MAC_RX_FSM_START_TIMEOUT_DELTA_OFFSET;
}
static __inline void mac_rx_fsm_start_ctrl_set(uint32_t value)
{
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_FSM_START_CTRL_ADDR, value);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_FSM_START_CTRL_ADDR), value);
}
static __inline uint32_t mac_rx_fsm_start_ctrl_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_FSM_START_CTRL_ADDR));
}
static __inline void mac_rx_fsm_start_ctrl_pack(uint32_t sw_mac_rx_timeout_type_chos, uint32_t sw_mac_rx_fsm_start_timeout_delta)
{
	uint32_t tmp;

	assert((((uint32_t)sw_mac_rx_timeout_type_chos << SW_MAC_RX_TIMEOUT_TYPE_CHOS_OFFSET) & ~((uint32_t)SW_MAC_RX_TIMEOUT_TYPE_CHOS_MASK)) == 0);
	assert((((uint32_t)sw_mac_rx_fsm_start_timeout_delta << SW_MAC_RX_FSM_START_TIMEOUT_DELTA_OFFSET) & ~((uint32_t)SW_MAC_RX_FSM_START_TIMEOUT_DELTA_MASK)) == 0);
	tmp =
		((uint32_t)sw_mac_rx_timeout_type_chos << SW_MAC_RX_TIMEOUT_TYPE_CHOS_OFFSET) |
		((uint32_t)sw_mac_rx_fsm_start_timeout_delta << SW_MAC_RX_FSM_START_TIMEOUT_DELTA_OFFSET) ;
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_FSM_START_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_FSM_START_CTRL_ADDR), tmp);
}
static __inline void mac_rx_fsm_start_ctrl_unpack(volatile uint32_t* sw_mac_rx_timeout_type_chos, volatile uint32_t* sw_mac_rx_fsm_start_timeout_delta)
{
	uint32_t tmp;

	tmp = mac_rx_fsm_start_ctrl_get();
	*sw_mac_rx_timeout_type_chos = (tmp & ((uint32_t)SW_MAC_RX_TIMEOUT_TYPE_CHOS_MASK)) >> SW_MAC_RX_TIMEOUT_TYPE_CHOS_OFFSET;
	*sw_mac_rx_fsm_start_timeout_delta = (tmp & ((uint32_t)SW_MAC_RX_FSM_START_TIMEOUT_DELTA_MASK)) >> SW_MAC_RX_FSM_START_TIMEOUT_DELTA_OFFSET;
}
static __inline void mac_rx_bcn_ctrl_sw_rx_bcn_timestamp_offset_en_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_BCN_CTRL_ADDR);
	tmp &= ~SW_RX_BCN_TIMESTAMP_OFFSET_EN_MASK;
	tmp |= (value << SW_RX_BCN_TIMESTAMP_OFFSET_EN_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_BCN_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_BCN_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_rx_bcn_ctrl_sw_rx_bcn_timestamp_offset_en_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_BCN_CTRL_ADDR)) & SW_RX_BCN_TIMESTAMP_OFFSET_EN_MASK) >> SW_RX_BCN_TIMESTAMP_OFFSET_EN_OFFSET;
}
static __inline void mac_rx_bcn_ctrl_sw_rx_bcn_timestamp_offset_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_BCN_CTRL_ADDR);
	tmp &= ~SW_RX_BCN_TIMESTAMP_OFFSET_MASK;
	tmp |= (value << SW_RX_BCN_TIMESTAMP_OFFSET_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_BCN_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_BCN_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_rx_bcn_ctrl_sw_rx_bcn_timestamp_offset_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_BCN_CTRL_ADDR)) & SW_RX_BCN_TIMESTAMP_OFFSET_MASK) >> SW_RX_BCN_TIMESTAMP_OFFSET_OFFSET;
}
static __inline void mac_rx_bcn_ctrl_set(uint32_t value)
{
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_BCN_CTRL_ADDR, value);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_BCN_CTRL_ADDR), value);
}
static __inline uint32_t mac_rx_bcn_ctrl_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_BCN_CTRL_ADDR));
}
static __inline void mac_rx_bcn_ctrl_pack(uint32_t sw_rx_bcn_timestamp_offset_en, uint32_t sw_rx_bcn_timestamp_offset)
{
	uint32_t tmp;

	assert((((uint32_t)sw_rx_bcn_timestamp_offset_en << SW_RX_BCN_TIMESTAMP_OFFSET_EN_OFFSET) & ~((uint32_t)SW_RX_BCN_TIMESTAMP_OFFSET_EN_MASK)) == 0);
	assert((((uint32_t)sw_rx_bcn_timestamp_offset << SW_RX_BCN_TIMESTAMP_OFFSET_OFFSET) & ~((uint32_t)SW_RX_BCN_TIMESTAMP_OFFSET_MASK)) == 0);
	tmp =
		((uint32_t)sw_rx_bcn_timestamp_offset_en << SW_RX_BCN_TIMESTAMP_OFFSET_EN_OFFSET) |
		((uint32_t)sw_rx_bcn_timestamp_offset << SW_RX_BCN_TIMESTAMP_OFFSET_OFFSET) ;
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_BCN_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_BCN_CTRL_ADDR), tmp);
}
static __inline void mac_rx_bcn_ctrl_unpack(volatile uint32_t* sw_rx_bcn_timestamp_offset_en, volatile uint32_t* sw_rx_bcn_timestamp_offset)
{
	uint32_t tmp;

	tmp = mac_rx_bcn_ctrl_get();
	*sw_rx_bcn_timestamp_offset_en = (tmp & ((uint32_t)SW_RX_BCN_TIMESTAMP_OFFSET_EN_MASK)) >> SW_RX_BCN_TIMESTAMP_OFFSET_EN_OFFSET;
	*sw_rx_bcn_timestamp_offset = (tmp & ((uint32_t)SW_RX_BCN_TIMESTAMP_OFFSET_MASK)) >> SW_RX_BCN_TIMESTAMP_OFFSET_OFFSET;
}
static __inline void mac_rx_bcn_int_ctrl_sw_bcn_store_tim_len_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_BCN_INT_CTRL_ADDR);
	tmp &= ~SW_BCN_STORE_TIM_LEN_MASK;
	tmp |= (value << SW_BCN_STORE_TIM_LEN_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_BCN_INT_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_BCN_INT_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_rx_bcn_int_ctrl_sw_bcn_store_tim_len_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_BCN_INT_CTRL_ADDR)) & SW_BCN_STORE_TIM_LEN_MASK) >> SW_BCN_STORE_TIM_LEN_OFFSET;
}
static __inline void mac_rx_bcn_int_ctrl_sw_bcn_store_tim_offset_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_BCN_INT_CTRL_ADDR);
	tmp &= ~SW_BCN_STORE_TIM_OFFSET_MASK;
	tmp |= (value << SW_BCN_STORE_TIM_OFFSET_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_BCN_INT_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_BCN_INT_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_rx_bcn_int_ctrl_sw_bcn_store_tim_offset_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_BCN_INT_CTRL_ADDR)) & SW_BCN_STORE_TIM_OFFSET_MASK) >> SW_BCN_STORE_TIM_OFFSET_OFFSET;
}
static __inline void mac_rx_bcn_int_ctrl_set(uint32_t value)
{
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_BCN_INT_CTRL_ADDR, value);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_BCN_INT_CTRL_ADDR), value);
}
static __inline uint32_t mac_rx_bcn_int_ctrl_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_BCN_INT_CTRL_ADDR));
}
static __inline void mac_rx_bcn_int_ctrl_pack(uint32_t sw_bcn_store_tim_len, uint32_t sw_bcn_store_tim_offset)
{
	uint32_t tmp;

	assert((((uint32_t)sw_bcn_store_tim_len << SW_BCN_STORE_TIM_LEN_OFFSET) & ~((uint32_t)SW_BCN_STORE_TIM_LEN_MASK)) == 0);
	assert((((uint32_t)sw_bcn_store_tim_offset << SW_BCN_STORE_TIM_OFFSET_OFFSET) & ~((uint32_t)SW_BCN_STORE_TIM_OFFSET_MASK)) == 0);
	tmp =
		((uint32_t)sw_bcn_store_tim_len << SW_BCN_STORE_TIM_LEN_OFFSET) |
		((uint32_t)sw_bcn_store_tim_offset << SW_BCN_STORE_TIM_OFFSET_OFFSET) ;
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_BCN_INT_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_BCN_INT_CTRL_ADDR), tmp);
}
static __inline void mac_rx_bcn_int_ctrl_unpack(volatile uint32_t* sw_bcn_store_tim_len, volatile uint32_t* sw_bcn_store_tim_offset)
{
	uint32_t tmp;

	tmp = mac_rx_bcn_int_ctrl_get();
	*sw_bcn_store_tim_len = (tmp & ((uint32_t)SW_BCN_STORE_TIM_LEN_MASK)) >> SW_BCN_STORE_TIM_LEN_OFFSET;
	*sw_bcn_store_tim_offset = (tmp & ((uint32_t)SW_BCN_STORE_TIM_OFFSET_MASK)) >> SW_BCN_STORE_TIM_OFFSET_OFFSET;
}
static __inline uint32_t mac_rx_bcn_tim_word_0_sw_ro_bcn_tim_word_0_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_BCN_TIM_WORD_0_ADDR)) & SW_RO_BCN_TIM_WORD_0_MASK) >> SW_RO_BCN_TIM_WORD_0_OFFSET;
}
static __inline uint32_t mac_rx_bcn_tim_word_0_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_BCN_TIM_WORD_0_ADDR));
}
static __inline void mac_rx_bcn_tim_word_0_unpack(volatile uint32_t* sw_ro_bcn_tim_word_0)
{
	uint32_t tmp;

	tmp = mac_rx_bcn_tim_word_0_get();
	*sw_ro_bcn_tim_word_0 = (tmp & ((uint32_t)SW_RO_BCN_TIM_WORD_0_MASK)) >> SW_RO_BCN_TIM_WORD_0_OFFSET;
}
static __inline uint32_t mac_rx_bcn_tim_word_1_sw_ro_bcn_tim_word_1_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_BCN_TIM_WORD_1_ADDR)) & SW_RO_BCN_TIM_WORD_1_MASK) >> SW_RO_BCN_TIM_WORD_1_OFFSET;
}
static __inline uint32_t mac_rx_bcn_tim_word_1_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_BCN_TIM_WORD_1_ADDR));
}
static __inline void mac_rx_bcn_tim_word_1_unpack(volatile uint32_t* sw_ro_bcn_tim_word_1)
{
	uint32_t tmp;

	tmp = mac_rx_bcn_tim_word_1_get();
	*sw_ro_bcn_tim_word_1 = (tmp & ((uint32_t)SW_RO_BCN_TIM_WORD_1_MASK)) >> SW_RO_BCN_TIM_WORD_1_OFFSET;
}
static __inline uint32_t mac_rx_bcn_tim_word_2_sw_ro_bcn_tim_word_2_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_BCN_TIM_WORD_2_ADDR)) & SW_RO_BCN_TIM_WORD_2_MASK) >> SW_RO_BCN_TIM_WORD_2_OFFSET;
}
static __inline uint32_t mac_rx_bcn_tim_word_2_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_BCN_TIM_WORD_2_ADDR));
}
static __inline void mac_rx_bcn_tim_word_2_unpack(volatile uint32_t* sw_ro_bcn_tim_word_2)
{
	uint32_t tmp;

	tmp = mac_rx_bcn_tim_word_2_get();
	*sw_ro_bcn_tim_word_2 = (tmp & ((uint32_t)SW_RO_BCN_TIM_WORD_2_MASK)) >> SW_RO_BCN_TIM_WORD_2_OFFSET;
}
static __inline uint32_t mac_rx_bcn_tim_word_3_sw_ro_bcn_tim_word_3_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_BCN_TIM_WORD_3_ADDR)) & SW_RO_BCN_TIM_WORD_3_MASK) >> SW_RO_BCN_TIM_WORD_3_OFFSET;
}
static __inline uint32_t mac_rx_bcn_tim_word_3_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_BCN_TIM_WORD_3_ADDR));
}
static __inline void mac_rx_bcn_tim_word_3_unpack(volatile uint32_t* sw_ro_bcn_tim_word_3)
{
	uint32_t tmp;

	tmp = mac_rx_bcn_tim_word_3_get();
	*sw_ro_bcn_tim_word_3 = (tmp & ((uint32_t)SW_RO_BCN_TIM_WORD_3_MASK)) >> SW_RO_BCN_TIM_WORD_3_OFFSET;
}
static __inline void mac_rx_filter_rule_0_sw_addr_filter_en_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_FILTER_RULE_0_ADDR);
	tmp &= ~SW_ADDR_FILTER_EN_MASK;
	tmp |= (value << SW_ADDR_FILTER_EN_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_FILTER_RULE_0_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_FILTER_RULE_0_ADDR), tmp);
}
static __inline uint32_t mac_rx_filter_rule_0_sw_addr_filter_en_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_FILTER_RULE_0_ADDR)) & SW_ADDR_FILTER_EN_MASK) >> SW_ADDR_FILTER_EN_OFFSET;
}
static __inline void mac_rx_filter_rule_0_sw_pv_filter_en_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_FILTER_RULE_0_ADDR);
	tmp &= ~SW_PV_FILTER_EN_MASK;
	tmp |= (value << SW_PV_FILTER_EN_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_FILTER_RULE_0_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_FILTER_RULE_0_ADDR), tmp);
}
static __inline uint32_t mac_rx_filter_rule_0_sw_pv_filter_en_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_FILTER_RULE_0_ADDR)) & SW_PV_FILTER_EN_MASK) >> SW_PV_FILTER_EN_OFFSET;
}
static __inline void mac_rx_filter_rule_0_set(uint32_t value)
{
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_FILTER_RULE_0_ADDR, value);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_FILTER_RULE_0_ADDR), value);
}
static __inline uint32_t mac_rx_filter_rule_0_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_FILTER_RULE_0_ADDR));
}
static __inline void mac_rx_filter_rule_0_pack(uint32_t sw_addr_filter_en, uint32_t sw_pv_filter_en)
{
	uint32_t tmp;

	assert((((uint32_t)sw_addr_filter_en << SW_ADDR_FILTER_EN_OFFSET) & ~((uint32_t)SW_ADDR_FILTER_EN_MASK)) == 0);
	assert((((uint32_t)sw_pv_filter_en << SW_PV_FILTER_EN_OFFSET) & ~((uint32_t)SW_PV_FILTER_EN_MASK)) == 0);
	tmp =
		((uint32_t)sw_addr_filter_en << SW_ADDR_FILTER_EN_OFFSET) |
		((uint32_t)sw_pv_filter_en << SW_PV_FILTER_EN_OFFSET) ;
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_FILTER_RULE_0_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_FILTER_RULE_0_ADDR), tmp);
}
static __inline void mac_rx_filter_rule_0_unpack(volatile uint32_t* sw_addr_filter_en, volatile uint32_t* sw_pv_filter_en)
{
	uint32_t tmp;

	tmp = mac_rx_filter_rule_0_get();
	*sw_addr_filter_en = (tmp & ((uint32_t)SW_ADDR_FILTER_EN_MASK)) >> SW_ADDR_FILTER_EN_OFFSET;
	*sw_pv_filter_en = (tmp & ((uint32_t)SW_PV_FILTER_EN_MASK)) >> SW_PV_FILTER_EN_OFFSET;
}
static __inline void mac_rx_filter_rule_1_sw_type_filter_en_0_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_FILTER_RULE_1_ADDR);
	tmp &= ~SW_TYPE_FILTER_EN_0_MASK;
	tmp |= (value << SW_TYPE_FILTER_EN_0_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_FILTER_RULE_1_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_FILTER_RULE_1_ADDR), tmp);
}
static __inline uint32_t mac_rx_filter_rule_1_sw_type_filter_en_0_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_FILTER_RULE_1_ADDR)) & SW_TYPE_FILTER_EN_0_MASK) >> SW_TYPE_FILTER_EN_0_OFFSET;
}
static __inline void mac_rx_filter_rule_1_set(uint32_t value)
{
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_FILTER_RULE_1_ADDR, value);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_FILTER_RULE_1_ADDR), value);
}
static __inline uint32_t mac_rx_filter_rule_1_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_FILTER_RULE_1_ADDR));
}
static __inline void mac_rx_filter_rule_1_pack(uint32_t sw_type_filter_en_0)
{
	uint32_t tmp;

	assert((((uint32_t)sw_type_filter_en_0 << SW_TYPE_FILTER_EN_0_OFFSET) & ~((uint32_t)SW_TYPE_FILTER_EN_0_MASK)) == 0);
	tmp =
		((uint32_t)sw_type_filter_en_0 << SW_TYPE_FILTER_EN_0_OFFSET) ;
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_FILTER_RULE_1_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_FILTER_RULE_1_ADDR), tmp);
}
static __inline void mac_rx_filter_rule_1_unpack(volatile uint32_t* sw_type_filter_en_0)
{
	uint32_t tmp;

	tmp = mac_rx_filter_rule_1_get();
	*sw_type_filter_en_0 = (tmp & ((uint32_t)SW_TYPE_FILTER_EN_0_MASK)) >> SW_TYPE_FILTER_EN_0_OFFSET;
}
static __inline void mac_rx_filter_rule_2_sw_type_filter_en_1_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_FILTER_RULE_2_ADDR);
	tmp &= ~SW_TYPE_FILTER_EN_1_MASK;
	tmp |= (value << SW_TYPE_FILTER_EN_1_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_FILTER_RULE_2_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_FILTER_RULE_2_ADDR), tmp);
}
static __inline uint32_t mac_rx_filter_rule_2_sw_type_filter_en_1_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_FILTER_RULE_2_ADDR)) & SW_TYPE_FILTER_EN_1_MASK) >> SW_TYPE_FILTER_EN_1_OFFSET;
}
static __inline void mac_rx_filter_rule_2_set(uint32_t value)
{
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_FILTER_RULE_2_ADDR, value);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_FILTER_RULE_2_ADDR), value);
}
static __inline uint32_t mac_rx_filter_rule_2_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_FILTER_RULE_2_ADDR));
}
static __inline void mac_rx_filter_rule_2_pack(uint32_t sw_type_filter_en_1)
{
	uint32_t tmp;

	assert((((uint32_t)sw_type_filter_en_1 << SW_TYPE_FILTER_EN_1_OFFSET) & ~((uint32_t)SW_TYPE_FILTER_EN_1_MASK)) == 0);
	tmp =
		((uint32_t)sw_type_filter_en_1 << SW_TYPE_FILTER_EN_1_OFFSET) ;
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_FILTER_RULE_2_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_FILTER_RULE_2_ADDR), tmp);
}
static __inline void mac_rx_filter_rule_2_unpack(volatile uint32_t* sw_type_filter_en_1)
{
	uint32_t tmp;

	tmp = mac_rx_filter_rule_2_get();
	*sw_type_filter_en_1 = (tmp & ((uint32_t)SW_TYPE_FILTER_EN_1_MASK)) >> SW_TYPE_FILTER_EN_1_OFFSET;
}
static __inline void mac_rx_filter_rule_3_sw_filter_mpdu_byte_len_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_FILTER_RULE_3_ADDR);
	tmp &= ~SW_FILTER_MPDU_BYTE_LEN_MASK;
	tmp |= (value << SW_FILTER_MPDU_BYTE_LEN_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_FILTER_RULE_3_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_FILTER_RULE_3_ADDR), tmp);
}
static __inline uint32_t mac_rx_filter_rule_3_sw_filter_mpdu_byte_len_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_FILTER_RULE_3_ADDR)) & SW_FILTER_MPDU_BYTE_LEN_MASK) >> SW_FILTER_MPDU_BYTE_LEN_OFFSET;
}
static __inline void mac_rx_filter_rule_3_sw_filter_mpdu_byte_len_en_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_FILTER_RULE_3_ADDR);
	tmp &= ~SW_FILTER_MPDU_BYTE_LEN_EN_MASK;
	tmp |= (value << SW_FILTER_MPDU_BYTE_LEN_EN_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_FILTER_RULE_3_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_FILTER_RULE_3_ADDR), tmp);
}
static __inline uint32_t mac_rx_filter_rule_3_sw_filter_mpdu_byte_len_en_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_FILTER_RULE_3_ADDR)) & SW_FILTER_MPDU_BYTE_LEN_EN_MASK) >> SW_FILTER_MPDU_BYTE_LEN_EN_OFFSET;
}
static __inline void mac_rx_filter_rule_3_set(uint32_t value)
{
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_FILTER_RULE_3_ADDR, value);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_FILTER_RULE_3_ADDR), value);
}
static __inline uint32_t mac_rx_filter_rule_3_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_FILTER_RULE_3_ADDR));
}
static __inline void mac_rx_filter_rule_3_pack(uint32_t sw_filter_mpdu_byte_len, uint32_t sw_filter_mpdu_byte_len_en)
{
	uint32_t tmp;

	assert((((uint32_t)sw_filter_mpdu_byte_len << SW_FILTER_MPDU_BYTE_LEN_OFFSET) & ~((uint32_t)SW_FILTER_MPDU_BYTE_LEN_MASK)) == 0);
	assert((((uint32_t)sw_filter_mpdu_byte_len_en << SW_FILTER_MPDU_BYTE_LEN_EN_OFFSET) & ~((uint32_t)SW_FILTER_MPDU_BYTE_LEN_EN_MASK)) == 0);
	tmp =
		((uint32_t)sw_filter_mpdu_byte_len << SW_FILTER_MPDU_BYTE_LEN_OFFSET) |
		((uint32_t)sw_filter_mpdu_byte_len_en << SW_FILTER_MPDU_BYTE_LEN_EN_OFFSET) ;
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_RX_FILTER_RULE_3_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_RX_FILTER_RULE_3_ADDR), tmp);
}
static __inline void mac_rx_filter_rule_3_unpack(volatile uint32_t* sw_filter_mpdu_byte_len, volatile uint32_t* sw_filter_mpdu_byte_len_en)
{
	uint32_t tmp;

	tmp = mac_rx_filter_rule_3_get();
	*sw_filter_mpdu_byte_len = (tmp & ((uint32_t)SW_FILTER_MPDU_BYTE_LEN_MASK)) >> SW_FILTER_MPDU_BYTE_LEN_OFFSET;
	*sw_filter_mpdu_byte_len_en = (tmp & ((uint32_t)SW_FILTER_MPDU_BYTE_LEN_EN_MASK)) >> SW_FILTER_MPDU_BYTE_LEN_EN_OFFSET;
}
static __inline uint32_t mac_rx_filter_sts_0_sw_ro_rx_filter_pass_cnt_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_FILTER_STS_0_ADDR)) & SW_RO_RX_FILTER_PASS_CNT_MASK) >> SW_RO_RX_FILTER_PASS_CNT_OFFSET;
}
static __inline uint32_t mac_rx_filter_sts_0_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_FILTER_STS_0_ADDR));
}
static __inline void mac_rx_filter_sts_0_unpack(volatile uint32_t* sw_ro_rx_filter_pass_cnt)
{
	uint32_t tmp;

	tmp = mac_rx_filter_sts_0_get();
	*sw_ro_rx_filter_pass_cnt = (tmp & ((uint32_t)SW_RO_RX_FILTER_PASS_CNT_MASK)) >> SW_RO_RX_FILTER_PASS_CNT_OFFSET;
}
static __inline uint32_t mac_rx_filter_sts_1_sw_ro_rx_filter_addr1_fail_cnt_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_FILTER_STS_1_ADDR)) & SW_RO_RX_FILTER_ADDR1_FAIL_CNT_MASK) >> SW_RO_RX_FILTER_ADDR1_FAIL_CNT_OFFSET;
}
static __inline uint32_t mac_rx_filter_sts_1_sw_ro_rx_filter_len_fail_cnt_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_FILTER_STS_1_ADDR)) & SW_RO_RX_FILTER_LEN_FAIL_CNT_MASK) >> SW_RO_RX_FILTER_LEN_FAIL_CNT_OFFSET;
}
static __inline uint32_t mac_rx_filter_sts_1_sw_ro_rx_filter_type_fail_cnt_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_FILTER_STS_1_ADDR)) & SW_RO_RX_FILTER_TYPE_FAIL_CNT_MASK) >> SW_RO_RX_FILTER_TYPE_FAIL_CNT_OFFSET;
}
static __inline uint32_t mac_rx_filter_sts_1_sw_ro_rx_filter_pv_fail_cnt_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_FILTER_STS_1_ADDR)) & SW_RO_RX_FILTER_PV_FAIL_CNT_MASK) >> SW_RO_RX_FILTER_PV_FAIL_CNT_OFFSET;
}
static __inline uint32_t mac_rx_filter_sts_1_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_FILTER_STS_1_ADDR));
}
static __inline void mac_rx_filter_sts_1_unpack(volatile uint32_t* sw_ro_rx_filter_addr1_fail_cnt, volatile uint32_t* sw_ro_rx_filter_len_fail_cnt, volatile uint32_t* sw_ro_rx_filter_type_fail_cnt, volatile uint32_t* sw_ro_rx_filter_pv_fail_cnt)
{
	uint32_t tmp;

	tmp = mac_rx_filter_sts_1_get();
	*sw_ro_rx_filter_addr1_fail_cnt = (tmp & ((uint32_t)SW_RO_RX_FILTER_ADDR1_FAIL_CNT_MASK)) >> SW_RO_RX_FILTER_ADDR1_FAIL_CNT_OFFSET;
	*sw_ro_rx_filter_len_fail_cnt = (tmp & ((uint32_t)SW_RO_RX_FILTER_LEN_FAIL_CNT_MASK)) >> SW_RO_RX_FILTER_LEN_FAIL_CNT_OFFSET;
	*sw_ro_rx_filter_type_fail_cnt = (tmp & ((uint32_t)SW_RO_RX_FILTER_TYPE_FAIL_CNT_MASK)) >> SW_RO_RX_FILTER_TYPE_FAIL_CNT_OFFSET;
	*sw_ro_rx_filter_pv_fail_cnt = (tmp & ((uint32_t)SW_RO_RX_FILTER_PV_FAIL_CNT_MASK)) >> SW_RO_RX_FILTER_PV_FAIL_CNT_OFFSET;
}
static __inline uint32_t mac_rx_mpdu_parse_sts_0_sw_ro_mpdu_parse_0_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_MPDU_PARSE_STS_0_ADDR)) & SW_RO_MPDU_PARSE_0_MASK) >> SW_RO_MPDU_PARSE_0_OFFSET;
}
static __inline uint32_t mac_rx_mpdu_parse_sts_0_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_MPDU_PARSE_STS_0_ADDR));
}
static __inline void mac_rx_mpdu_parse_sts_0_unpack(volatile uint32_t* sw_ro_mpdu_parse_0)
{
	uint32_t tmp;

	tmp = mac_rx_mpdu_parse_sts_0_get();
	*sw_ro_mpdu_parse_0 = (tmp & ((uint32_t)SW_RO_MPDU_PARSE_0_MASK)) >> SW_RO_MPDU_PARSE_0_OFFSET;
}
static __inline uint32_t mac_rx_mpdu_parse_sts_1_sw_ro_mpdu_parse_1_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_MPDU_PARSE_STS_1_ADDR)) & SW_RO_MPDU_PARSE_1_MASK) >> SW_RO_MPDU_PARSE_1_OFFSET;
}
static __inline uint32_t mac_rx_mpdu_parse_sts_1_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_MPDU_PARSE_STS_1_ADDR));
}
static __inline void mac_rx_mpdu_parse_sts_1_unpack(volatile uint32_t* sw_ro_mpdu_parse_1)
{
	uint32_t tmp;

	tmp = mac_rx_mpdu_parse_sts_1_get();
	*sw_ro_mpdu_parse_1 = (tmp & ((uint32_t)SW_RO_MPDU_PARSE_1_MASK)) >> SW_RO_MPDU_PARSE_1_OFFSET;
}
static __inline uint32_t mac_rx_mpdu_parse_sts_2_sw_ro_mpdu_parse_2_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_MPDU_PARSE_STS_2_ADDR)) & SW_RO_MPDU_PARSE_2_MASK) >> SW_RO_MPDU_PARSE_2_OFFSET;
}
static __inline uint32_t mac_rx_mpdu_parse_sts_2_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_MPDU_PARSE_STS_2_ADDR));
}
static __inline void mac_rx_mpdu_parse_sts_2_unpack(volatile uint32_t* sw_ro_mpdu_parse_2)
{
	uint32_t tmp;

	tmp = mac_rx_mpdu_parse_sts_2_get();
	*sw_ro_mpdu_parse_2 = (tmp & ((uint32_t)SW_RO_MPDU_PARSE_2_MASK)) >> SW_RO_MPDU_PARSE_2_OFFSET;
}
static __inline uint32_t mac_rx_mpdu_parse_sts_3_sw_ro_mpdu_parse_3_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_MPDU_PARSE_STS_3_ADDR)) & SW_RO_MPDU_PARSE_3_MASK) >> SW_RO_MPDU_PARSE_3_OFFSET;
}
static __inline uint32_t mac_rx_mpdu_parse_sts_3_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_MPDU_PARSE_STS_3_ADDR));
}
static __inline void mac_rx_mpdu_parse_sts_3_unpack(volatile uint32_t* sw_ro_mpdu_parse_3)
{
	uint32_t tmp;

	tmp = mac_rx_mpdu_parse_sts_3_get();
	*sw_ro_mpdu_parse_3 = (tmp & ((uint32_t)SW_RO_MPDU_PARSE_3_MASK)) >> SW_RO_MPDU_PARSE_3_OFFSET;
}
static __inline uint32_t mac_rx_mpdu_parse_sts_4_sw_ro_mpdu_parse_4_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_MPDU_PARSE_STS_4_ADDR)) & SW_RO_MPDU_PARSE_4_MASK) >> SW_RO_MPDU_PARSE_4_OFFSET;
}
static __inline uint32_t mac_rx_mpdu_parse_sts_4_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_MPDU_PARSE_STS_4_ADDR));
}
static __inline void mac_rx_mpdu_parse_sts_4_unpack(volatile uint32_t* sw_ro_mpdu_parse_4)
{
	uint32_t tmp;

	tmp = mac_rx_mpdu_parse_sts_4_get();
	*sw_ro_mpdu_parse_4 = (tmp & ((uint32_t)SW_RO_MPDU_PARSE_4_MASK)) >> SW_RO_MPDU_PARSE_4_OFFSET;
}
static __inline uint32_t mac_rx_mpdu_parse_sts_5_sw_ro_mpdu_parse_5_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_MPDU_PARSE_STS_5_ADDR)) & SW_RO_MPDU_PARSE_5_MASK) >> SW_RO_MPDU_PARSE_5_OFFSET;
}
static __inline uint32_t mac_rx_mpdu_parse_sts_5_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_MPDU_PARSE_STS_5_ADDR));
}
static __inline void mac_rx_mpdu_parse_sts_5_unpack(volatile uint32_t* sw_ro_mpdu_parse_5)
{
	uint32_t tmp;

	tmp = mac_rx_mpdu_parse_sts_5_get();
	*sw_ro_mpdu_parse_5 = (tmp & ((uint32_t)SW_RO_MPDU_PARSE_5_MASK)) >> SW_RO_MPDU_PARSE_5_OFFSET;
}
static __inline uint32_t mac_rx_mpdu_parse_sts_6_sw_ro_mpdu_parse_6_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_MPDU_PARSE_STS_6_ADDR)) & SW_RO_MPDU_PARSE_6_MASK) >> SW_RO_MPDU_PARSE_6_OFFSET;
}
static __inline uint32_t mac_rx_mpdu_parse_sts_6_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_MPDU_PARSE_STS_6_ADDR));
}
static __inline void mac_rx_mpdu_parse_sts_6_unpack(volatile uint32_t* sw_ro_mpdu_parse_6)
{
	uint32_t tmp;

	tmp = mac_rx_mpdu_parse_sts_6_get();
	*sw_ro_mpdu_parse_6 = (tmp & ((uint32_t)SW_RO_MPDU_PARSE_6_MASK)) >> SW_RO_MPDU_PARSE_6_OFFSET;
}
static __inline uint32_t mac_rx_mpdu_parse_sts_7_sw_ro_mpdu_parse_7_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_MPDU_PARSE_STS_7_ADDR)) & SW_RO_MPDU_PARSE_7_MASK) >> SW_RO_MPDU_PARSE_7_OFFSET;
}
static __inline uint32_t mac_rx_mpdu_parse_sts_7_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_MPDU_PARSE_STS_7_ADDR));
}
static __inline void mac_rx_mpdu_parse_sts_7_unpack(volatile uint32_t* sw_ro_mpdu_parse_7)
{
	uint32_t tmp;

	tmp = mac_rx_mpdu_parse_sts_7_get();
	*sw_ro_mpdu_parse_7 = (tmp & ((uint32_t)SW_RO_MPDU_PARSE_7_MASK)) >> SW_RO_MPDU_PARSE_7_OFFSET;
}
static __inline uint32_t mac_rx_mpdu_parse_sts_8_sw_ro_mpdu_parse_8_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_MPDU_PARSE_STS_8_ADDR)) & SW_RO_MPDU_PARSE_8_MASK) >> SW_RO_MPDU_PARSE_8_OFFSET;
}
static __inline uint32_t mac_rx_mpdu_parse_sts_8_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_MPDU_PARSE_STS_8_ADDR));
}
static __inline void mac_rx_mpdu_parse_sts_8_unpack(volatile uint32_t* sw_ro_mpdu_parse_8)
{
	uint32_t tmp;

	tmp = mac_rx_mpdu_parse_sts_8_get();
	*sw_ro_mpdu_parse_8 = (tmp & ((uint32_t)SW_RO_MPDU_PARSE_8_MASK)) >> SW_RO_MPDU_PARSE_8_OFFSET;
}
static __inline uint32_t mac_rx_mpdu_parse_sts_9_sw_ro_mpdu_parse_9_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_MPDU_PARSE_STS_9_ADDR)) & SW_RO_MPDU_PARSE_9_MASK) >> SW_RO_MPDU_PARSE_9_OFFSET;
}
static __inline uint32_t mac_rx_mpdu_parse_sts_9_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_MPDU_PARSE_STS_9_ADDR));
}
static __inline void mac_rx_mpdu_parse_sts_9_unpack(volatile uint32_t* sw_ro_mpdu_parse_9)
{
	uint32_t tmp;

	tmp = mac_rx_mpdu_parse_sts_9_get();
	*sw_ro_mpdu_parse_9 = (tmp & ((uint32_t)SW_RO_MPDU_PARSE_9_MASK)) >> SW_RO_MPDU_PARSE_9_OFFSET;
}
static __inline uint32_t mac_rx_mpdu_parse_sts_10_sw_ro_mpdu_parse_10_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_MPDU_PARSE_STS_10_ADDR)) & SW_RO_MPDU_PARSE_10_MASK) >> SW_RO_MPDU_PARSE_10_OFFSET;
}
static __inline uint32_t mac_rx_mpdu_parse_sts_10_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_MPDU_PARSE_STS_10_ADDR));
}
static __inline void mac_rx_mpdu_parse_sts_10_unpack(volatile uint32_t* sw_ro_mpdu_parse_10)
{
	uint32_t tmp;

	tmp = mac_rx_mpdu_parse_sts_10_get();
	*sw_ro_mpdu_parse_10 = (tmp & ((uint32_t)SW_RO_MPDU_PARSE_10_MASK)) >> SW_RO_MPDU_PARSE_10_OFFSET;
}
static __inline uint32_t mac_rx_mpdu_parse_sts_11_sw_ro_mpdu_parse_11_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_MPDU_PARSE_STS_11_ADDR)) & SW_RO_MPDU_PARSE_11_MASK) >> SW_RO_MPDU_PARSE_11_OFFSET;
}
static __inline uint32_t mac_rx_mpdu_parse_sts_11_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_MPDU_PARSE_STS_11_ADDR));
}
static __inline void mac_rx_mpdu_parse_sts_11_unpack(volatile uint32_t* sw_ro_mpdu_parse_11)
{
	uint32_t tmp;

	tmp = mac_rx_mpdu_parse_sts_11_get();
	*sw_ro_mpdu_parse_11 = (tmp & ((uint32_t)SW_RO_MPDU_PARSE_11_MASK)) >> SW_RO_MPDU_PARSE_11_OFFSET;
}
static __inline uint32_t mac_rx_mpdu_parse_sts_12_sw_ro_mpdu_parse_12_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_MPDU_PARSE_STS_12_ADDR)) & SW_RO_MPDU_PARSE_12_MASK) >> SW_RO_MPDU_PARSE_12_OFFSET;
}
static __inline uint32_t mac_rx_mpdu_parse_sts_12_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_MPDU_PARSE_STS_12_ADDR));
}
static __inline void mac_rx_mpdu_parse_sts_12_unpack(volatile uint32_t* sw_ro_mpdu_parse_12)
{
	uint32_t tmp;

	tmp = mac_rx_mpdu_parse_sts_12_get();
	*sw_ro_mpdu_parse_12 = (tmp & ((uint32_t)SW_RO_MPDU_PARSE_12_MASK)) >> SW_RO_MPDU_PARSE_12_OFFSET;
}
static __inline uint32_t mac_rx_mpdu_parse_sts_13_sw_ro_mpdu_parse_13_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_MPDU_PARSE_STS_13_ADDR)) & SW_RO_MPDU_PARSE_13_MASK) >> SW_RO_MPDU_PARSE_13_OFFSET;
}
static __inline uint32_t mac_rx_mpdu_parse_sts_13_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_MPDU_PARSE_STS_13_ADDR));
}
static __inline void mac_rx_mpdu_parse_sts_13_unpack(volatile uint32_t* sw_ro_mpdu_parse_13)
{
	uint32_t tmp;

	tmp = mac_rx_mpdu_parse_sts_13_get();
	*sw_ro_mpdu_parse_13 = (tmp & ((uint32_t)SW_RO_MPDU_PARSE_13_MASK)) >> SW_RO_MPDU_PARSE_13_OFFSET;
}
static __inline uint32_t mac_rx_mpdu_parse_sts_14_sw_ro_mpdu_parse_14_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_MPDU_PARSE_STS_14_ADDR)) & SW_RO_MPDU_PARSE_14_MASK) >> SW_RO_MPDU_PARSE_14_OFFSET;
}
static __inline uint32_t mac_rx_mpdu_parse_sts_14_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_MPDU_PARSE_STS_14_ADDR));
}
static __inline void mac_rx_mpdu_parse_sts_14_unpack(volatile uint32_t* sw_ro_mpdu_parse_14)
{
	uint32_t tmp;

	tmp = mac_rx_mpdu_parse_sts_14_get();
	*sw_ro_mpdu_parse_14 = (tmp & ((uint32_t)SW_RO_MPDU_PARSE_14_MASK)) >> SW_RO_MPDU_PARSE_14_OFFSET;
}
static __inline uint32_t mac_rx_mpdu_parse_sts_15_sw_ro_mpdu_parse_15_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_MPDU_PARSE_STS_15_ADDR)) & SW_RO_MPDU_PARSE_15_MASK) >> SW_RO_MPDU_PARSE_15_OFFSET;
}
static __inline uint32_t mac_rx_mpdu_parse_sts_15_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_MPDU_PARSE_STS_15_ADDR));
}
static __inline void mac_rx_mpdu_parse_sts_15_unpack(volatile uint32_t* sw_ro_mpdu_parse_15)
{
	uint32_t tmp;

	tmp = mac_rx_mpdu_parse_sts_15_get();
	*sw_ro_mpdu_parse_15 = (tmp & ((uint32_t)SW_RO_MPDU_PARSE_15_MASK)) >> SW_RO_MPDU_PARSE_15_OFFSET;
}
static __inline uint32_t mac_rx_sts_0_sw_ro_rx_mpdu_crc_pass_cnt_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_0_ADDR)) & SW_RO_RX_MPDU_CRC_PASS_CNT_MASK) >> SW_RO_RX_MPDU_CRC_PASS_CNT_OFFSET;
}
static __inline uint32_t mac_rx_sts_0_sw_ro_rx_psdu_complete_cnt_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_0_ADDR)) & SW_RO_RX_PSDU_COMPLETE_CNT_MASK) >> SW_RO_RX_PSDU_COMPLETE_CNT_OFFSET;
}
static __inline uint32_t mac_rx_sts_0_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_0_ADDR));
}
static __inline void mac_rx_sts_0_unpack(volatile uint32_t* sw_ro_rx_mpdu_crc_pass_cnt, volatile uint32_t* sw_ro_rx_psdu_complete_cnt)
{
	uint32_t tmp;

	tmp = mac_rx_sts_0_get();
	*sw_ro_rx_mpdu_crc_pass_cnt = (tmp & ((uint32_t)SW_RO_RX_MPDU_CRC_PASS_CNT_MASK)) >> SW_RO_RX_MPDU_CRC_PASS_CNT_OFFSET;
	*sw_ro_rx_psdu_complete_cnt = (tmp & ((uint32_t)SW_RO_RX_PSDU_COMPLETE_CNT_MASK)) >> SW_RO_RX_PSDU_COMPLETE_CNT_OFFSET;
}
static __inline uint32_t mac_rx_sts_1_sw_ro_prs_vector_0_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_1_ADDR)) & SW_RO_PRS_VECTOR_0_MASK) >> SW_RO_PRS_VECTOR_0_OFFSET;
}
static __inline uint32_t mac_rx_sts_1_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_1_ADDR));
}
static __inline void mac_rx_sts_1_unpack(volatile uint32_t* sw_ro_prs_vector_0)
{
	uint32_t tmp;

	tmp = mac_rx_sts_1_get();
	*sw_ro_prs_vector_0 = (tmp & ((uint32_t)SW_RO_PRS_VECTOR_0_MASK)) >> SW_RO_PRS_VECTOR_0_OFFSET;
}
static __inline uint32_t mac_rx_sts_2_sw_ro_prs_vector_1_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_2_ADDR)) & SW_RO_PRS_VECTOR_1_MASK) >> SW_RO_PRS_VECTOR_1_OFFSET;
}
static __inline uint32_t mac_rx_sts_2_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_2_ADDR));
}
static __inline void mac_rx_sts_2_unpack(volatile uint32_t* sw_ro_prs_vector_1)
{
	uint32_t tmp;

	tmp = mac_rx_sts_2_get();
	*sw_ro_prs_vector_1 = (tmp & ((uint32_t)SW_RO_PRS_VECTOR_1_MASK)) >> SW_RO_PRS_VECTOR_1_OFFSET;
}
static __inline uint32_t mac_rx_sts_3_sw_ro_prs_vector_2_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_3_ADDR)) & SW_RO_PRS_VECTOR_2_MASK) >> SW_RO_PRS_VECTOR_2_OFFSET;
}
static __inline uint32_t mac_rx_sts_3_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_3_ADDR));
}
static __inline void mac_rx_sts_3_unpack(volatile uint32_t* sw_ro_prs_vector_2)
{
	uint32_t tmp;

	tmp = mac_rx_sts_3_get();
	*sw_ro_prs_vector_2 = (tmp & ((uint32_t)SW_RO_PRS_VECTOR_2_MASK)) >> SW_RO_PRS_VECTOR_2_OFFSET;
}
static __inline uint32_t mac_rx_sts_4_sw_ro_prs_vector_3_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_4_ADDR)) & SW_RO_PRS_VECTOR_3_MASK) >> SW_RO_PRS_VECTOR_3_OFFSET;
}
static __inline uint32_t mac_rx_sts_4_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_4_ADDR));
}
static __inline void mac_rx_sts_4_unpack(volatile uint32_t* sw_ro_prs_vector_3)
{
	uint32_t tmp;

	tmp = mac_rx_sts_4_get();
	*sw_ro_prs_vector_3 = (tmp & ((uint32_t)SW_RO_PRS_VECTOR_3_MASK)) >> SW_RO_PRS_VECTOR_3_OFFSET;
}
static __inline uint32_t mac_rx_sts_5_sw_ro_prd_vector_0_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_5_ADDR)) & SW_RO_PRD_VECTOR_0_MASK) >> SW_RO_PRD_VECTOR_0_OFFSET;
}
static __inline uint32_t mac_rx_sts_5_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_5_ADDR));
}
static __inline void mac_rx_sts_5_unpack(volatile uint32_t* sw_ro_prd_vector_0)
{
	uint32_t tmp;

	tmp = mac_rx_sts_5_get();
	*sw_ro_prd_vector_0 = (tmp & ((uint32_t)SW_RO_PRD_VECTOR_0_MASK)) >> SW_RO_PRD_VECTOR_0_OFFSET;
}
static __inline uint32_t mac_rx_sts_6_sw_ro_prd_vector_1_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_6_ADDR)) & SW_RO_PRD_VECTOR_1_MASK) >> SW_RO_PRD_VECTOR_1_OFFSET;
}
static __inline uint32_t mac_rx_sts_6_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_6_ADDR));
}
static __inline void mac_rx_sts_6_unpack(volatile uint32_t* sw_ro_prd_vector_1)
{
	uint32_t tmp;

	tmp = mac_rx_sts_6_get();
	*sw_ro_prd_vector_1 = (tmp & ((uint32_t)SW_RO_PRD_VECTOR_1_MASK)) >> SW_RO_PRD_VECTOR_1_OFFSET;
}
static __inline uint32_t mac_rx_sts_7_sw_ro_prd_vector_2_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_7_ADDR)) & SW_RO_PRD_VECTOR_2_MASK) >> SW_RO_PRD_VECTOR_2_OFFSET;
}
static __inline uint32_t mac_rx_sts_7_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_7_ADDR));
}
static __inline void mac_rx_sts_7_unpack(volatile uint32_t* sw_ro_prd_vector_2)
{
	uint32_t tmp;

	tmp = mac_rx_sts_7_get();
	*sw_ro_prd_vector_2 = (tmp & ((uint32_t)SW_RO_PRD_VECTOR_2_MASK)) >> SW_RO_PRD_VECTOR_2_OFFSET;
}
static __inline uint32_t mac_rx_sts_8_sw_ro_prd_vector_3_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_8_ADDR)) & SW_RO_PRD_VECTOR_3_MASK) >> SW_RO_PRD_VECTOR_3_OFFSET;
}
static __inline uint32_t mac_rx_sts_8_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_8_ADDR));
}
static __inline void mac_rx_sts_8_unpack(volatile uint32_t* sw_ro_prd_vector_3)
{
	uint32_t tmp;

	tmp = mac_rx_sts_8_get();
	*sw_ro_prd_vector_3 = (tmp & ((uint32_t)SW_RO_PRD_VECTOR_3_MASK)) >> SW_RO_PRD_VECTOR_3_OFFSET;
}
static __inline uint32_t mac_rx_sts_9_sw_ro_resp_tx_rate_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_9_ADDR)) & SW_RO_RESP_TX_RATE_MASK) >> SW_RO_RESP_TX_RATE_OFFSET;
}
static __inline uint32_t mac_rx_sts_9_sw_ro_psdu_mpdu_cnt_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_9_ADDR)) & SW_RO_PSDU_MPDU_CNT_MASK) >> SW_RO_PSDU_MPDU_CNT_OFFSET;
}
static __inline uint32_t mac_rx_sts_9_sw_ro_psdu_byte_cnt_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_9_ADDR)) & SW_RO_PSDU_BYTE_CNT_MASK) >> SW_RO_PSDU_BYTE_CNT_OFFSET;
}
static __inline uint32_t mac_rx_sts_9_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_9_ADDR));
}
static __inline void mac_rx_sts_9_unpack(volatile uint32_t* sw_ro_resp_tx_rate, volatile uint32_t* sw_ro_psdu_mpdu_cnt, volatile uint32_t* sw_ro_psdu_byte_cnt)
{
	uint32_t tmp;

	tmp = mac_rx_sts_9_get();
	*sw_ro_resp_tx_rate = (tmp & ((uint32_t)SW_RO_RESP_TX_RATE_MASK)) >> SW_RO_RESP_TX_RATE_OFFSET;
	*sw_ro_psdu_mpdu_cnt = (tmp & ((uint32_t)SW_RO_PSDU_MPDU_CNT_MASK)) >> SW_RO_PSDU_MPDU_CNT_OFFSET;
	*sw_ro_psdu_byte_cnt = (tmp & ((uint32_t)SW_RO_PSDU_BYTE_CNT_MASK)) >> SW_RO_PSDU_BYTE_CNT_OFFSET;
}
static __inline uint32_t mac_rx_sts_10_sw_ro_ppdu_timestamp_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_10_ADDR)) & SW_RO_PPDU_TIMESTAMP_MASK) >> SW_RO_PPDU_TIMESTAMP_OFFSET;
}
static __inline uint32_t mac_rx_sts_10_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_10_ADDR));
}
static __inline void mac_rx_sts_10_unpack(volatile uint32_t* sw_ro_ppdu_timestamp)
{
	uint32_t tmp;

	tmp = mac_rx_sts_10_get();
	*sw_ro_ppdu_timestamp = (tmp & ((uint32_t)SW_RO_PPDU_TIMESTAMP_MASK)) >> SW_RO_PPDU_TIMESTAMP_OFFSET;
}
static __inline uint32_t mac_rx_sts_11_sw_ro_decrypt_head_byte_cnt_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_11_ADDR)) & SW_RO_DECRYPT_HEAD_BYTE_CNT_MASK) >> SW_RO_DECRYPT_HEAD_BYTE_CNT_OFFSET;
}
static __inline uint32_t mac_rx_sts_11_sw_ro_rx_search_node_idx_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_11_ADDR)) & SW_RO_RX_SEARCH_NODE_IDX_MASK) >> SW_RO_RX_SEARCH_NODE_IDX_OFFSET;
}
static __inline uint32_t mac_rx_sts_11_sw_ro_decrypt_sts_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_11_ADDR)) & SW_RO_DECRYPT_STS_MASK) >> SW_RO_DECRYPT_STS_OFFSET;
}
static __inline uint32_t mac_rx_sts_11_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_11_ADDR));
}
static __inline void mac_rx_sts_11_unpack(volatile uint32_t* sw_ro_decrypt_head_byte_cnt, volatile uint32_t* sw_ro_rx_search_node_idx, volatile uint32_t* sw_ro_decrypt_sts)
{
	uint32_t tmp;

	tmp = mac_rx_sts_11_get();
	*sw_ro_decrypt_head_byte_cnt = (tmp & ((uint32_t)SW_RO_DECRYPT_HEAD_BYTE_CNT_MASK)) >> SW_RO_DECRYPT_HEAD_BYTE_CNT_OFFSET;
	*sw_ro_rx_search_node_idx = (tmp & ((uint32_t)SW_RO_RX_SEARCH_NODE_IDX_MASK)) >> SW_RO_RX_SEARCH_NODE_IDX_OFFSET;
	*sw_ro_decrypt_sts = (tmp & ((uint32_t)SW_RO_DECRYPT_STS_MASK)) >> SW_RO_DECRYPT_STS_OFFSET;
}
static __inline uint32_t mac_rx_sts_12_sw_ro_decrypt_head_0_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_12_ADDR)) & SW_RO_DECRYPT_HEAD_0_MASK) >> SW_RO_DECRYPT_HEAD_0_OFFSET;
}
static __inline uint32_t mac_rx_sts_12_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_12_ADDR));
}
static __inline void mac_rx_sts_12_unpack(volatile uint32_t* sw_ro_decrypt_head_0)
{
	uint32_t tmp;

	tmp = mac_rx_sts_12_get();
	*sw_ro_decrypt_head_0 = (tmp & ((uint32_t)SW_RO_DECRYPT_HEAD_0_MASK)) >> SW_RO_DECRYPT_HEAD_0_OFFSET;
}
static __inline uint32_t mac_rx_sts_13_sw_ro_decrypt_head_1_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_13_ADDR)) & SW_RO_DECRYPT_HEAD_1_MASK) >> SW_RO_DECRYPT_HEAD_1_OFFSET;
}
static __inline uint32_t mac_rx_sts_13_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_13_ADDR));
}
static __inline void mac_rx_sts_13_unpack(volatile uint32_t* sw_ro_decrypt_head_1)
{
	uint32_t tmp;

	tmp = mac_rx_sts_13_get();
	*sw_ro_decrypt_head_1 = (tmp & ((uint32_t)SW_RO_DECRYPT_HEAD_1_MASK)) >> SW_RO_DECRYPT_HEAD_1_OFFSET;
}
static __inline uint32_t mac_rx_sts_14_sw_ro_bar_pld_word_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_14_ADDR)) & SW_RO_BAR_PLD_WORD_MASK) >> SW_RO_BAR_PLD_WORD_OFFSET;
}
static __inline uint32_t mac_rx_sts_14_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_14_ADDR));
}
static __inline void mac_rx_sts_14_unpack(volatile uint32_t* sw_ro_bar_pld_word)
{
	uint32_t tmp;

	tmp = mac_rx_sts_14_get();
	*sw_ro_bar_pld_word = (tmp & ((uint32_t)SW_RO_BAR_PLD_WORD_MASK)) >> SW_RO_BAR_PLD_WORD_OFFSET;
}
static __inline uint32_t mac_rx_sts_15_sw_ro_ba_bitmap_low_word_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_15_ADDR)) & SW_RO_BA_BITMAP_LOW_WORD_MASK) >> SW_RO_BA_BITMAP_LOW_WORD_OFFSET;
}
static __inline uint32_t mac_rx_sts_15_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_15_ADDR));
}
static __inline void mac_rx_sts_15_unpack(volatile uint32_t* sw_ro_ba_bitmap_low_word)
{
	uint32_t tmp;

	tmp = mac_rx_sts_15_get();
	*sw_ro_ba_bitmap_low_word = (tmp & ((uint32_t)SW_RO_BA_BITMAP_LOW_WORD_MASK)) >> SW_RO_BA_BITMAP_LOW_WORD_OFFSET;
}
static __inline uint32_t mac_rx_sts_16_sw_ro_ba_bitmap_high_word_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_16_ADDR)) & SW_RO_BA_BITMAP_HIGH_WORD_MASK) >> SW_RO_BA_BITMAP_HIGH_WORD_OFFSET;
}
static __inline uint32_t mac_rx_sts_16_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_16_ADDR));
}
static __inline void mac_rx_sts_16_unpack(volatile uint32_t* sw_ro_ba_bitmap_high_word)
{
	uint32_t tmp;

	tmp = mac_rx_sts_16_get();
	*sw_ro_ba_bitmap_high_word = (tmp & ((uint32_t)SW_RO_BA_BITMAP_HIGH_WORD_MASK)) >> SW_RO_BA_BITMAP_HIGH_WORD_OFFSET;
}
static __inline uint32_t mac_rx_sts_17_sw_ro_ba_tid_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_17_ADDR)) & SW_RO_BA_TID_MASK) >> SW_RO_BA_TID_OFFSET;
}
static __inline uint32_t mac_rx_sts_17_sw_ro_ba_seq_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_17_ADDR)) & SW_RO_BA_SEQ_MASK) >> SW_RO_BA_SEQ_OFFSET;
}
static __inline uint32_t mac_rx_sts_17_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_17_ADDR));
}
static __inline void mac_rx_sts_17_unpack(volatile uint32_t* sw_ro_ba_tid, volatile uint32_t* sw_ro_ba_seq)
{
	uint32_t tmp;

	tmp = mac_rx_sts_17_get();
	*sw_ro_ba_tid = (tmp & ((uint32_t)SW_RO_BA_TID_MASK)) >> SW_RO_BA_TID_OFFSET;
	*sw_ro_ba_seq = (tmp & ((uint32_t)SW_RO_BA_SEQ_MASK)) >> SW_RO_BA_SEQ_OFFSET;
}
static __inline uint32_t mac_rx_sts_18_sw_ro_bcn_timestamp_store_cnt_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_18_ADDR)) & SW_RO_BCN_TIMESTAMP_STORE_CNT_MASK) >> SW_RO_BCN_TIMESTAMP_STORE_CNT_OFFSET;
}
static __inline uint32_t mac_rx_sts_18_sw_ro_bcn_tim_store_byte_cnt_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_18_ADDR)) & SW_RO_BCN_TIM_STORE_BYTE_CNT_MASK) >> SW_RO_BCN_TIM_STORE_BYTE_CNT_OFFSET;
}
static __inline uint32_t mac_rx_sts_18_sw_ro_bcn_timestamp_store_done_cnt_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_18_ADDR)) & SW_RO_BCN_TIMESTAMP_STORE_DONE_CNT_MASK) >> SW_RO_BCN_TIMESTAMP_STORE_DONE_CNT_OFFSET;
}
static __inline uint32_t mac_rx_sts_18_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_18_ADDR));
}
static __inline void mac_rx_sts_18_unpack(volatile uint32_t* sw_ro_bcn_timestamp_store_cnt, volatile uint32_t* sw_ro_bcn_tim_store_byte_cnt, volatile uint32_t* sw_ro_bcn_timestamp_store_done_cnt)
{
	uint32_t tmp;

	tmp = mac_rx_sts_18_get();
	*sw_ro_bcn_timestamp_store_cnt = (tmp & ((uint32_t)SW_RO_BCN_TIMESTAMP_STORE_CNT_MASK)) >> SW_RO_BCN_TIMESTAMP_STORE_CNT_OFFSET;
	*sw_ro_bcn_tim_store_byte_cnt = (tmp & ((uint32_t)SW_RO_BCN_TIM_STORE_BYTE_CNT_MASK)) >> SW_RO_BCN_TIM_STORE_BYTE_CNT_OFFSET;
	*sw_ro_bcn_timestamp_store_done_cnt = (tmp & ((uint32_t)SW_RO_BCN_TIMESTAMP_STORE_DONE_CNT_MASK)) >> SW_RO_BCN_TIMESTAMP_STORE_DONE_CNT_OFFSET;
}
static __inline uint32_t mac_rx_sts_19_sw_ro_bcn_timestamp_r_0_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_19_ADDR)) & SW_RO_BCN_TIMESTAMP_R_0_MASK) >> SW_RO_BCN_TIMESTAMP_R_0_OFFSET;
}
static __inline uint32_t mac_rx_sts_19_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_19_ADDR));
}
static __inline void mac_rx_sts_19_unpack(volatile uint32_t* sw_ro_bcn_timestamp_r_0)
{
	uint32_t tmp;

	tmp = mac_rx_sts_19_get();
	*sw_ro_bcn_timestamp_r_0 = (tmp & ((uint32_t)SW_RO_BCN_TIMESTAMP_R_0_MASK)) >> SW_RO_BCN_TIMESTAMP_R_0_OFFSET;
}
static __inline uint32_t mac_rx_sts_20_sw_ro_bcn_timestamp_r_1_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_20_ADDR)) & SW_RO_BCN_TIMESTAMP_R_1_MASK) >> SW_RO_BCN_TIMESTAMP_R_1_OFFSET;
}
static __inline uint32_t mac_rx_sts_20_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_20_ADDR));
}
static __inline void mac_rx_sts_20_unpack(volatile uint32_t* sw_ro_bcn_timestamp_r_1)
{
	uint32_t tmp;

	tmp = mac_rx_sts_20_get();
	*sw_ro_bcn_timestamp_r_1 = (tmp & ((uint32_t)SW_RO_BCN_TIMESTAMP_R_1_MASK)) >> SW_RO_BCN_TIMESTAMP_R_1_OFFSET;
}
static __inline uint32_t mac_rx_sts_21_sw_ro_mac_rx_fsm_data_done_reason_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_21_ADDR)) & SW_RO_MAC_RX_FSM_DATA_DONE_REASON_MASK) >> SW_RO_MAC_RX_FSM_DATA_DONE_REASON_OFFSET;
}
static __inline uint32_t mac_rx_sts_21_sw_ro_rx_node_search_fsm_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_21_ADDR)) & SW_RO_RX_NODE_SEARCH_FSM_MASK) >> SW_RO_RX_NODE_SEARCH_FSM_OFFSET;
}
static __inline uint32_t mac_rx_sts_21_sw_ro_resp_trig_fsm_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_21_ADDR)) & SW_RO_RESP_TRIG_FSM_MASK) >> SW_RO_RESP_TRIG_FSM_OFFSET;
}
static __inline uint32_t mac_rx_sts_21_sw_ro_rx_mpdu_fsm_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_21_ADDR)) & SW_RO_RX_MPDU_FSM_MASK) >> SW_RO_RX_MPDU_FSM_OFFSET;
}
static __inline uint32_t mac_rx_sts_21_sw_ro_rx_psdu_fsm_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_21_ADDR)) & SW_RO_RX_PSDU_FSM_MASK) >> SW_RO_RX_PSDU_FSM_OFFSET;
}
static __inline uint32_t mac_rx_sts_21_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_21_ADDR));
}
static __inline void mac_rx_sts_21_unpack(volatile uint32_t* sw_ro_mac_rx_fsm_data_done_reason, volatile uint32_t* sw_ro_rx_node_search_fsm, volatile uint32_t* sw_ro_resp_trig_fsm, volatile uint32_t* sw_ro_rx_mpdu_fsm, volatile uint32_t* sw_ro_rx_psdu_fsm)
{
	uint32_t tmp;

	tmp = mac_rx_sts_21_get();
	*sw_ro_mac_rx_fsm_data_done_reason = (tmp & ((uint32_t)SW_RO_MAC_RX_FSM_DATA_DONE_REASON_MASK)) >> SW_RO_MAC_RX_FSM_DATA_DONE_REASON_OFFSET;
	*sw_ro_rx_node_search_fsm = (tmp & ((uint32_t)SW_RO_RX_NODE_SEARCH_FSM_MASK)) >> SW_RO_RX_NODE_SEARCH_FSM_OFFSET;
	*sw_ro_resp_trig_fsm = (tmp & ((uint32_t)SW_RO_RESP_TRIG_FSM_MASK)) >> SW_RO_RESP_TRIG_FSM_OFFSET;
	*sw_ro_rx_mpdu_fsm = (tmp & ((uint32_t)SW_RO_RX_MPDU_FSM_MASK)) >> SW_RO_RX_MPDU_FSM_OFFSET;
	*sw_ro_rx_psdu_fsm = (tmp & ((uint32_t)SW_RO_RX_PSDU_FSM_MASK)) >> SW_RO_RX_PSDU_FSM_OFFSET;
}
static __inline uint32_t mac_rx_sts_22_sw_ro_mac_rx_fsm_start_timeout_cnt_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_22_ADDR)) & SW_RO_MAC_RX_FSM_START_TIMEOUT_CNT_MASK) >> SW_RO_MAC_RX_FSM_START_TIMEOUT_CNT_OFFSET;
}
static __inline uint32_t mac_rx_sts_22_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_22_ADDR));
}
static __inline void mac_rx_sts_22_unpack(volatile uint32_t* sw_ro_mac_rx_fsm_start_timeout_cnt)
{
	uint32_t tmp;

	tmp = mac_rx_sts_22_get();
	*sw_ro_mac_rx_fsm_start_timeout_cnt = (tmp & ((uint32_t)SW_RO_MAC_RX_FSM_START_TIMEOUT_CNT_MASK)) >> SW_RO_MAC_RX_FSM_START_TIMEOUT_CNT_OFFSET;
}
static __inline uint32_t mac_rx_sts_23_sw_ro_mac_rx_fsm_done_timeout_cnt_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_23_ADDR)) & SW_RO_MAC_RX_FSM_DONE_TIMEOUT_CNT_MASK) >> SW_RO_MAC_RX_FSM_DONE_TIMEOUT_CNT_OFFSET;
}
static __inline uint32_t mac_rx_sts_23_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_23_ADDR));
}
static __inline void mac_rx_sts_23_unpack(volatile uint32_t* sw_ro_mac_rx_fsm_done_timeout_cnt)
{
	uint32_t tmp;

	tmp = mac_rx_sts_23_get();
	*sw_ro_mac_rx_fsm_done_timeout_cnt = (tmp & ((uint32_t)SW_RO_MAC_RX_FSM_DONE_TIMEOUT_CNT_MASK)) >> SW_RO_MAC_RX_FSM_DONE_TIMEOUT_CNT_OFFSET;
}
static __inline uint32_t mac_rx_sts_24_sw_ro_ppdu_mpdu_cnt_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_24_ADDR)) & SW_RO_PPDU_MPDU_CNT_MASK) >> SW_RO_PPDU_MPDU_CNT_OFFSET;
}
static __inline uint32_t mac_rx_sts_24_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_24_ADDR));
}
static __inline void mac_rx_sts_24_unpack(volatile uint32_t* sw_ro_ppdu_mpdu_cnt)
{
	uint32_t tmp;

	tmp = mac_rx_sts_24_get();
	*sw_ro_ppdu_mpdu_cnt = (tmp & ((uint32_t)SW_RO_PPDU_MPDU_CNT_MASK)) >> SW_RO_PPDU_MPDU_CNT_OFFSET;
}
static __inline uint32_t mac_rx_sts_25_sw_ro_delay_resp_trig_cnt_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_25_ADDR)) & SW_RO_DELAY_RESP_TRIG_CNT_MASK) >> SW_RO_DELAY_RESP_TRIG_CNT_OFFSET;
}
static __inline uint32_t mac_rx_sts_25_sw_ro_normal_resp_trig_cnt_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_25_ADDR)) & SW_RO_NORMAL_RESP_TRIG_CNT_MASK) >> SW_RO_NORMAL_RESP_TRIG_CNT_OFFSET;
}
static __inline uint32_t mac_rx_sts_25_sw_ro_resp_trig_sts_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_25_ADDR)) & SW_RO_RESP_TRIG_STS_MASK) >> SW_RO_RESP_TRIG_STS_OFFSET;
}
static __inline uint32_t mac_rx_sts_25_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_25_ADDR));
}
static __inline void mac_rx_sts_25_unpack(volatile uint32_t* sw_ro_delay_resp_trig_cnt, volatile uint32_t* sw_ro_normal_resp_trig_cnt, volatile uint32_t* sw_ro_resp_trig_sts)
{
	uint32_t tmp;

	tmp = mac_rx_sts_25_get();
	*sw_ro_delay_resp_trig_cnt = (tmp & ((uint32_t)SW_RO_DELAY_RESP_TRIG_CNT_MASK)) >> SW_RO_DELAY_RESP_TRIG_CNT_OFFSET;
	*sw_ro_normal_resp_trig_cnt = (tmp & ((uint32_t)SW_RO_NORMAL_RESP_TRIG_CNT_MASK)) >> SW_RO_NORMAL_RESP_TRIG_CNT_OFFSET;
	*sw_ro_resp_trig_sts = (tmp & ((uint32_t)SW_RO_RESP_TRIG_STS_MASK)) >> SW_RO_RESP_TRIG_STS_OFFSET;
}
static __inline uint32_t mac_rx_sts_26_sw_ro_rx_crc_check_sts_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_26_ADDR)) & SW_RO_RX_CRC_CHECK_STS_MASK) >> SW_RO_RX_CRC_CHECK_STS_OFFSET;
}
static __inline uint32_t mac_rx_sts_26_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_26_ADDR));
}
static __inline void mac_rx_sts_26_unpack(volatile uint32_t* sw_ro_rx_crc_check_sts)
{
	uint32_t tmp;

	tmp = mac_rx_sts_26_get();
	*sw_ro_rx_crc_check_sts = (tmp & ((uint32_t)SW_RO_RX_CRC_CHECK_STS_MASK)) >> SW_RO_RX_CRC_CHECK_STS_OFFSET;
}
static __inline uint32_t mac_rx_sts_27_sw_ro_rx_fifo_wr_byte_num_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_27_ADDR)) & SW_RO_RX_FIFO_WR_BYTE_NUM_MASK) >> SW_RO_RX_FIFO_WR_BYTE_NUM_OFFSET;
}
static __inline uint32_t mac_rx_sts_27_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_27_ADDR));
}
static __inline void mac_rx_sts_27_unpack(volatile uint32_t* sw_ro_rx_fifo_wr_byte_num)
{
	uint32_t tmp;

	tmp = mac_rx_sts_27_get();
	*sw_ro_rx_fifo_wr_byte_num = (tmp & ((uint32_t)SW_RO_RX_FIFO_WR_BYTE_NUM_MASK)) >> SW_RO_RX_FIFO_WR_BYTE_NUM_OFFSET;
}
static __inline uint32_t mac_rx_sts_28_sw_ro_rx_fifo_rd_byte_num_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_28_ADDR)) & SW_RO_RX_FIFO_RD_BYTE_NUM_MASK) >> SW_RO_RX_FIFO_RD_BYTE_NUM_OFFSET;
}
static __inline uint32_t mac_rx_sts_28_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_28_ADDR));
}
static __inline void mac_rx_sts_28_unpack(volatile uint32_t* sw_ro_rx_fifo_rd_byte_num)
{
	uint32_t tmp;

	tmp = mac_rx_sts_28_get();
	*sw_ro_rx_fifo_rd_byte_num = (tmp & ((uint32_t)SW_RO_RX_FIFO_RD_BYTE_NUM_MASK)) >> SW_RO_RX_FIFO_RD_BYTE_NUM_OFFSET;
}
static __inline uint32_t mac_rx_sts_35_sw_ro_mpdu_byte_cnt_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_35_ADDR)) & SW_RO_MPDU_BYTE_CNT_MASK) >> SW_RO_MPDU_BYTE_CNT_OFFSET;
}
static __inline uint32_t mac_rx_sts_35_sw_ro_mpdu_byte_len_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_35_ADDR)) & SW_RO_MPDU_BYTE_LEN_MASK) >> SW_RO_MPDU_BYTE_LEN_OFFSET;
}
static __inline uint32_t mac_rx_sts_35_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_35_ADDR));
}
static __inline void mac_rx_sts_35_unpack(volatile uint32_t* sw_ro_mpdu_byte_cnt, volatile uint32_t* sw_ro_mpdu_byte_len)
{
	uint32_t tmp;

	tmp = mac_rx_sts_35_get();
	*sw_ro_mpdu_byte_cnt = (tmp & ((uint32_t)SW_RO_MPDU_BYTE_CNT_MASK)) >> SW_RO_MPDU_BYTE_CNT_OFFSET;
	*sw_ro_mpdu_byte_len = (tmp & ((uint32_t)SW_RO_MPDU_BYTE_LEN_MASK)) >> SW_RO_MPDU_BYTE_LEN_OFFSET;
}
static __inline uint32_t mac_rx_sts_36_sw_ro_frame_body_byte_len_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_36_ADDR)) & SW_RO_FRAME_BODY_BYTE_LEN_MASK) >> SW_RO_FRAME_BODY_BYTE_LEN_OFFSET;
}
static __inline uint32_t mac_rx_sts_36_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_36_ADDR));
}
static __inline void mac_rx_sts_36_unpack(volatile uint32_t* sw_ro_frame_body_byte_len)
{
	uint32_t tmp;

	tmp = mac_rx_sts_36_get();
	*sw_ro_frame_body_byte_len = (tmp & ((uint32_t)SW_RO_FRAME_BODY_BYTE_LEN_MASK)) >> SW_RO_FRAME_BODY_BYTE_LEN_OFFSET;
}
static __inline uint32_t mac_rx_sts_37_sw_ro_decrypt_head_byte_num_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_37_ADDR)) & SW_RO_DECRYPT_HEAD_BYTE_NUM_MASK) >> SW_RO_DECRYPT_HEAD_BYTE_NUM_OFFSET;
}
static __inline uint32_t mac_rx_sts_37_sw_ro_decrypt_pure_payload_byte_num_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_37_ADDR)) & SW_RO_DECRYPT_PURE_PAYLOAD_BYTE_NUM_MASK) >> SW_RO_DECRYPT_PURE_PAYLOAD_BYTE_NUM_OFFSET;
}
static __inline uint32_t mac_rx_sts_37_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_37_ADDR));
}
static __inline void mac_rx_sts_37_unpack(volatile uint32_t* sw_ro_decrypt_head_byte_num, volatile uint32_t* sw_ro_decrypt_pure_payload_byte_num)
{
	uint32_t tmp;

	tmp = mac_rx_sts_37_get();
	*sw_ro_decrypt_head_byte_num = (tmp & ((uint32_t)SW_RO_DECRYPT_HEAD_BYTE_NUM_MASK)) >> SW_RO_DECRYPT_HEAD_BYTE_NUM_OFFSET;
	*sw_ro_decrypt_pure_payload_byte_num = (tmp & ((uint32_t)SW_RO_DECRYPT_PURE_PAYLOAD_BYTE_NUM_MASK)) >> SW_RO_DECRYPT_PURE_PAYLOAD_BYTE_NUM_OFFSET;
}
static __inline uint32_t mac_rx_sts_38_sw_ro_phy_rx_start_cnt_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_38_ADDR)) & SW_RO_PHY_RX_START_CNT_MASK) >> SW_RO_PHY_RX_START_CNT_OFFSET;
}
static __inline uint32_t mac_rx_sts_38_sw_ro_phy_rx_abort_cnt_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_38_ADDR)) & SW_RO_PHY_RX_ABORT_CNT_MASK) >> SW_RO_PHY_RX_ABORT_CNT_OFFSET;
}
static __inline uint32_t mac_rx_sts_38_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_38_ADDR));
}
static __inline void mac_rx_sts_38_unpack(volatile uint32_t* sw_ro_phy_rx_start_cnt, volatile uint32_t* sw_ro_phy_rx_abort_cnt)
{
	uint32_t tmp;

	tmp = mac_rx_sts_38_get();
	*sw_ro_phy_rx_start_cnt = (tmp & ((uint32_t)SW_RO_PHY_RX_START_CNT_MASK)) >> SW_RO_PHY_RX_START_CNT_OFFSET;
	*sw_ro_phy_rx_abort_cnt = (tmp & ((uint32_t)SW_RO_PHY_RX_ABORT_CNT_MASK)) >> SW_RO_PHY_RX_ABORT_CNT_OFFSET;
}
static __inline uint32_t mac_rx_sts_39_sw_ro_phy_rx_td_done_cnt_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_39_ADDR)) & SW_RO_PHY_RX_TD_DONE_CNT_MASK) >> SW_RO_PHY_RX_TD_DONE_CNT_OFFSET;
}
static __inline uint32_t mac_rx_sts_39_sw_ro_phy_rx_done_cnt_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_39_ADDR)) & SW_RO_PHY_RX_DONE_CNT_MASK) >> SW_RO_PHY_RX_DONE_CNT_OFFSET;
}
static __inline uint32_t mac_rx_sts_39_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_39_ADDR));
}
static __inline void mac_rx_sts_39_unpack(volatile uint32_t* sw_ro_phy_rx_td_done_cnt, volatile uint32_t* sw_ro_phy_rx_done_cnt)
{
	uint32_t tmp;

	tmp = mac_rx_sts_39_get();
	*sw_ro_phy_rx_td_done_cnt = (tmp & ((uint32_t)SW_RO_PHY_RX_TD_DONE_CNT_MASK)) >> SW_RO_PHY_RX_TD_DONE_CNT_OFFSET;
	*sw_ro_phy_rx_done_cnt = (tmp & ((uint32_t)SW_RO_PHY_RX_DONE_CNT_MASK)) >> SW_RO_PHY_RX_DONE_CNT_OFFSET;
}
static __inline uint32_t mac_rx_sts_44_sw_ro_rx_psdu_done_cnt_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_44_ADDR)) & SW_RO_RX_PSDU_DONE_CNT_MASK) >> SW_RO_RX_PSDU_DONE_CNT_OFFSET;
}
static __inline uint32_t mac_rx_sts_44_sw_ro_rx_psdu_start_cnt_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_44_ADDR)) & SW_RO_RX_PSDU_START_CNT_MASK) >> SW_RO_RX_PSDU_START_CNT_OFFSET;
}
static __inline uint32_t mac_rx_sts_44_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_44_ADDR));
}
static __inline void mac_rx_sts_44_unpack(volatile uint32_t* sw_ro_rx_psdu_done_cnt, volatile uint32_t* sw_ro_rx_psdu_start_cnt)
{
	uint32_t tmp;

	tmp = mac_rx_sts_44_get();
	*sw_ro_rx_psdu_done_cnt = (tmp & ((uint32_t)SW_RO_RX_PSDU_DONE_CNT_MASK)) >> SW_RO_RX_PSDU_DONE_CNT_OFFSET;
	*sw_ro_rx_psdu_start_cnt = (tmp & ((uint32_t)SW_RO_RX_PSDU_START_CNT_MASK)) >> SW_RO_RX_PSDU_START_CNT_OFFSET;
}
static __inline uint32_t mac_rx_sts_45_sw_ro_rx_mpdu_done_cnt_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_45_ADDR)) & SW_RO_RX_MPDU_DONE_CNT_MASK) >> SW_RO_RX_MPDU_DONE_CNT_OFFSET;
}
static __inline uint32_t mac_rx_sts_45_sw_ro_rx_mpdu_start_cnt_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_45_ADDR)) & SW_RO_RX_MPDU_START_CNT_MASK) >> SW_RO_RX_MPDU_START_CNT_OFFSET;
}
static __inline uint32_t mac_rx_sts_45_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_45_ADDR));
}
static __inline void mac_rx_sts_45_unpack(volatile uint32_t* sw_ro_rx_mpdu_done_cnt, volatile uint32_t* sw_ro_rx_mpdu_start_cnt)
{
	uint32_t tmp;

	tmp = mac_rx_sts_45_get();
	*sw_ro_rx_mpdu_done_cnt = (tmp & ((uint32_t)SW_RO_RX_MPDU_DONE_CNT_MASK)) >> SW_RO_RX_MPDU_DONE_CNT_OFFSET;
	*sw_ro_rx_mpdu_start_cnt = (tmp & ((uint32_t)SW_RO_RX_MPDU_START_CNT_MASK)) >> SW_RO_RX_MPDU_START_CNT_OFFSET;
}
static __inline uint32_t mac_rx_sts_46_sw_ro_fc_10byte_out_start_cnt_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_46_ADDR)) & SW_RO_FC_10BYTE_OUT_START_CNT_MASK) >> SW_RO_FC_10BYTE_OUT_START_CNT_OFFSET;
}
static __inline uint32_t mac_rx_sts_46_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_46_ADDR));
}
static __inline void mac_rx_sts_46_unpack(volatile uint32_t* sw_ro_fc_10byte_out_start_cnt)
{
	uint32_t tmp;

	tmp = mac_rx_sts_46_get();
	*sw_ro_fc_10byte_out_start_cnt = (tmp & ((uint32_t)SW_RO_FC_10BYTE_OUT_START_CNT_MASK)) >> SW_RO_FC_10BYTE_OUT_START_CNT_OFFSET;
}
static __inline uint32_t mac_rx_sts_47_sw_ro_mac_rxr_start_vector_0_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_47_ADDR)) & SW_RO_MAC_RXR_START_VECTOR_0_MASK) >> SW_RO_MAC_RXR_START_VECTOR_0_OFFSET;
}
static __inline uint32_t mac_rx_sts_47_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_47_ADDR));
}
static __inline void mac_rx_sts_47_unpack(volatile uint32_t* sw_ro_mac_rxr_start_vector_0)
{
	uint32_t tmp;

	tmp = mac_rx_sts_47_get();
	*sw_ro_mac_rxr_start_vector_0 = (tmp & ((uint32_t)SW_RO_MAC_RXR_START_VECTOR_0_MASK)) >> SW_RO_MAC_RXR_START_VECTOR_0_OFFSET;
}
static __inline uint32_t mac_rx_sts_48_sw_ro_mac_rxr_start_vector_1_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_48_ADDR)) & SW_RO_MAC_RXR_START_VECTOR_1_MASK) >> SW_RO_MAC_RXR_START_VECTOR_1_OFFSET;
}
static __inline uint32_t mac_rx_sts_48_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_48_ADDR));
}
static __inline void mac_rx_sts_48_unpack(volatile uint32_t* sw_ro_mac_rxr_start_vector_1)
{
	uint32_t tmp;

	tmp = mac_rx_sts_48_get();
	*sw_ro_mac_rxr_start_vector_1 = (tmp & ((uint32_t)SW_RO_MAC_RXR_START_VECTOR_1_MASK)) >> SW_RO_MAC_RXR_START_VECTOR_1_OFFSET;
}
static __inline uint32_t mac_rx_sts_49_sw_ro_mac_rxr_start_vector_2_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_49_ADDR)) & SW_RO_MAC_RXR_START_VECTOR_2_MASK) >> SW_RO_MAC_RXR_START_VECTOR_2_OFFSET;
}
static __inline uint32_t mac_rx_sts_49_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_49_ADDR));
}
static __inline void mac_rx_sts_49_unpack(volatile uint32_t* sw_ro_mac_rxr_start_vector_2)
{
	uint32_t tmp;

	tmp = mac_rx_sts_49_get();
	*sw_ro_mac_rxr_start_vector_2 = (tmp & ((uint32_t)SW_RO_MAC_RXR_START_VECTOR_2_MASK)) >> SW_RO_MAC_RXR_START_VECTOR_2_OFFSET;
}
static __inline uint32_t mac_rx_sts_50_sw_ro_mac_rxr_start_vector_3_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_50_ADDR)) & SW_RO_MAC_RXR_START_VECTOR_3_MASK) >> SW_RO_MAC_RXR_START_VECTOR_3_OFFSET;
}
static __inline uint32_t mac_rx_sts_50_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_50_ADDR));
}
static __inline void mac_rx_sts_50_unpack(volatile uint32_t* sw_ro_mac_rxr_start_vector_3)
{
	uint32_t tmp;

	tmp = mac_rx_sts_50_get();
	*sw_ro_mac_rxr_start_vector_3 = (tmp & ((uint32_t)SW_RO_MAC_RXR_START_VECTOR_3_MASK)) >> SW_RO_MAC_RXR_START_VECTOR_3_OFFSET;
}
static __inline uint32_t mac_rx_sts_51_sw_ro_mac_rxr_done_vector_0_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_51_ADDR)) & SW_RO_MAC_RXR_DONE_VECTOR_0_MASK) >> SW_RO_MAC_RXR_DONE_VECTOR_0_OFFSET;
}
static __inline uint32_t mac_rx_sts_51_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_51_ADDR));
}
static __inline void mac_rx_sts_51_unpack(volatile uint32_t* sw_ro_mac_rxr_done_vector_0)
{
	uint32_t tmp;

	tmp = mac_rx_sts_51_get();
	*sw_ro_mac_rxr_done_vector_0 = (tmp & ((uint32_t)SW_RO_MAC_RXR_DONE_VECTOR_0_MASK)) >> SW_RO_MAC_RXR_DONE_VECTOR_0_OFFSET;
}
static __inline uint32_t mac_rx_sts_52_sw_ro_mac_rxr_done_vector_1_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_52_ADDR)) & SW_RO_MAC_RXR_DONE_VECTOR_1_MASK) >> SW_RO_MAC_RXR_DONE_VECTOR_1_OFFSET;
}
static __inline uint32_t mac_rx_sts_52_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_52_ADDR));
}
static __inline void mac_rx_sts_52_unpack(volatile uint32_t* sw_ro_mac_rxr_done_vector_1)
{
	uint32_t tmp;

	tmp = mac_rx_sts_52_get();
	*sw_ro_mac_rxr_done_vector_1 = (tmp & ((uint32_t)SW_RO_MAC_RXR_DONE_VECTOR_1_MASK)) >> SW_RO_MAC_RXR_DONE_VECTOR_1_OFFSET;
}
static __inline uint32_t mac_rx_sts_53_sw_ro_mac_rxr_done_vector_2_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_53_ADDR)) & SW_RO_MAC_RXR_DONE_VECTOR_2_MASK) >> SW_RO_MAC_RXR_DONE_VECTOR_2_OFFSET;
}
static __inline uint32_t mac_rx_sts_53_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_53_ADDR));
}
static __inline void mac_rx_sts_53_unpack(volatile uint32_t* sw_ro_mac_rxr_done_vector_2)
{
	uint32_t tmp;

	tmp = mac_rx_sts_53_get();
	*sw_ro_mac_rxr_done_vector_2 = (tmp & ((uint32_t)SW_RO_MAC_RXR_DONE_VECTOR_2_MASK)) >> SW_RO_MAC_RXR_DONE_VECTOR_2_OFFSET;
}
static __inline uint32_t mac_rx_sts_54_sw_ro_mac_rxr_done_vector_3_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_54_ADDR)) & SW_RO_MAC_RXR_DONE_VECTOR_3_MASK) >> SW_RO_MAC_RXR_DONE_VECTOR_3_OFFSET;
}
static __inline uint32_t mac_rx_sts_54_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_54_ADDR));
}
static __inline void mac_rx_sts_54_unpack(volatile uint32_t* sw_ro_mac_rxr_done_vector_3)
{
	uint32_t tmp;

	tmp = mac_rx_sts_54_get();
	*sw_ro_mac_rxr_done_vector_3 = (tmp & ((uint32_t)SW_RO_MAC_RXR_DONE_VECTOR_3_MASK)) >> SW_RO_MAC_RXR_DONE_VECTOR_3_OFFSET;
}
static __inline uint32_t mac_rx_sts_55_sw_ro_txq_rx_done_vector_0_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_55_ADDR)) & SW_RO_TXQ_RX_DONE_VECTOR_0_MASK) >> SW_RO_TXQ_RX_DONE_VECTOR_0_OFFSET;
}
static __inline uint32_t mac_rx_sts_55_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_55_ADDR));
}
static __inline void mac_rx_sts_55_unpack(volatile uint32_t* sw_ro_txq_rx_done_vector_0)
{
	uint32_t tmp;

	tmp = mac_rx_sts_55_get();
	*sw_ro_txq_rx_done_vector_0 = (tmp & ((uint32_t)SW_RO_TXQ_RX_DONE_VECTOR_0_MASK)) >> SW_RO_TXQ_RX_DONE_VECTOR_0_OFFSET;
}
static __inline uint32_t mac_rx_sts_56_sw_ro_txq_rx_done_vector_1_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_56_ADDR)) & SW_RO_TXQ_RX_DONE_VECTOR_1_MASK) >> SW_RO_TXQ_RX_DONE_VECTOR_1_OFFSET;
}
static __inline uint32_t mac_rx_sts_56_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_56_ADDR));
}
static __inline void mac_rx_sts_56_unpack(volatile uint32_t* sw_ro_txq_rx_done_vector_1)
{
	uint32_t tmp;

	tmp = mac_rx_sts_56_get();
	*sw_ro_txq_rx_done_vector_1 = (tmp & ((uint32_t)SW_RO_TXQ_RX_DONE_VECTOR_1_MASK)) >> SW_RO_TXQ_RX_DONE_VECTOR_1_OFFSET;
}
static __inline uint32_t mac_rx_sts_57_sw_ro_txq_rx_done_vector_2_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_57_ADDR)) & SW_RO_TXQ_RX_DONE_VECTOR_2_MASK) >> SW_RO_TXQ_RX_DONE_VECTOR_2_OFFSET;
}
static __inline uint32_t mac_rx_sts_57_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_57_ADDR));
}
static __inline void mac_rx_sts_57_unpack(volatile uint32_t* sw_ro_txq_rx_done_vector_2)
{
	uint32_t tmp;

	tmp = mac_rx_sts_57_get();
	*sw_ro_txq_rx_done_vector_2 = (tmp & ((uint32_t)SW_RO_TXQ_RX_DONE_VECTOR_2_MASK)) >> SW_RO_TXQ_RX_DONE_VECTOR_2_OFFSET;
}
static __inline uint32_t mac_rx_sts_58_sw_ro_txq_rx_done_vector_3_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_58_ADDR)) & SW_RO_TXQ_RX_DONE_VECTOR_3_MASK) >> SW_RO_TXQ_RX_DONE_VECTOR_3_OFFSET;
}
static __inline uint32_t mac_rx_sts_58_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_58_ADDR));
}
static __inline void mac_rx_sts_58_unpack(volatile uint32_t* sw_ro_txq_rx_done_vector_3)
{
	uint32_t tmp;

	tmp = mac_rx_sts_58_get();
	*sw_ro_txq_rx_done_vector_3 = (tmp & ((uint32_t)SW_RO_TXQ_RX_DONE_VECTOR_3_MASK)) >> SW_RO_TXQ_RX_DONE_VECTOR_3_OFFSET;
}
static __inline uint32_t mac_rx_sts_59_sw_ro_txq_rx_done_vector_4_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_59_ADDR)) & SW_RO_TXQ_RX_DONE_VECTOR_4_MASK) >> SW_RO_TXQ_RX_DONE_VECTOR_4_OFFSET;
}
static __inline uint32_t mac_rx_sts_59_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_59_ADDR));
}
static __inline void mac_rx_sts_59_unpack(volatile uint32_t* sw_ro_txq_rx_done_vector_4)
{
	uint32_t tmp;

	tmp = mac_rx_sts_59_get();
	*sw_ro_txq_rx_done_vector_4 = (tmp & ((uint32_t)SW_RO_TXQ_RX_DONE_VECTOR_4_MASK)) >> SW_RO_TXQ_RX_DONE_VECTOR_4_OFFSET;
}
static __inline uint32_t mac_rx_sts_60_sw_ro_txq_rx_done_vector_5_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_60_ADDR)) & SW_RO_TXQ_RX_DONE_VECTOR_5_MASK) >> SW_RO_TXQ_RX_DONE_VECTOR_5_OFFSET;
}
static __inline uint32_t mac_rx_sts_60_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_60_ADDR));
}
static __inline void mac_rx_sts_60_unpack(volatile uint32_t* sw_ro_txq_rx_done_vector_5)
{
	uint32_t tmp;

	tmp = mac_rx_sts_60_get();
	*sw_ro_txq_rx_done_vector_5 = (tmp & ((uint32_t)SW_RO_TXQ_RX_DONE_VECTOR_5_MASK)) >> SW_RO_TXQ_RX_DONE_VECTOR_5_OFFSET;
}
static __inline uint32_t mac_rx_sts_80_sw_ro_phy_rx_done_without_rx_start_cnt_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_80_ADDR)) & SW_RO_PHY_RX_DONE_WITHOUT_RX_START_CNT_MASK) >> SW_RO_PHY_RX_DONE_WITHOUT_RX_START_CNT_OFFSET;
}
static __inline uint32_t mac_rx_sts_80_sw_ro_prd_reason_ok_cnt_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_80_ADDR)) & SW_RO_PRD_REASON_OK_CNT_MASK) >> SW_RO_PRD_REASON_OK_CNT_OFFSET;
}
static __inline uint32_t mac_rx_sts_80_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_80_ADDR));
}
static __inline void mac_rx_sts_80_unpack(volatile uint32_t* sw_ro_phy_rx_done_without_rx_start_cnt, volatile uint32_t* sw_ro_prd_reason_ok_cnt)
{
	uint32_t tmp;

	tmp = mac_rx_sts_80_get();
	*sw_ro_phy_rx_done_without_rx_start_cnt = (tmp & ((uint32_t)SW_RO_PHY_RX_DONE_WITHOUT_RX_START_CNT_MASK)) >> SW_RO_PHY_RX_DONE_WITHOUT_RX_START_CNT_OFFSET;
	*sw_ro_prd_reason_ok_cnt = (tmp & ((uint32_t)SW_RO_PRD_REASON_OK_CNT_MASK)) >> SW_RO_PRD_REASON_OK_CNT_OFFSET;
}
static __inline uint32_t mac_rx_sts_81_sw_ro_prd_reason_err_ovf_cnt_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_81_ADDR)) & SW_RO_PRD_REASON_ERR_OVF_CNT_MASK) >> SW_RO_PRD_REASON_ERR_OVF_CNT_OFFSET;
}
static __inline uint32_t mac_rx_sts_81_sw_ro_prd_reason_err_pwr_drop_cnt_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_81_ADDR)) & SW_RO_PRD_REASON_ERR_PWR_DROP_CNT_MASK) >> SW_RO_PRD_REASON_ERR_PWR_DROP_CNT_OFFSET;
}
static __inline uint32_t mac_rx_sts_81_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_81_ADDR));
}
static __inline void mac_rx_sts_81_unpack(volatile uint32_t* sw_ro_prd_reason_err_ovf_cnt, volatile uint32_t* sw_ro_prd_reason_err_pwr_drop_cnt)
{
	uint32_t tmp;

	tmp = mac_rx_sts_81_get();
	*sw_ro_prd_reason_err_ovf_cnt = (tmp & ((uint32_t)SW_RO_PRD_REASON_ERR_OVF_CNT_MASK)) >> SW_RO_PRD_REASON_ERR_OVF_CNT_OFFSET;
	*sw_ro_prd_reason_err_pwr_drop_cnt = (tmp & ((uint32_t)SW_RO_PRD_REASON_ERR_PWR_DROP_CNT_MASK)) >> SW_RO_PRD_REASON_ERR_PWR_DROP_CNT_OFFSET;
}
static __inline uint32_t mac_rx_sts_82_sw_ro_prd_reason_err_vit_fail_cnt_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_82_ADDR)) & SW_RO_PRD_REASON_ERR_VIT_FAIL_CNT_MASK) >> SW_RO_PRD_REASON_ERR_VIT_FAIL_CNT_OFFSET;
}
static __inline uint32_t mac_rx_sts_82_sw_ro_prd_reason_err_td_timeout_cnt_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_82_ADDR)) & SW_RO_PRD_REASON_ERR_TD_TIMEOUT_CNT_MASK) >> SW_RO_PRD_REASON_ERR_TD_TIMEOUT_CNT_OFFSET;
}
static __inline uint32_t mac_rx_sts_82_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_82_ADDR));
}
static __inline void mac_rx_sts_82_unpack(volatile uint32_t* sw_ro_prd_reason_err_vit_fail_cnt, volatile uint32_t* sw_ro_prd_reason_err_td_timeout_cnt)
{
	uint32_t tmp;

	tmp = mac_rx_sts_82_get();
	*sw_ro_prd_reason_err_vit_fail_cnt = (tmp & ((uint32_t)SW_RO_PRD_REASON_ERR_VIT_FAIL_CNT_MASK)) >> SW_RO_PRD_REASON_ERR_VIT_FAIL_CNT_OFFSET;
	*sw_ro_prd_reason_err_td_timeout_cnt = (tmp & ((uint32_t)SW_RO_PRD_REASON_ERR_TD_TIMEOUT_CNT_MASK)) >> SW_RO_PRD_REASON_ERR_TD_TIMEOUT_CNT_OFFSET;
}
static __inline uint32_t mac_rx_sts_83_sw_ro_prd_reason_err_agc_other_cnt_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_83_ADDR)) & SW_RO_PRD_REASON_ERR_AGC_OTHER_CNT_MASK) >> SW_RO_PRD_REASON_ERR_AGC_OTHER_CNT_OFFSET;
}
static __inline uint32_t mac_rx_sts_83_sw_ro_prd_reason_err_other_cnt_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_83_ADDR)) & SW_RO_PRD_REASON_ERR_OTHER_CNT_MASK) >> SW_RO_PRD_REASON_ERR_OTHER_CNT_OFFSET;
}
static __inline uint32_t mac_rx_sts_83_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_83_ADDR));
}
static __inline void mac_rx_sts_83_unpack(volatile uint32_t* sw_ro_prd_reason_err_agc_other_cnt, volatile uint32_t* sw_ro_prd_reason_err_other_cnt)
{
	uint32_t tmp;

	tmp = mac_rx_sts_83_get();
	*sw_ro_prd_reason_err_agc_other_cnt = (tmp & ((uint32_t)SW_RO_PRD_REASON_ERR_AGC_OTHER_CNT_MASK)) >> SW_RO_PRD_REASON_ERR_AGC_OTHER_CNT_OFFSET;
	*sw_ro_prd_reason_err_other_cnt = (tmp & ((uint32_t)SW_RO_PRD_REASON_ERR_OTHER_CNT_MASK)) >> SW_RO_PRD_REASON_ERR_OTHER_CNT_OFFSET;
}
static __inline uint32_t mac_rx_sts_90_sw_ro_no_rx_prd_reason_ok_cnt_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_90_ADDR)) & SW_RO_NO_RX_PRD_REASON_OK_CNT_MASK) >> SW_RO_NO_RX_PRD_REASON_OK_CNT_OFFSET;
}
static __inline uint32_t mac_rx_sts_90_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_90_ADDR));
}
static __inline void mac_rx_sts_90_unpack(volatile uint32_t* sw_ro_no_rx_prd_reason_ok_cnt)
{
	uint32_t tmp;

	tmp = mac_rx_sts_90_get();
	*sw_ro_no_rx_prd_reason_ok_cnt = (tmp & ((uint32_t)SW_RO_NO_RX_PRD_REASON_OK_CNT_MASK)) >> SW_RO_NO_RX_PRD_REASON_OK_CNT_OFFSET;
}
static __inline uint32_t mac_rx_sts_91_sw_ro_no_rx_prd_reason_err_ovf_cnt_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_91_ADDR)) & SW_RO_NO_RX_PRD_REASON_ERR_OVF_CNT_MASK) >> SW_RO_NO_RX_PRD_REASON_ERR_OVF_CNT_OFFSET;
}
static __inline uint32_t mac_rx_sts_91_sw_ro_no_rx_prd_reason_err_pwr_drop_cnt_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_91_ADDR)) & SW_RO_NO_RX_PRD_REASON_ERR_PWR_DROP_CNT_MASK) >> SW_RO_NO_RX_PRD_REASON_ERR_PWR_DROP_CNT_OFFSET;
}
static __inline uint32_t mac_rx_sts_91_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_91_ADDR));
}
static __inline void mac_rx_sts_91_unpack(volatile uint32_t* sw_ro_no_rx_prd_reason_err_ovf_cnt, volatile uint32_t* sw_ro_no_rx_prd_reason_err_pwr_drop_cnt)
{
	uint32_t tmp;

	tmp = mac_rx_sts_91_get();
	*sw_ro_no_rx_prd_reason_err_ovf_cnt = (tmp & ((uint32_t)SW_RO_NO_RX_PRD_REASON_ERR_OVF_CNT_MASK)) >> SW_RO_NO_RX_PRD_REASON_ERR_OVF_CNT_OFFSET;
	*sw_ro_no_rx_prd_reason_err_pwr_drop_cnt = (tmp & ((uint32_t)SW_RO_NO_RX_PRD_REASON_ERR_PWR_DROP_CNT_MASK)) >> SW_RO_NO_RX_PRD_REASON_ERR_PWR_DROP_CNT_OFFSET;
}
static __inline uint32_t mac_rx_sts_92_sw_ro_no_rx_prd_reason_err_vit_fail_cnt_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_92_ADDR)) & SW_RO_NO_RX_PRD_REASON_ERR_VIT_FAIL_CNT_MASK) >> SW_RO_NO_RX_PRD_REASON_ERR_VIT_FAIL_CNT_OFFSET;
}
static __inline uint32_t mac_rx_sts_92_sw_ro_no_rx_prd_reason_err_td_timeout_cnt_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_92_ADDR)) & SW_RO_NO_RX_PRD_REASON_ERR_TD_TIMEOUT_CNT_MASK) >> SW_RO_NO_RX_PRD_REASON_ERR_TD_TIMEOUT_CNT_OFFSET;
}
static __inline uint32_t mac_rx_sts_92_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_92_ADDR));
}
static __inline void mac_rx_sts_92_unpack(volatile uint32_t* sw_ro_no_rx_prd_reason_err_vit_fail_cnt, volatile uint32_t* sw_ro_no_rx_prd_reason_err_td_timeout_cnt)
{
	uint32_t tmp;

	tmp = mac_rx_sts_92_get();
	*sw_ro_no_rx_prd_reason_err_vit_fail_cnt = (tmp & ((uint32_t)SW_RO_NO_RX_PRD_REASON_ERR_VIT_FAIL_CNT_MASK)) >> SW_RO_NO_RX_PRD_REASON_ERR_VIT_FAIL_CNT_OFFSET;
	*sw_ro_no_rx_prd_reason_err_td_timeout_cnt = (tmp & ((uint32_t)SW_RO_NO_RX_PRD_REASON_ERR_TD_TIMEOUT_CNT_MASK)) >> SW_RO_NO_RX_PRD_REASON_ERR_TD_TIMEOUT_CNT_OFFSET;
}
static __inline uint32_t mac_rx_sts_93_sw_ro_no_rx_prd_reason_err_agc_other_cnt_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_93_ADDR)) & SW_RO_NO_RX_PRD_REASON_ERR_AGC_OTHER_CNT_MASK) >> SW_RO_NO_RX_PRD_REASON_ERR_AGC_OTHER_CNT_OFFSET;
}
static __inline uint32_t mac_rx_sts_93_sw_ro_no_rx_prd_reason_err_other_cnt_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_93_ADDR)) & SW_RO_NO_RX_PRD_REASON_ERR_OTHER_CNT_MASK) >> SW_RO_NO_RX_PRD_REASON_ERR_OTHER_CNT_OFFSET;
}
static __inline uint32_t mac_rx_sts_93_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_93_ADDR));
}
static __inline void mac_rx_sts_93_unpack(volatile uint32_t* sw_ro_no_rx_prd_reason_err_agc_other_cnt, volatile uint32_t* sw_ro_no_rx_prd_reason_err_other_cnt)
{
	uint32_t tmp;

	tmp = mac_rx_sts_93_get();
	*sw_ro_no_rx_prd_reason_err_agc_other_cnt = (tmp & ((uint32_t)SW_RO_NO_RX_PRD_REASON_ERR_AGC_OTHER_CNT_MASK)) >> SW_RO_NO_RX_PRD_REASON_ERR_AGC_OTHER_CNT_OFFSET;
	*sw_ro_no_rx_prd_reason_err_other_cnt = (tmp & ((uint32_t)SW_RO_NO_RX_PRD_REASON_ERR_OTHER_CNT_MASK)) >> SW_RO_NO_RX_PRD_REASON_ERR_OTHER_CNT_OFFSET;
}
static __inline uint32_t mac_rx_sts_94_sw_ro_fc_10byte_store_sts_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_94_ADDR)) & SW_RO_FC_10BYTE_STORE_STS_MASK) >> SW_RO_FC_10BYTE_STORE_STS_OFFSET;
}
static __inline uint32_t mac_rx_sts_94_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_94_ADDR));
}
static __inline void mac_rx_sts_94_unpack(volatile uint32_t* sw_ro_fc_10byte_store_sts)
{
	uint32_t tmp;

	tmp = mac_rx_sts_94_get();
	*sw_ro_fc_10byte_store_sts = (tmp & ((uint32_t)SW_RO_FC_10BYTE_STORE_STS_MASK)) >> SW_RO_FC_10BYTE_STORE_STS_OFFSET;
}
static __inline uint32_t mac_rx_sts_95_sw_ro_mac_rx_fsm_start_timeout_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_95_ADDR)) & SW_RO_MAC_RX_FSM_START_TIMEOUT_MASK) >> SW_RO_MAC_RX_FSM_START_TIMEOUT_OFFSET;
}
static __inline uint32_t mac_rx_sts_95_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_95_ADDR));
}
static __inline void mac_rx_sts_95_unpack(volatile uint32_t* sw_ro_mac_rx_fsm_start_timeout)
{
	uint32_t tmp;

	tmp = mac_rx_sts_95_get();
	*sw_ro_mac_rx_fsm_start_timeout = (tmp & ((uint32_t)SW_RO_MAC_RX_FSM_START_TIMEOUT_MASK)) >> SW_RO_MAC_RX_FSM_START_TIMEOUT_OFFSET;
}
static __inline uint32_t mac_rx_sts_96_sw_ro_rx_mac_anti_press_phy_cnt_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_96_ADDR)) & SW_RO_RX_MAC_ANTI_PRESS_PHY_CNT_MASK) >> SW_RO_RX_MAC_ANTI_PRESS_PHY_CNT_OFFSET;
}
static __inline uint32_t mac_rx_sts_96_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_RX_STS_96_ADDR));
}
static __inline void mac_rx_sts_96_unpack(volatile uint32_t* sw_ro_rx_mac_anti_press_phy_cnt)
{
	uint32_t tmp;

	tmp = mac_rx_sts_96_get();
	*sw_ro_rx_mac_anti_press_phy_cnt = (tmp & ((uint32_t)SW_RO_RX_MAC_ANTI_PRESS_PHY_CNT_MASK)) >> SW_RO_RX_MAC_ANTI_PRESS_PHY_CNT_OFFSET;
}
static __inline void mac_ba_bitmap_ctrl_sw_bar_ack_policy_mode_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_BITMAP_CTRL_ADDR);
	tmp &= ~SW_BAR_ACK_POLICY_MODE_MASK;
	tmp |= (value << SW_BAR_ACK_POLICY_MODE_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_BA_BITMAP_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_BA_BITMAP_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_ba_bitmap_ctrl_sw_bar_ack_policy_mode_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_BITMAP_CTRL_ADDR)) & SW_BAR_ACK_POLICY_MODE_MASK) >> SW_BAR_ACK_POLICY_MODE_OFFSET;
}
static __inline void mac_ba_bitmap_ctrl_sw_force_ba_bitmap_en_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_BITMAP_CTRL_ADDR);
	tmp &= ~SW_FORCE_BA_BITMAP_EN_MASK;
	tmp |= (value << SW_FORCE_BA_BITMAP_EN_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_BA_BITMAP_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_BA_BITMAP_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_ba_bitmap_ctrl_sw_force_ba_bitmap_en_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_BITMAP_CTRL_ADDR)) & SW_FORCE_BA_BITMAP_EN_MASK) >> SW_FORCE_BA_BITMAP_EN_OFFSET;
}
static __inline void mac_ba_bitmap_ctrl_sw_force_ba_info_en_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_BITMAP_CTRL_ADDR);
	tmp &= ~SW_FORCE_BA_INFO_EN_MASK;
	tmp |= (value << SW_FORCE_BA_INFO_EN_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_BA_BITMAP_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_BA_BITMAP_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_ba_bitmap_ctrl_sw_force_ba_info_en_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_BITMAP_CTRL_ADDR)) & SW_FORCE_BA_INFO_EN_MASK) >> SW_FORCE_BA_INFO_EN_OFFSET;
}
static __inline void mac_ba_bitmap_ctrl_sw_force_ba_ctrl_en_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_BITMAP_CTRL_ADDR);
	tmp &= ~SW_FORCE_BA_CTRL_EN_MASK;
	tmp |= (value << SW_FORCE_BA_CTRL_EN_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_BA_BITMAP_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_BA_BITMAP_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_ba_bitmap_ctrl_sw_force_ba_ctrl_en_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_BITMAP_CTRL_ADDR)) & SW_FORCE_BA_CTRL_EN_MASK) >> SW_FORCE_BA_CTRL_EN_OFFSET;
}
static __inline void mac_ba_bitmap_ctrl_set(uint32_t value)
{
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_BA_BITMAP_CTRL_ADDR, value);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_BA_BITMAP_CTRL_ADDR), value);
}
static __inline uint32_t mac_ba_bitmap_ctrl_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_BITMAP_CTRL_ADDR));
}
static __inline void mac_ba_bitmap_ctrl_pack(uint32_t sw_bar_ack_policy_mode, uint32_t sw_force_ba_bitmap_en, uint32_t sw_force_ba_info_en, uint32_t sw_force_ba_ctrl_en)
{
	uint32_t tmp;

	assert((((uint32_t)sw_bar_ack_policy_mode << SW_BAR_ACK_POLICY_MODE_OFFSET) & ~((uint32_t)SW_BAR_ACK_POLICY_MODE_MASK)) == 0);
	assert((((uint32_t)sw_force_ba_bitmap_en << SW_FORCE_BA_BITMAP_EN_OFFSET) & ~((uint32_t)SW_FORCE_BA_BITMAP_EN_MASK)) == 0);
	assert((((uint32_t)sw_force_ba_info_en << SW_FORCE_BA_INFO_EN_OFFSET) & ~((uint32_t)SW_FORCE_BA_INFO_EN_MASK)) == 0);
	assert((((uint32_t)sw_force_ba_ctrl_en << SW_FORCE_BA_CTRL_EN_OFFSET) & ~((uint32_t)SW_FORCE_BA_CTRL_EN_MASK)) == 0);
	tmp =
		((uint32_t)sw_bar_ack_policy_mode << SW_BAR_ACK_POLICY_MODE_OFFSET) |
		((uint32_t)sw_force_ba_bitmap_en << SW_FORCE_BA_BITMAP_EN_OFFSET) |
		((uint32_t)sw_force_ba_info_en << SW_FORCE_BA_INFO_EN_OFFSET) |
		((uint32_t)sw_force_ba_ctrl_en << SW_FORCE_BA_CTRL_EN_OFFSET) ;
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_BA_BITMAP_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_BA_BITMAP_CTRL_ADDR), tmp);
}
static __inline void mac_ba_bitmap_ctrl_unpack(volatile uint32_t* sw_bar_ack_policy_mode, volatile uint32_t* sw_force_ba_bitmap_en, volatile uint32_t* sw_force_ba_info_en, volatile uint32_t* sw_force_ba_ctrl_en)
{
	uint32_t tmp;

	tmp = mac_ba_bitmap_ctrl_get();
	*sw_bar_ack_policy_mode = (tmp & ((uint32_t)SW_BAR_ACK_POLICY_MODE_MASK)) >> SW_BAR_ACK_POLICY_MODE_OFFSET;
	*sw_force_ba_bitmap_en = (tmp & ((uint32_t)SW_FORCE_BA_BITMAP_EN_MASK)) >> SW_FORCE_BA_BITMAP_EN_OFFSET;
	*sw_force_ba_info_en = (tmp & ((uint32_t)SW_FORCE_BA_INFO_EN_MASK)) >> SW_FORCE_BA_INFO_EN_OFFSET;
	*sw_force_ba_ctrl_en = (tmp & ((uint32_t)SW_FORCE_BA_CTRL_EN_MASK)) >> SW_FORCE_BA_CTRL_EN_OFFSET;
}
static __inline void mac_ba_crtl_info_force_sw_force_ba_ctrl_val_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_CRTL_INFO_FORCE_ADDR);
	tmp &= ~SW_FORCE_BA_CTRL_VAL_MASK;
	tmp |= (value << SW_FORCE_BA_CTRL_VAL_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_BA_CRTL_INFO_FORCE_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_BA_CRTL_INFO_FORCE_ADDR), tmp);
}
static __inline uint32_t mac_ba_crtl_info_force_sw_force_ba_ctrl_val_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_CRTL_INFO_FORCE_ADDR)) & SW_FORCE_BA_CTRL_VAL_MASK) >> SW_FORCE_BA_CTRL_VAL_OFFSET;
}
static __inline void mac_ba_crtl_info_force_sw_force_ba_info_val_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_CRTL_INFO_FORCE_ADDR);
	tmp &= ~SW_FORCE_BA_INFO_VAL_MASK;
	tmp |= (value << SW_FORCE_BA_INFO_VAL_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_BA_CRTL_INFO_FORCE_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_BA_CRTL_INFO_FORCE_ADDR), tmp);
}
static __inline uint32_t mac_ba_crtl_info_force_sw_force_ba_info_val_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_CRTL_INFO_FORCE_ADDR)) & SW_FORCE_BA_INFO_VAL_MASK) >> SW_FORCE_BA_INFO_VAL_OFFSET;
}
static __inline void mac_ba_crtl_info_force_set(uint32_t value)
{
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_BA_CRTL_INFO_FORCE_ADDR, value);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_BA_CRTL_INFO_FORCE_ADDR), value);
}
static __inline uint32_t mac_ba_crtl_info_force_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_CRTL_INFO_FORCE_ADDR));
}
static __inline void mac_ba_crtl_info_force_pack(uint32_t sw_force_ba_ctrl_val, uint32_t sw_force_ba_info_val)
{
	uint32_t tmp;

	assert((((uint32_t)sw_force_ba_ctrl_val << SW_FORCE_BA_CTRL_VAL_OFFSET) & ~((uint32_t)SW_FORCE_BA_CTRL_VAL_MASK)) == 0);
	assert((((uint32_t)sw_force_ba_info_val << SW_FORCE_BA_INFO_VAL_OFFSET) & ~((uint32_t)SW_FORCE_BA_INFO_VAL_MASK)) == 0);
	tmp =
		((uint32_t)sw_force_ba_ctrl_val << SW_FORCE_BA_CTRL_VAL_OFFSET) |
		((uint32_t)sw_force_ba_info_val << SW_FORCE_BA_INFO_VAL_OFFSET) ;
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_BA_CRTL_INFO_FORCE_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_BA_CRTL_INFO_FORCE_ADDR), tmp);
}
static __inline void mac_ba_crtl_info_force_unpack(volatile uint32_t* sw_force_ba_ctrl_val, volatile uint32_t* sw_force_ba_info_val)
{
	uint32_t tmp;

	tmp = mac_ba_crtl_info_force_get();
	*sw_force_ba_ctrl_val = (tmp & ((uint32_t)SW_FORCE_BA_CTRL_VAL_MASK)) >> SW_FORCE_BA_CTRL_VAL_OFFSET;
	*sw_force_ba_info_val = (tmp & ((uint32_t)SW_FORCE_BA_INFO_VAL_MASK)) >> SW_FORCE_BA_INFO_VAL_OFFSET;
}
static __inline void mac_ba_bitmap_force_high_sw_force_ba_bitmap_high_val_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_BITMAP_FORCE_HIGH_ADDR);
	tmp &= ~SW_FORCE_BA_BITMAP_HIGH_VAL_MASK;
	tmp |= (value << SW_FORCE_BA_BITMAP_HIGH_VAL_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_BA_BITMAP_FORCE_HIGH_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_BA_BITMAP_FORCE_HIGH_ADDR), tmp);
}
static __inline uint32_t mac_ba_bitmap_force_high_sw_force_ba_bitmap_high_val_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_BITMAP_FORCE_HIGH_ADDR)) & SW_FORCE_BA_BITMAP_HIGH_VAL_MASK) >> SW_FORCE_BA_BITMAP_HIGH_VAL_OFFSET;
}
static __inline void mac_ba_bitmap_force_high_set(uint32_t value)
{
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_BA_BITMAP_FORCE_HIGH_ADDR, value);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_BA_BITMAP_FORCE_HIGH_ADDR), value);
}
static __inline uint32_t mac_ba_bitmap_force_high_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_BITMAP_FORCE_HIGH_ADDR));
}
static __inline void mac_ba_bitmap_force_high_pack(uint32_t sw_force_ba_bitmap_high_val)
{
	uint32_t tmp;

	assert((((uint32_t)sw_force_ba_bitmap_high_val << SW_FORCE_BA_BITMAP_HIGH_VAL_OFFSET) & ~((uint32_t)SW_FORCE_BA_BITMAP_HIGH_VAL_MASK)) == 0);
	tmp =
		((uint32_t)sw_force_ba_bitmap_high_val << SW_FORCE_BA_BITMAP_HIGH_VAL_OFFSET) ;
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_BA_BITMAP_FORCE_HIGH_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_BA_BITMAP_FORCE_HIGH_ADDR), tmp);
}
static __inline void mac_ba_bitmap_force_high_unpack(volatile uint32_t* sw_force_ba_bitmap_high_val)
{
	uint32_t tmp;

	tmp = mac_ba_bitmap_force_high_get();
	*sw_force_ba_bitmap_high_val = (tmp & ((uint32_t)SW_FORCE_BA_BITMAP_HIGH_VAL_MASK)) >> SW_FORCE_BA_BITMAP_HIGH_VAL_OFFSET;
}
static __inline void mac_ba_bitmap_force_low_sw_force_ba_bitmap_low_val_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_BITMAP_FORCE_LOW_ADDR);
	tmp &= ~SW_FORCE_BA_BITMAP_LOW_VAL_MASK;
	tmp |= (value << SW_FORCE_BA_BITMAP_LOW_VAL_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_BA_BITMAP_FORCE_LOW_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_BA_BITMAP_FORCE_LOW_ADDR), tmp);
}
static __inline uint32_t mac_ba_bitmap_force_low_sw_force_ba_bitmap_low_val_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_BITMAP_FORCE_LOW_ADDR)) & SW_FORCE_BA_BITMAP_LOW_VAL_MASK) >> SW_FORCE_BA_BITMAP_LOW_VAL_OFFSET;
}
static __inline void mac_ba_bitmap_force_low_set(uint32_t value)
{
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_BA_BITMAP_FORCE_LOW_ADDR, value);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_BA_BITMAP_FORCE_LOW_ADDR), value);
}
static __inline uint32_t mac_ba_bitmap_force_low_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_BITMAP_FORCE_LOW_ADDR));
}
static __inline void mac_ba_bitmap_force_low_pack(uint32_t sw_force_ba_bitmap_low_val)
{
	uint32_t tmp;

	assert((((uint32_t)sw_force_ba_bitmap_low_val << SW_FORCE_BA_BITMAP_LOW_VAL_OFFSET) & ~((uint32_t)SW_FORCE_BA_BITMAP_LOW_VAL_MASK)) == 0);
	tmp =
		((uint32_t)sw_force_ba_bitmap_low_val << SW_FORCE_BA_BITMAP_LOW_VAL_OFFSET) ;
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_BA_BITMAP_FORCE_LOW_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_BA_BITMAP_FORCE_LOW_ADDR), tmp);
}
static __inline void mac_ba_bitmap_force_low_unpack(volatile uint32_t* sw_force_ba_bitmap_low_val)
{
	uint32_t tmp;

	tmp = mac_ba_bitmap_force_low_get();
	*sw_force_ba_bitmap_low_val = (tmp & ((uint32_t)SW_FORCE_BA_BITMAP_LOW_VAL_MASK)) >> SW_FORCE_BA_BITMAP_LOW_VAL_OFFSET;
}
static __inline void mac_ba_0_bitmap_ctrl_0_sw_ba_0_addr2_low_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_0_BITMAP_CTRL_0_ADDR);
	tmp &= ~SW_BA_0_ADDR2_LOW_MASK;
	tmp |= (value << SW_BA_0_ADDR2_LOW_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_BA_0_BITMAP_CTRL_0_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_BA_0_BITMAP_CTRL_0_ADDR), tmp);
}
static __inline uint32_t mac_ba_0_bitmap_ctrl_0_sw_ba_0_addr2_low_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_0_BITMAP_CTRL_0_ADDR)) & SW_BA_0_ADDR2_LOW_MASK) >> SW_BA_0_ADDR2_LOW_OFFSET;
}
static __inline void mac_ba_0_bitmap_ctrl_0_set(uint32_t value)
{
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_BA_0_BITMAP_CTRL_0_ADDR, value);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_BA_0_BITMAP_CTRL_0_ADDR), value);
}
static __inline uint32_t mac_ba_0_bitmap_ctrl_0_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_0_BITMAP_CTRL_0_ADDR));
}
static __inline void mac_ba_0_bitmap_ctrl_0_pack(uint32_t sw_ba_0_addr2_low)
{
	uint32_t tmp;

	assert((((uint32_t)sw_ba_0_addr2_low << SW_BA_0_ADDR2_LOW_OFFSET) & ~((uint32_t)SW_BA_0_ADDR2_LOW_MASK)) == 0);
	tmp =
		((uint32_t)sw_ba_0_addr2_low << SW_BA_0_ADDR2_LOW_OFFSET) ;
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_BA_0_BITMAP_CTRL_0_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_BA_0_BITMAP_CTRL_0_ADDR), tmp);
}
static __inline void mac_ba_0_bitmap_ctrl_0_unpack(volatile uint32_t* sw_ba_0_addr2_low)
{
	uint32_t tmp;

	tmp = mac_ba_0_bitmap_ctrl_0_get();
	*sw_ba_0_addr2_low = (tmp & ((uint32_t)SW_BA_0_ADDR2_LOW_MASK)) >> SW_BA_0_ADDR2_LOW_OFFSET;
}
static __inline void mac_ba_0_bitmap_ctrl_1_sw_ba_0_addr1_chos_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_0_BITMAP_CTRL_1_ADDR);
	tmp &= ~SW_BA_0_ADDR1_CHOS_MASK;
	tmp |= (value << SW_BA_0_ADDR1_CHOS_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_BA_0_BITMAP_CTRL_1_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_BA_0_BITMAP_CTRL_1_ADDR), tmp);
}
static __inline uint32_t mac_ba_0_bitmap_ctrl_1_sw_ba_0_addr1_chos_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_0_BITMAP_CTRL_1_ADDR)) & SW_BA_0_ADDR1_CHOS_MASK) >> SW_BA_0_ADDR1_CHOS_OFFSET;
}
static __inline void mac_ba_0_bitmap_ctrl_1_sw_ba_0_tid_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_0_BITMAP_CTRL_1_ADDR);
	tmp &= ~SW_BA_0_TID_MASK;
	tmp |= (value << SW_BA_0_TID_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_BA_0_BITMAP_CTRL_1_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_BA_0_BITMAP_CTRL_1_ADDR), tmp);
}
static __inline uint32_t mac_ba_0_bitmap_ctrl_1_sw_ba_0_tid_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_0_BITMAP_CTRL_1_ADDR)) & SW_BA_0_TID_MASK) >> SW_BA_0_TID_OFFSET;
}
static __inline void mac_ba_0_bitmap_ctrl_1_sw_ba_0_addr2_high_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_0_BITMAP_CTRL_1_ADDR);
	tmp &= ~SW_BA_0_ADDR2_HIGH_MASK;
	tmp |= (value << SW_BA_0_ADDR2_HIGH_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_BA_0_BITMAP_CTRL_1_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_BA_0_BITMAP_CTRL_1_ADDR), tmp);
}
static __inline uint32_t mac_ba_0_bitmap_ctrl_1_sw_ba_0_addr2_high_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_0_BITMAP_CTRL_1_ADDR)) & SW_BA_0_ADDR2_HIGH_MASK) >> SW_BA_0_ADDR2_HIGH_OFFSET;
}
static __inline void mac_ba_0_bitmap_ctrl_1_set(uint32_t value)
{
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_BA_0_BITMAP_CTRL_1_ADDR, value);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_BA_0_BITMAP_CTRL_1_ADDR), value);
}
static __inline uint32_t mac_ba_0_bitmap_ctrl_1_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_0_BITMAP_CTRL_1_ADDR));
}
static __inline void mac_ba_0_bitmap_ctrl_1_pack(uint32_t sw_ba_0_addr1_chos, uint32_t sw_ba_0_tid, uint32_t sw_ba_0_addr2_high)
{
	uint32_t tmp;

	assert((((uint32_t)sw_ba_0_addr1_chos << SW_BA_0_ADDR1_CHOS_OFFSET) & ~((uint32_t)SW_BA_0_ADDR1_CHOS_MASK)) == 0);
	assert((((uint32_t)sw_ba_0_tid << SW_BA_0_TID_OFFSET) & ~((uint32_t)SW_BA_0_TID_MASK)) == 0);
	assert((((uint32_t)sw_ba_0_addr2_high << SW_BA_0_ADDR2_HIGH_OFFSET) & ~((uint32_t)SW_BA_0_ADDR2_HIGH_MASK)) == 0);
	tmp =
		((uint32_t)sw_ba_0_addr1_chos << SW_BA_0_ADDR1_CHOS_OFFSET) |
		((uint32_t)sw_ba_0_tid << SW_BA_0_TID_OFFSET) |
		((uint32_t)sw_ba_0_addr2_high << SW_BA_0_ADDR2_HIGH_OFFSET) ;
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_BA_0_BITMAP_CTRL_1_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_BA_0_BITMAP_CTRL_1_ADDR), tmp);
}
static __inline void mac_ba_0_bitmap_ctrl_1_unpack(volatile uint32_t* sw_ba_0_addr1_chos, volatile uint32_t* sw_ba_0_tid, volatile uint32_t* sw_ba_0_addr2_high)
{
	uint32_t tmp;

	tmp = mac_ba_0_bitmap_ctrl_1_get();
	*sw_ba_0_addr1_chos = (tmp & ((uint32_t)SW_BA_0_ADDR1_CHOS_MASK)) >> SW_BA_0_ADDR1_CHOS_OFFSET;
	*sw_ba_0_tid = (tmp & ((uint32_t)SW_BA_0_TID_MASK)) >> SW_BA_0_TID_OFFSET;
	*sw_ba_0_addr2_high = (tmp & ((uint32_t)SW_BA_0_ADDR2_HIGH_MASK)) >> SW_BA_0_ADDR2_HIGH_OFFSET;
}
static __inline void mac_ba_0_bitmap_ctrl_2_sw_ba_0_winstart_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_0_BITMAP_CTRL_2_ADDR);
	tmp &= ~SW_BA_0_WINSTART_MASK;
	tmp |= (value << SW_BA_0_WINSTART_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_BA_0_BITMAP_CTRL_2_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_BA_0_BITMAP_CTRL_2_ADDR), tmp);
}
static __inline uint32_t mac_ba_0_bitmap_ctrl_2_sw_ba_0_winstart_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_0_BITMAP_CTRL_2_ADDR)) & SW_BA_0_WINSTART_MASK) >> SW_BA_0_WINSTART_OFFSET;
}
static __inline void mac_ba_0_bitmap_ctrl_2_sw_ba_0_bitmap_force_zero_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_0_BITMAP_CTRL_2_ADDR);
	tmp &= ~SW_BA_0_BITMAP_FORCE_ZERO_MASK;
	tmp |= (value << SW_BA_0_BITMAP_FORCE_ZERO_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_BA_0_BITMAP_CTRL_2_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_BA_0_BITMAP_CTRL_2_ADDR), tmp);
}
static __inline uint32_t mac_ba_0_bitmap_ctrl_2_sw_ba_0_bitmap_force_zero_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_0_BITMAP_CTRL_2_ADDR)) & SW_BA_0_BITMAP_FORCE_ZERO_MASK) >> SW_BA_0_BITMAP_FORCE_ZERO_OFFSET;
}
static __inline void mac_ba_0_bitmap_ctrl_2_sw_ba_0_win_set_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_0_BITMAP_CTRL_2_ADDR);
	tmp &= ~SW_BA_0_WIN_SET_MASK;
	tmp |= (value << SW_BA_0_WIN_SET_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_BA_0_BITMAP_CTRL_2_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_BA_0_BITMAP_CTRL_2_ADDR), tmp);
}
static __inline void mac_ba_0_bitmap_ctrl_2_sw_ba_0_winoffset_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_0_BITMAP_CTRL_2_ADDR);
	tmp &= ~SW_BA_0_WINOFFSET_MASK;
	tmp |= (value << SW_BA_0_WINOFFSET_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_BA_0_BITMAP_CTRL_2_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_BA_0_BITMAP_CTRL_2_ADDR), tmp);
}
static __inline uint32_t mac_ba_0_bitmap_ctrl_2_sw_ba_0_winoffset_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_0_BITMAP_CTRL_2_ADDR)) & SW_BA_0_WINOFFSET_MASK) >> SW_BA_0_WINOFFSET_OFFSET;
}
static __inline void mac_ba_0_bitmap_ctrl_2_set(uint32_t value)
{
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_BA_0_BITMAP_CTRL_2_ADDR, value);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_BA_0_BITMAP_CTRL_2_ADDR), value);
}
static __inline uint32_t mac_ba_0_bitmap_ctrl_2_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_0_BITMAP_CTRL_2_ADDR));
}
static __inline void mac_ba_0_bitmap_ctrl_2_pack(uint32_t sw_ba_0_winstart, uint32_t sw_ba_0_bitmap_force_zero, uint32_t sw_ba_0_win_set, uint32_t sw_ba_0_winoffset)
{
	uint32_t tmp;

	assert((((uint32_t)sw_ba_0_winstart << SW_BA_0_WINSTART_OFFSET) & ~((uint32_t)SW_BA_0_WINSTART_MASK)) == 0);
	assert((((uint32_t)sw_ba_0_bitmap_force_zero << SW_BA_0_BITMAP_FORCE_ZERO_OFFSET) & ~((uint32_t)SW_BA_0_BITMAP_FORCE_ZERO_MASK)) == 0);
	assert((((uint32_t)sw_ba_0_win_set << SW_BA_0_WIN_SET_OFFSET) & ~((uint32_t)SW_BA_0_WIN_SET_MASK)) == 0);
	assert((((uint32_t)sw_ba_0_winoffset << SW_BA_0_WINOFFSET_OFFSET) & ~((uint32_t)SW_BA_0_WINOFFSET_MASK)) == 0);
	tmp =
		((uint32_t)sw_ba_0_winstart << SW_BA_0_WINSTART_OFFSET) |
		((uint32_t)sw_ba_0_bitmap_force_zero << SW_BA_0_BITMAP_FORCE_ZERO_OFFSET) |
		((uint32_t)sw_ba_0_win_set << SW_BA_0_WIN_SET_OFFSET) |
		((uint32_t)sw_ba_0_winoffset << SW_BA_0_WINOFFSET_OFFSET) ;
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_BA_0_BITMAP_CTRL_2_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_BA_0_BITMAP_CTRL_2_ADDR), tmp);
}
static __inline void mac_ba_0_bitmap_ctrl_2_unpack(volatile uint32_t* sw_ba_0_winstart, volatile uint32_t* sw_ba_0_bitmap_force_zero, volatile uint32_t* sw_ba_0_winoffset)
{
	uint32_t tmp;

	tmp = mac_ba_0_bitmap_ctrl_2_get();
	*sw_ba_0_winstart = (tmp & ((uint32_t)SW_BA_0_WINSTART_MASK)) >> SW_BA_0_WINSTART_OFFSET;
	*sw_ba_0_bitmap_force_zero = (tmp & ((uint32_t)SW_BA_0_BITMAP_FORCE_ZERO_MASK)) >> SW_BA_0_BITMAP_FORCE_ZERO_OFFSET;
	*sw_ba_0_winoffset = (tmp & ((uint32_t)SW_BA_0_WINOFFSET_MASK)) >> SW_BA_0_WINOFFSET_OFFSET;
}
static __inline uint32_t mac_ba_0_bitmap_sts_0_sw_ro_ba_0_winstart_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_0_BITMAP_STS_0_ADDR)) & SW_RO_BA_0_WINSTART_MASK) >> SW_RO_BA_0_WINSTART_OFFSET;
}
static __inline uint32_t mac_ba_0_bitmap_sts_0_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_0_BITMAP_STS_0_ADDR));
}
static __inline void mac_ba_0_bitmap_sts_0_unpack(volatile uint32_t* sw_ro_ba_0_winstart)
{
	uint32_t tmp;

	tmp = mac_ba_0_bitmap_sts_0_get();
	*sw_ro_ba_0_winstart = (tmp & ((uint32_t)SW_RO_BA_0_WINSTART_MASK)) >> SW_RO_BA_0_WINSTART_OFFSET;
}
static __inline uint32_t mac_ba_0_bitmap_sts_1_sw_ro_ba_0_bitmap_high_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_0_BITMAP_STS_1_ADDR)) & SW_RO_BA_0_BITMAP_HIGH_MASK) >> SW_RO_BA_0_BITMAP_HIGH_OFFSET;
}
static __inline uint32_t mac_ba_0_bitmap_sts_1_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_0_BITMAP_STS_1_ADDR));
}
static __inline void mac_ba_0_bitmap_sts_1_unpack(volatile uint32_t* sw_ro_ba_0_bitmap_high)
{
	uint32_t tmp;

	tmp = mac_ba_0_bitmap_sts_1_get();
	*sw_ro_ba_0_bitmap_high = (tmp & ((uint32_t)SW_RO_BA_0_BITMAP_HIGH_MASK)) >> SW_RO_BA_0_BITMAP_HIGH_OFFSET;
}
static __inline uint32_t mac_ba_0_bitmap_sts_2_sw_ro_ba_0_bitmap_low_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_0_BITMAP_STS_2_ADDR)) & SW_RO_BA_0_BITMAP_LOW_MASK) >> SW_RO_BA_0_BITMAP_LOW_OFFSET;
}
static __inline uint32_t mac_ba_0_bitmap_sts_2_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_0_BITMAP_STS_2_ADDR));
}
static __inline void mac_ba_0_bitmap_sts_2_unpack(volatile uint32_t* sw_ro_ba_0_bitmap_low)
{
	uint32_t tmp;

	tmp = mac_ba_0_bitmap_sts_2_get();
	*sw_ro_ba_0_bitmap_low = (tmp & ((uint32_t)SW_RO_BA_0_BITMAP_LOW_MASK)) >> SW_RO_BA_0_BITMAP_LOW_OFFSET;
}
static __inline void mac_ba_1_bitmap_ctrl_0_sw_ba_1_addr2_low_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_1_BITMAP_CTRL_0_ADDR);
	tmp &= ~SW_BA_1_ADDR2_LOW_MASK;
	tmp |= (value << SW_BA_1_ADDR2_LOW_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_BA_1_BITMAP_CTRL_0_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_BA_1_BITMAP_CTRL_0_ADDR), tmp);
}
static __inline uint32_t mac_ba_1_bitmap_ctrl_0_sw_ba_1_addr2_low_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_1_BITMAP_CTRL_0_ADDR)) & SW_BA_1_ADDR2_LOW_MASK) >> SW_BA_1_ADDR2_LOW_OFFSET;
}
static __inline void mac_ba_1_bitmap_ctrl_0_set(uint32_t value)
{
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_BA_1_BITMAP_CTRL_0_ADDR, value);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_BA_1_BITMAP_CTRL_0_ADDR), value);
}
static __inline uint32_t mac_ba_1_bitmap_ctrl_0_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_1_BITMAP_CTRL_0_ADDR));
}
static __inline void mac_ba_1_bitmap_ctrl_0_pack(uint32_t sw_ba_1_addr2_low)
{
	uint32_t tmp;

	assert((((uint32_t)sw_ba_1_addr2_low << SW_BA_1_ADDR2_LOW_OFFSET) & ~((uint32_t)SW_BA_1_ADDR2_LOW_MASK)) == 0);
	tmp =
		((uint32_t)sw_ba_1_addr2_low << SW_BA_1_ADDR2_LOW_OFFSET) ;
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_BA_1_BITMAP_CTRL_0_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_BA_1_BITMAP_CTRL_0_ADDR), tmp);
}
static __inline void mac_ba_1_bitmap_ctrl_0_unpack(volatile uint32_t* sw_ba_1_addr2_low)
{
	uint32_t tmp;

	tmp = mac_ba_1_bitmap_ctrl_0_get();
	*sw_ba_1_addr2_low = (tmp & ((uint32_t)SW_BA_1_ADDR2_LOW_MASK)) >> SW_BA_1_ADDR2_LOW_OFFSET;
}
static __inline void mac_ba_1_bitmap_ctrl_1_sw_ba_1_addr1_chos_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_1_BITMAP_CTRL_1_ADDR);
	tmp &= ~SW_BA_1_ADDR1_CHOS_MASK;
	tmp |= (value << SW_BA_1_ADDR1_CHOS_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_BA_1_BITMAP_CTRL_1_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_BA_1_BITMAP_CTRL_1_ADDR), tmp);
}
static __inline uint32_t mac_ba_1_bitmap_ctrl_1_sw_ba_1_addr1_chos_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_1_BITMAP_CTRL_1_ADDR)) & SW_BA_1_ADDR1_CHOS_MASK) >> SW_BA_1_ADDR1_CHOS_OFFSET;
}
static __inline void mac_ba_1_bitmap_ctrl_1_sw_ba_1_tid_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_1_BITMAP_CTRL_1_ADDR);
	tmp &= ~SW_BA_1_TID_MASK;
	tmp |= (value << SW_BA_1_TID_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_BA_1_BITMAP_CTRL_1_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_BA_1_BITMAP_CTRL_1_ADDR), tmp);
}
static __inline uint32_t mac_ba_1_bitmap_ctrl_1_sw_ba_1_tid_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_1_BITMAP_CTRL_1_ADDR)) & SW_BA_1_TID_MASK) >> SW_BA_1_TID_OFFSET;
}
static __inline void mac_ba_1_bitmap_ctrl_1_sw_ba_1_addr2_high_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_1_BITMAP_CTRL_1_ADDR);
	tmp &= ~SW_BA_1_ADDR2_HIGH_MASK;
	tmp |= (value << SW_BA_1_ADDR2_HIGH_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_BA_1_BITMAP_CTRL_1_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_BA_1_BITMAP_CTRL_1_ADDR), tmp);
}
static __inline uint32_t mac_ba_1_bitmap_ctrl_1_sw_ba_1_addr2_high_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_1_BITMAP_CTRL_1_ADDR)) & SW_BA_1_ADDR2_HIGH_MASK) >> SW_BA_1_ADDR2_HIGH_OFFSET;
}
static __inline void mac_ba_1_bitmap_ctrl_1_set(uint32_t value)
{
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_BA_1_BITMAP_CTRL_1_ADDR, value);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_BA_1_BITMAP_CTRL_1_ADDR), value);
}
static __inline uint32_t mac_ba_1_bitmap_ctrl_1_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_1_BITMAP_CTRL_1_ADDR));
}
static __inline void mac_ba_1_bitmap_ctrl_1_pack(uint32_t sw_ba_1_addr1_chos, uint32_t sw_ba_1_tid, uint32_t sw_ba_1_addr2_high)
{
	uint32_t tmp;

	assert((((uint32_t)sw_ba_1_addr1_chos << SW_BA_1_ADDR1_CHOS_OFFSET) & ~((uint32_t)SW_BA_1_ADDR1_CHOS_MASK)) == 0);
	assert((((uint32_t)sw_ba_1_tid << SW_BA_1_TID_OFFSET) & ~((uint32_t)SW_BA_1_TID_MASK)) == 0);
	assert((((uint32_t)sw_ba_1_addr2_high << SW_BA_1_ADDR2_HIGH_OFFSET) & ~((uint32_t)SW_BA_1_ADDR2_HIGH_MASK)) == 0);
	tmp =
		((uint32_t)sw_ba_1_addr1_chos << SW_BA_1_ADDR1_CHOS_OFFSET) |
		((uint32_t)sw_ba_1_tid << SW_BA_1_TID_OFFSET) |
		((uint32_t)sw_ba_1_addr2_high << SW_BA_1_ADDR2_HIGH_OFFSET) ;
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_BA_1_BITMAP_CTRL_1_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_BA_1_BITMAP_CTRL_1_ADDR), tmp);
}
static __inline void mac_ba_1_bitmap_ctrl_1_unpack(volatile uint32_t* sw_ba_1_addr1_chos, volatile uint32_t* sw_ba_1_tid, volatile uint32_t* sw_ba_1_addr2_high)
{
	uint32_t tmp;

	tmp = mac_ba_1_bitmap_ctrl_1_get();
	*sw_ba_1_addr1_chos = (tmp & ((uint32_t)SW_BA_1_ADDR1_CHOS_MASK)) >> SW_BA_1_ADDR1_CHOS_OFFSET;
	*sw_ba_1_tid = (tmp & ((uint32_t)SW_BA_1_TID_MASK)) >> SW_BA_1_TID_OFFSET;
	*sw_ba_1_addr2_high = (tmp & ((uint32_t)SW_BA_1_ADDR2_HIGH_MASK)) >> SW_BA_1_ADDR2_HIGH_OFFSET;
}
static __inline void mac_ba_1_bitmap_ctrl_2_sw_ba_1_winstart_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_1_BITMAP_CTRL_2_ADDR);
	tmp &= ~SW_BA_1_WINSTART_MASK;
	tmp |= (value << SW_BA_1_WINSTART_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_BA_1_BITMAP_CTRL_2_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_BA_1_BITMAP_CTRL_2_ADDR), tmp);
}
static __inline uint32_t mac_ba_1_bitmap_ctrl_2_sw_ba_1_winstart_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_1_BITMAP_CTRL_2_ADDR)) & SW_BA_1_WINSTART_MASK) >> SW_BA_1_WINSTART_OFFSET;
}
static __inline void mac_ba_1_bitmap_ctrl_2_sw_ba_1_bitmap_force_zero_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_1_BITMAP_CTRL_2_ADDR);
	tmp &= ~SW_BA_1_BITMAP_FORCE_ZERO_MASK;
	tmp |= (value << SW_BA_1_BITMAP_FORCE_ZERO_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_BA_1_BITMAP_CTRL_2_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_BA_1_BITMAP_CTRL_2_ADDR), tmp);
}
static __inline uint32_t mac_ba_1_bitmap_ctrl_2_sw_ba_1_bitmap_force_zero_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_1_BITMAP_CTRL_2_ADDR)) & SW_BA_1_BITMAP_FORCE_ZERO_MASK) >> SW_BA_1_BITMAP_FORCE_ZERO_OFFSET;
}
static __inline void mac_ba_1_bitmap_ctrl_2_sw_ba_1_win_set_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_1_BITMAP_CTRL_2_ADDR);
	tmp &= ~SW_BA_1_WIN_SET_MASK;
	tmp |= (value << SW_BA_1_WIN_SET_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_BA_1_BITMAP_CTRL_2_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_BA_1_BITMAP_CTRL_2_ADDR), tmp);
}
static __inline void mac_ba_1_bitmap_ctrl_2_sw_ba_1_winoffset_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_1_BITMAP_CTRL_2_ADDR);
	tmp &= ~SW_BA_1_WINOFFSET_MASK;
	tmp |= (value << SW_BA_1_WINOFFSET_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_BA_1_BITMAP_CTRL_2_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_BA_1_BITMAP_CTRL_2_ADDR), tmp);
}
static __inline uint32_t mac_ba_1_bitmap_ctrl_2_sw_ba_1_winoffset_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_1_BITMAP_CTRL_2_ADDR)) & SW_BA_1_WINOFFSET_MASK) >> SW_BA_1_WINOFFSET_OFFSET;
}
static __inline void mac_ba_1_bitmap_ctrl_2_set(uint32_t value)
{
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_BA_1_BITMAP_CTRL_2_ADDR, value);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_BA_1_BITMAP_CTRL_2_ADDR), value);
}
static __inline uint32_t mac_ba_1_bitmap_ctrl_2_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_1_BITMAP_CTRL_2_ADDR));
}
static __inline void mac_ba_1_bitmap_ctrl_2_pack(uint32_t sw_ba_1_winstart, uint32_t sw_ba_1_bitmap_force_zero, uint32_t sw_ba_1_win_set, uint32_t sw_ba_1_winoffset)
{
	uint32_t tmp;

	assert((((uint32_t)sw_ba_1_winstart << SW_BA_1_WINSTART_OFFSET) & ~((uint32_t)SW_BA_1_WINSTART_MASK)) == 0);
	assert((((uint32_t)sw_ba_1_bitmap_force_zero << SW_BA_1_BITMAP_FORCE_ZERO_OFFSET) & ~((uint32_t)SW_BA_1_BITMAP_FORCE_ZERO_MASK)) == 0);
	assert((((uint32_t)sw_ba_1_win_set << SW_BA_1_WIN_SET_OFFSET) & ~((uint32_t)SW_BA_1_WIN_SET_MASK)) == 0);
	assert((((uint32_t)sw_ba_1_winoffset << SW_BA_1_WINOFFSET_OFFSET) & ~((uint32_t)SW_BA_1_WINOFFSET_MASK)) == 0);
	tmp =
		((uint32_t)sw_ba_1_winstart << SW_BA_1_WINSTART_OFFSET) |
		((uint32_t)sw_ba_1_bitmap_force_zero << SW_BA_1_BITMAP_FORCE_ZERO_OFFSET) |
		((uint32_t)sw_ba_1_win_set << SW_BA_1_WIN_SET_OFFSET) |
		((uint32_t)sw_ba_1_winoffset << SW_BA_1_WINOFFSET_OFFSET) ;
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_BA_1_BITMAP_CTRL_2_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_BA_1_BITMAP_CTRL_2_ADDR), tmp);
}
static __inline void mac_ba_1_bitmap_ctrl_2_unpack(volatile uint32_t* sw_ba_1_winstart, volatile uint32_t* sw_ba_1_bitmap_force_zero, volatile uint32_t* sw_ba_1_winoffset)
{
	uint32_t tmp;

	tmp = mac_ba_1_bitmap_ctrl_2_get();
	*sw_ba_1_winstart = (tmp & ((uint32_t)SW_BA_1_WINSTART_MASK)) >> SW_BA_1_WINSTART_OFFSET;
	*sw_ba_1_bitmap_force_zero = (tmp & ((uint32_t)SW_BA_1_BITMAP_FORCE_ZERO_MASK)) >> SW_BA_1_BITMAP_FORCE_ZERO_OFFSET;
	*sw_ba_1_winoffset = (tmp & ((uint32_t)SW_BA_1_WINOFFSET_MASK)) >> SW_BA_1_WINOFFSET_OFFSET;
}
static __inline uint32_t mac_ba_1_bitmap_sts_0_sw_ro_ba_1_winstart_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_1_BITMAP_STS_0_ADDR)) & SW_RO_BA_1_WINSTART_MASK) >> SW_RO_BA_1_WINSTART_OFFSET;
}
static __inline uint32_t mac_ba_1_bitmap_sts_0_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_1_BITMAP_STS_0_ADDR));
}
static __inline void mac_ba_1_bitmap_sts_0_unpack(volatile uint32_t* sw_ro_ba_1_winstart)
{
	uint32_t tmp;

	tmp = mac_ba_1_bitmap_sts_0_get();
	*sw_ro_ba_1_winstart = (tmp & ((uint32_t)SW_RO_BA_1_WINSTART_MASK)) >> SW_RO_BA_1_WINSTART_OFFSET;
}
static __inline uint32_t mac_ba_1_bitmap_sts_1_sw_ro_ba_1_bitmap_high_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_1_BITMAP_STS_1_ADDR)) & SW_RO_BA_1_BITMAP_HIGH_MASK) >> SW_RO_BA_1_BITMAP_HIGH_OFFSET;
}
static __inline uint32_t mac_ba_1_bitmap_sts_1_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_1_BITMAP_STS_1_ADDR));
}
static __inline void mac_ba_1_bitmap_sts_1_unpack(volatile uint32_t* sw_ro_ba_1_bitmap_high)
{
	uint32_t tmp;

	tmp = mac_ba_1_bitmap_sts_1_get();
	*sw_ro_ba_1_bitmap_high = (tmp & ((uint32_t)SW_RO_BA_1_BITMAP_HIGH_MASK)) >> SW_RO_BA_1_BITMAP_HIGH_OFFSET;
}
static __inline uint32_t mac_ba_1_bitmap_sts_2_sw_ro_ba_1_bitmap_low_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_1_BITMAP_STS_2_ADDR)) & SW_RO_BA_1_BITMAP_LOW_MASK) >> SW_RO_BA_1_BITMAP_LOW_OFFSET;
}
static __inline uint32_t mac_ba_1_bitmap_sts_2_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_1_BITMAP_STS_2_ADDR));
}
static __inline void mac_ba_1_bitmap_sts_2_unpack(volatile uint32_t* sw_ro_ba_1_bitmap_low)
{
	uint32_t tmp;

	tmp = mac_ba_1_bitmap_sts_2_get();
	*sw_ro_ba_1_bitmap_low = (tmp & ((uint32_t)SW_RO_BA_1_BITMAP_LOW_MASK)) >> SW_RO_BA_1_BITMAP_LOW_OFFSET;
}
static __inline void mac_ba_2_bitmap_ctrl_0_sw_ba_2_addr2_low_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_2_BITMAP_CTRL_0_ADDR);
	tmp &= ~SW_BA_2_ADDR2_LOW_MASK;
	tmp |= (value << SW_BA_2_ADDR2_LOW_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_BA_2_BITMAP_CTRL_0_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_BA_2_BITMAP_CTRL_0_ADDR), tmp);
}
static __inline uint32_t mac_ba_2_bitmap_ctrl_0_sw_ba_2_addr2_low_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_2_BITMAP_CTRL_0_ADDR)) & SW_BA_2_ADDR2_LOW_MASK) >> SW_BA_2_ADDR2_LOW_OFFSET;
}
static __inline void mac_ba_2_bitmap_ctrl_0_set(uint32_t value)
{
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_BA_2_BITMAP_CTRL_0_ADDR, value);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_BA_2_BITMAP_CTRL_0_ADDR), value);
}
static __inline uint32_t mac_ba_2_bitmap_ctrl_0_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_2_BITMAP_CTRL_0_ADDR));
}
static __inline void mac_ba_2_bitmap_ctrl_0_pack(uint32_t sw_ba_2_addr2_low)
{
	uint32_t tmp;

	assert((((uint32_t)sw_ba_2_addr2_low << SW_BA_2_ADDR2_LOW_OFFSET) & ~((uint32_t)SW_BA_2_ADDR2_LOW_MASK)) == 0);
	tmp =
		((uint32_t)sw_ba_2_addr2_low << SW_BA_2_ADDR2_LOW_OFFSET) ;
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_BA_2_BITMAP_CTRL_0_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_BA_2_BITMAP_CTRL_0_ADDR), tmp);
}
static __inline void mac_ba_2_bitmap_ctrl_0_unpack(volatile uint32_t* sw_ba_2_addr2_low)
{
	uint32_t tmp;

	tmp = mac_ba_2_bitmap_ctrl_0_get();
	*sw_ba_2_addr2_low = (tmp & ((uint32_t)SW_BA_2_ADDR2_LOW_MASK)) >> SW_BA_2_ADDR2_LOW_OFFSET;
}
static __inline void mac_ba_2_bitmap_ctrl_1_sw_ba_2_addr1_chos_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_2_BITMAP_CTRL_1_ADDR);
	tmp &= ~SW_BA_2_ADDR1_CHOS_MASK;
	tmp |= (value << SW_BA_2_ADDR1_CHOS_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_BA_2_BITMAP_CTRL_1_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_BA_2_BITMAP_CTRL_1_ADDR), tmp);
}
static __inline uint32_t mac_ba_2_bitmap_ctrl_1_sw_ba_2_addr1_chos_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_2_BITMAP_CTRL_1_ADDR)) & SW_BA_2_ADDR1_CHOS_MASK) >> SW_BA_2_ADDR1_CHOS_OFFSET;
}
static __inline void mac_ba_2_bitmap_ctrl_1_sw_ba_2_tid_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_2_BITMAP_CTRL_1_ADDR);
	tmp &= ~SW_BA_2_TID_MASK;
	tmp |= (value << SW_BA_2_TID_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_BA_2_BITMAP_CTRL_1_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_BA_2_BITMAP_CTRL_1_ADDR), tmp);
}
static __inline uint32_t mac_ba_2_bitmap_ctrl_1_sw_ba_2_tid_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_2_BITMAP_CTRL_1_ADDR)) & SW_BA_2_TID_MASK) >> SW_BA_2_TID_OFFSET;
}
static __inline void mac_ba_2_bitmap_ctrl_1_sw_ba_2_addr2_high_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_2_BITMAP_CTRL_1_ADDR);
	tmp &= ~SW_BA_2_ADDR2_HIGH_MASK;
	tmp |= (value << SW_BA_2_ADDR2_HIGH_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_BA_2_BITMAP_CTRL_1_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_BA_2_BITMAP_CTRL_1_ADDR), tmp);
}
static __inline uint32_t mac_ba_2_bitmap_ctrl_1_sw_ba_2_addr2_high_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_2_BITMAP_CTRL_1_ADDR)) & SW_BA_2_ADDR2_HIGH_MASK) >> SW_BA_2_ADDR2_HIGH_OFFSET;
}
static __inline void mac_ba_2_bitmap_ctrl_1_set(uint32_t value)
{
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_BA_2_BITMAP_CTRL_1_ADDR, value);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_BA_2_BITMAP_CTRL_1_ADDR), value);
}
static __inline uint32_t mac_ba_2_bitmap_ctrl_1_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_2_BITMAP_CTRL_1_ADDR));
}
static __inline void mac_ba_2_bitmap_ctrl_1_pack(uint32_t sw_ba_2_addr1_chos, uint32_t sw_ba_2_tid, uint32_t sw_ba_2_addr2_high)
{
	uint32_t tmp;

	assert((((uint32_t)sw_ba_2_addr1_chos << SW_BA_2_ADDR1_CHOS_OFFSET) & ~((uint32_t)SW_BA_2_ADDR1_CHOS_MASK)) == 0);
	assert((((uint32_t)sw_ba_2_tid << SW_BA_2_TID_OFFSET) & ~((uint32_t)SW_BA_2_TID_MASK)) == 0);
	assert((((uint32_t)sw_ba_2_addr2_high << SW_BA_2_ADDR2_HIGH_OFFSET) & ~((uint32_t)SW_BA_2_ADDR2_HIGH_MASK)) == 0);
	tmp =
		((uint32_t)sw_ba_2_addr1_chos << SW_BA_2_ADDR1_CHOS_OFFSET) |
		((uint32_t)sw_ba_2_tid << SW_BA_2_TID_OFFSET) |
		((uint32_t)sw_ba_2_addr2_high << SW_BA_2_ADDR2_HIGH_OFFSET) ;
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_BA_2_BITMAP_CTRL_1_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_BA_2_BITMAP_CTRL_1_ADDR), tmp);
}
static __inline void mac_ba_2_bitmap_ctrl_1_unpack(volatile uint32_t* sw_ba_2_addr1_chos, volatile uint32_t* sw_ba_2_tid, volatile uint32_t* sw_ba_2_addr2_high)
{
	uint32_t tmp;

	tmp = mac_ba_2_bitmap_ctrl_1_get();
	*sw_ba_2_addr1_chos = (tmp & ((uint32_t)SW_BA_2_ADDR1_CHOS_MASK)) >> SW_BA_2_ADDR1_CHOS_OFFSET;
	*sw_ba_2_tid = (tmp & ((uint32_t)SW_BA_2_TID_MASK)) >> SW_BA_2_TID_OFFSET;
	*sw_ba_2_addr2_high = (tmp & ((uint32_t)SW_BA_2_ADDR2_HIGH_MASK)) >> SW_BA_2_ADDR2_HIGH_OFFSET;
}
static __inline void mac_ba_2_bitmap_ctrl_2_sw_ba_2_winstart_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_2_BITMAP_CTRL_2_ADDR);
	tmp &= ~SW_BA_2_WINSTART_MASK;
	tmp |= (value << SW_BA_2_WINSTART_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_BA_2_BITMAP_CTRL_2_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_BA_2_BITMAP_CTRL_2_ADDR), tmp);
}
static __inline uint32_t mac_ba_2_bitmap_ctrl_2_sw_ba_2_winstart_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_2_BITMAP_CTRL_2_ADDR)) & SW_BA_2_WINSTART_MASK) >> SW_BA_2_WINSTART_OFFSET;
}
static __inline void mac_ba_2_bitmap_ctrl_2_sw_ba_2_bitmap_force_zero_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_2_BITMAP_CTRL_2_ADDR);
	tmp &= ~SW_BA_2_BITMAP_FORCE_ZERO_MASK;
	tmp |= (value << SW_BA_2_BITMAP_FORCE_ZERO_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_BA_2_BITMAP_CTRL_2_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_BA_2_BITMAP_CTRL_2_ADDR), tmp);
}
static __inline uint32_t mac_ba_2_bitmap_ctrl_2_sw_ba_2_bitmap_force_zero_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_2_BITMAP_CTRL_2_ADDR)) & SW_BA_2_BITMAP_FORCE_ZERO_MASK) >> SW_BA_2_BITMAP_FORCE_ZERO_OFFSET;
}
static __inline void mac_ba_2_bitmap_ctrl_2_sw_ba_2_win_set_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_2_BITMAP_CTRL_2_ADDR);
	tmp &= ~SW_BA_2_WIN_SET_MASK;
	tmp |= (value << SW_BA_2_WIN_SET_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_BA_2_BITMAP_CTRL_2_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_BA_2_BITMAP_CTRL_2_ADDR), tmp);
}
static __inline void mac_ba_2_bitmap_ctrl_2_sw_ba_2_winoffset_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_2_BITMAP_CTRL_2_ADDR);
	tmp &= ~SW_BA_2_WINOFFSET_MASK;
	tmp |= (value << SW_BA_2_WINOFFSET_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_BA_2_BITMAP_CTRL_2_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_BA_2_BITMAP_CTRL_2_ADDR), tmp);
}
static __inline uint32_t mac_ba_2_bitmap_ctrl_2_sw_ba_2_winoffset_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_2_BITMAP_CTRL_2_ADDR)) & SW_BA_2_WINOFFSET_MASK) >> SW_BA_2_WINOFFSET_OFFSET;
}
static __inline void mac_ba_2_bitmap_ctrl_2_set(uint32_t value)
{
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_BA_2_BITMAP_CTRL_2_ADDR, value);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_BA_2_BITMAP_CTRL_2_ADDR), value);
}
static __inline uint32_t mac_ba_2_bitmap_ctrl_2_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_2_BITMAP_CTRL_2_ADDR));
}
static __inline void mac_ba_2_bitmap_ctrl_2_pack(uint32_t sw_ba_2_winstart, uint32_t sw_ba_2_bitmap_force_zero, uint32_t sw_ba_2_win_set, uint32_t sw_ba_2_winoffset)
{
	uint32_t tmp;

	assert((((uint32_t)sw_ba_2_winstart << SW_BA_2_WINSTART_OFFSET) & ~((uint32_t)SW_BA_2_WINSTART_MASK)) == 0);
	assert((((uint32_t)sw_ba_2_bitmap_force_zero << SW_BA_2_BITMAP_FORCE_ZERO_OFFSET) & ~((uint32_t)SW_BA_2_BITMAP_FORCE_ZERO_MASK)) == 0);
	assert((((uint32_t)sw_ba_2_win_set << SW_BA_2_WIN_SET_OFFSET) & ~((uint32_t)SW_BA_2_WIN_SET_MASK)) == 0);
	assert((((uint32_t)sw_ba_2_winoffset << SW_BA_2_WINOFFSET_OFFSET) & ~((uint32_t)SW_BA_2_WINOFFSET_MASK)) == 0);
	tmp =
		((uint32_t)sw_ba_2_winstart << SW_BA_2_WINSTART_OFFSET) |
		((uint32_t)sw_ba_2_bitmap_force_zero << SW_BA_2_BITMAP_FORCE_ZERO_OFFSET) |
		((uint32_t)sw_ba_2_win_set << SW_BA_2_WIN_SET_OFFSET) |
		((uint32_t)sw_ba_2_winoffset << SW_BA_2_WINOFFSET_OFFSET) ;
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_BA_2_BITMAP_CTRL_2_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_BA_2_BITMAP_CTRL_2_ADDR), tmp);
}
static __inline void mac_ba_2_bitmap_ctrl_2_unpack(volatile uint32_t* sw_ba_2_winstart, volatile uint32_t* sw_ba_2_bitmap_force_zero, volatile uint32_t* sw_ba_2_winoffset)
{
	uint32_t tmp;

	tmp = mac_ba_2_bitmap_ctrl_2_get();
	*sw_ba_2_winstart = (tmp & ((uint32_t)SW_BA_2_WINSTART_MASK)) >> SW_BA_2_WINSTART_OFFSET;
	*sw_ba_2_bitmap_force_zero = (tmp & ((uint32_t)SW_BA_2_BITMAP_FORCE_ZERO_MASK)) >> SW_BA_2_BITMAP_FORCE_ZERO_OFFSET;
	*sw_ba_2_winoffset = (tmp & ((uint32_t)SW_BA_2_WINOFFSET_MASK)) >> SW_BA_2_WINOFFSET_OFFSET;
}
static __inline uint32_t mac_ba_2_bitmap_sts_0_sw_ro_ba_2_winstart_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_2_BITMAP_STS_0_ADDR)) & SW_RO_BA_2_WINSTART_MASK) >> SW_RO_BA_2_WINSTART_OFFSET;
}
static __inline uint32_t mac_ba_2_bitmap_sts_0_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_2_BITMAP_STS_0_ADDR));
}
static __inline void mac_ba_2_bitmap_sts_0_unpack(volatile uint32_t* sw_ro_ba_2_winstart)
{
	uint32_t tmp;

	tmp = mac_ba_2_bitmap_sts_0_get();
	*sw_ro_ba_2_winstart = (tmp & ((uint32_t)SW_RO_BA_2_WINSTART_MASK)) >> SW_RO_BA_2_WINSTART_OFFSET;
}
static __inline uint32_t mac_ba_2_bitmap_sts_1_sw_ro_ba_2_bitmap_high_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_2_BITMAP_STS_1_ADDR)) & SW_RO_BA_2_BITMAP_HIGH_MASK) >> SW_RO_BA_2_BITMAP_HIGH_OFFSET;
}
static __inline uint32_t mac_ba_2_bitmap_sts_1_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_2_BITMAP_STS_1_ADDR));
}
static __inline void mac_ba_2_bitmap_sts_1_unpack(volatile uint32_t* sw_ro_ba_2_bitmap_high)
{
	uint32_t tmp;

	tmp = mac_ba_2_bitmap_sts_1_get();
	*sw_ro_ba_2_bitmap_high = (tmp & ((uint32_t)SW_RO_BA_2_BITMAP_HIGH_MASK)) >> SW_RO_BA_2_BITMAP_HIGH_OFFSET;
}
static __inline uint32_t mac_ba_2_bitmap_sts_2_sw_ro_ba_2_bitmap_low_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_2_BITMAP_STS_2_ADDR)) & SW_RO_BA_2_BITMAP_LOW_MASK) >> SW_RO_BA_2_BITMAP_LOW_OFFSET;
}
static __inline uint32_t mac_ba_2_bitmap_sts_2_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_2_BITMAP_STS_2_ADDR));
}
static __inline void mac_ba_2_bitmap_sts_2_unpack(volatile uint32_t* sw_ro_ba_2_bitmap_low)
{
	uint32_t tmp;

	tmp = mac_ba_2_bitmap_sts_2_get();
	*sw_ro_ba_2_bitmap_low = (tmp & ((uint32_t)SW_RO_BA_2_BITMAP_LOW_MASK)) >> SW_RO_BA_2_BITMAP_LOW_OFFSET;
}
static __inline void mac_ba_3_bitmap_ctrl_0_sw_ba_3_addr2_low_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_3_BITMAP_CTRL_0_ADDR);
	tmp &= ~SW_BA_3_ADDR2_LOW_MASK;
	tmp |= (value << SW_BA_3_ADDR2_LOW_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_BA_3_BITMAP_CTRL_0_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_BA_3_BITMAP_CTRL_0_ADDR), tmp);
}
static __inline uint32_t mac_ba_3_bitmap_ctrl_0_sw_ba_3_addr2_low_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_3_BITMAP_CTRL_0_ADDR)) & SW_BA_3_ADDR2_LOW_MASK) >> SW_BA_3_ADDR2_LOW_OFFSET;
}
static __inline void mac_ba_3_bitmap_ctrl_0_set(uint32_t value)
{
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_BA_3_BITMAP_CTRL_0_ADDR, value);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_BA_3_BITMAP_CTRL_0_ADDR), value);
}
static __inline uint32_t mac_ba_3_bitmap_ctrl_0_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_3_BITMAP_CTRL_0_ADDR));
}
static __inline void mac_ba_3_bitmap_ctrl_0_pack(uint32_t sw_ba_3_addr2_low)
{
	uint32_t tmp;

	assert((((uint32_t)sw_ba_3_addr2_low << SW_BA_3_ADDR2_LOW_OFFSET) & ~((uint32_t)SW_BA_3_ADDR2_LOW_MASK)) == 0);
	tmp =
		((uint32_t)sw_ba_3_addr2_low << SW_BA_3_ADDR2_LOW_OFFSET) ;
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_BA_3_BITMAP_CTRL_0_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_BA_3_BITMAP_CTRL_0_ADDR), tmp);
}
static __inline void mac_ba_3_bitmap_ctrl_0_unpack(volatile uint32_t* sw_ba_3_addr2_low)
{
	uint32_t tmp;

	tmp = mac_ba_3_bitmap_ctrl_0_get();
	*sw_ba_3_addr2_low = (tmp & ((uint32_t)SW_BA_3_ADDR2_LOW_MASK)) >> SW_BA_3_ADDR2_LOW_OFFSET;
}
static __inline void mac_ba_3_bitmap_ctrl_1_sw_ba_3_addr1_chos_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_3_BITMAP_CTRL_1_ADDR);
	tmp &= ~SW_BA_3_ADDR1_CHOS_MASK;
	tmp |= (value << SW_BA_3_ADDR1_CHOS_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_BA_3_BITMAP_CTRL_1_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_BA_3_BITMAP_CTRL_1_ADDR), tmp);
}
static __inline uint32_t mac_ba_3_bitmap_ctrl_1_sw_ba_3_addr1_chos_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_3_BITMAP_CTRL_1_ADDR)) & SW_BA_3_ADDR1_CHOS_MASK) >> SW_BA_3_ADDR1_CHOS_OFFSET;
}
static __inline void mac_ba_3_bitmap_ctrl_1_sw_ba_3_tid_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_3_BITMAP_CTRL_1_ADDR);
	tmp &= ~SW_BA_3_TID_MASK;
	tmp |= (value << SW_BA_3_TID_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_BA_3_BITMAP_CTRL_1_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_BA_3_BITMAP_CTRL_1_ADDR), tmp);
}
static __inline uint32_t mac_ba_3_bitmap_ctrl_1_sw_ba_3_tid_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_3_BITMAP_CTRL_1_ADDR)) & SW_BA_3_TID_MASK) >> SW_BA_3_TID_OFFSET;
}
static __inline void mac_ba_3_bitmap_ctrl_1_sw_ba_3_addr2_high_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_3_BITMAP_CTRL_1_ADDR);
	tmp &= ~SW_BA_3_ADDR2_HIGH_MASK;
	tmp |= (value << SW_BA_3_ADDR2_HIGH_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_BA_3_BITMAP_CTRL_1_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_BA_3_BITMAP_CTRL_1_ADDR), tmp);
}
static __inline uint32_t mac_ba_3_bitmap_ctrl_1_sw_ba_3_addr2_high_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_3_BITMAP_CTRL_1_ADDR)) & SW_BA_3_ADDR2_HIGH_MASK) >> SW_BA_3_ADDR2_HIGH_OFFSET;
}
static __inline void mac_ba_3_bitmap_ctrl_1_set(uint32_t value)
{
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_BA_3_BITMAP_CTRL_1_ADDR, value);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_BA_3_BITMAP_CTRL_1_ADDR), value);
}
static __inline uint32_t mac_ba_3_bitmap_ctrl_1_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_3_BITMAP_CTRL_1_ADDR));
}
static __inline void mac_ba_3_bitmap_ctrl_1_pack(uint32_t sw_ba_3_addr1_chos, uint32_t sw_ba_3_tid, uint32_t sw_ba_3_addr2_high)
{
	uint32_t tmp;

	assert((((uint32_t)sw_ba_3_addr1_chos << SW_BA_3_ADDR1_CHOS_OFFSET) & ~((uint32_t)SW_BA_3_ADDR1_CHOS_MASK)) == 0);
	assert((((uint32_t)sw_ba_3_tid << SW_BA_3_TID_OFFSET) & ~((uint32_t)SW_BA_3_TID_MASK)) == 0);
	assert((((uint32_t)sw_ba_3_addr2_high << SW_BA_3_ADDR2_HIGH_OFFSET) & ~((uint32_t)SW_BA_3_ADDR2_HIGH_MASK)) == 0);
	tmp =
		((uint32_t)sw_ba_3_addr1_chos << SW_BA_3_ADDR1_CHOS_OFFSET) |
		((uint32_t)sw_ba_3_tid << SW_BA_3_TID_OFFSET) |
		((uint32_t)sw_ba_3_addr2_high << SW_BA_3_ADDR2_HIGH_OFFSET) ;
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_BA_3_BITMAP_CTRL_1_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_BA_3_BITMAP_CTRL_1_ADDR), tmp);
}
static __inline void mac_ba_3_bitmap_ctrl_1_unpack(volatile uint32_t* sw_ba_3_addr1_chos, volatile uint32_t* sw_ba_3_tid, volatile uint32_t* sw_ba_3_addr2_high)
{
	uint32_t tmp;

	tmp = mac_ba_3_bitmap_ctrl_1_get();
	*sw_ba_3_addr1_chos = (tmp & ((uint32_t)SW_BA_3_ADDR1_CHOS_MASK)) >> SW_BA_3_ADDR1_CHOS_OFFSET;
	*sw_ba_3_tid = (tmp & ((uint32_t)SW_BA_3_TID_MASK)) >> SW_BA_3_TID_OFFSET;
	*sw_ba_3_addr2_high = (tmp & ((uint32_t)SW_BA_3_ADDR2_HIGH_MASK)) >> SW_BA_3_ADDR2_HIGH_OFFSET;
}
static __inline void mac_ba_3_bitmap_ctrl_2_sw_ba_3_winstart_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_3_BITMAP_CTRL_2_ADDR);
	tmp &= ~SW_BA_3_WINSTART_MASK;
	tmp |= (value << SW_BA_3_WINSTART_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_BA_3_BITMAP_CTRL_2_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_BA_3_BITMAP_CTRL_2_ADDR), tmp);
}
static __inline uint32_t mac_ba_3_bitmap_ctrl_2_sw_ba_3_winstart_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_3_BITMAP_CTRL_2_ADDR)) & SW_BA_3_WINSTART_MASK) >> SW_BA_3_WINSTART_OFFSET;
}
static __inline void mac_ba_3_bitmap_ctrl_2_sw_ba_3_bitmap_force_zero_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_3_BITMAP_CTRL_2_ADDR);
	tmp &= ~SW_BA_3_BITMAP_FORCE_ZERO_MASK;
	tmp |= (value << SW_BA_3_BITMAP_FORCE_ZERO_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_BA_3_BITMAP_CTRL_2_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_BA_3_BITMAP_CTRL_2_ADDR), tmp);
}
static __inline uint32_t mac_ba_3_bitmap_ctrl_2_sw_ba_3_bitmap_force_zero_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_3_BITMAP_CTRL_2_ADDR)) & SW_BA_3_BITMAP_FORCE_ZERO_MASK) >> SW_BA_3_BITMAP_FORCE_ZERO_OFFSET;
}
static __inline void mac_ba_3_bitmap_ctrl_2_sw_ba_3_win_set_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_3_BITMAP_CTRL_2_ADDR);
	tmp &= ~SW_BA_3_WIN_SET_MASK;
	tmp |= (value << SW_BA_3_WIN_SET_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_BA_3_BITMAP_CTRL_2_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_BA_3_BITMAP_CTRL_2_ADDR), tmp);
}
static __inline void mac_ba_3_bitmap_ctrl_2_sw_ba_3_winoffset_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_3_BITMAP_CTRL_2_ADDR);
	tmp &= ~SW_BA_3_WINOFFSET_MASK;
	tmp |= (value << SW_BA_3_WINOFFSET_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_BA_3_BITMAP_CTRL_2_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_BA_3_BITMAP_CTRL_2_ADDR), tmp);
}
static __inline uint32_t mac_ba_3_bitmap_ctrl_2_sw_ba_3_winoffset_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_3_BITMAP_CTRL_2_ADDR)) & SW_BA_3_WINOFFSET_MASK) >> SW_BA_3_WINOFFSET_OFFSET;
}
static __inline void mac_ba_3_bitmap_ctrl_2_set(uint32_t value)
{
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_BA_3_BITMAP_CTRL_2_ADDR, value);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_BA_3_BITMAP_CTRL_2_ADDR), value);
}
static __inline uint32_t mac_ba_3_bitmap_ctrl_2_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_3_BITMAP_CTRL_2_ADDR));
}
static __inline void mac_ba_3_bitmap_ctrl_2_pack(uint32_t sw_ba_3_winstart, uint32_t sw_ba_3_bitmap_force_zero, uint32_t sw_ba_3_win_set, uint32_t sw_ba_3_winoffset)
{
	uint32_t tmp;

	assert((((uint32_t)sw_ba_3_winstart << SW_BA_3_WINSTART_OFFSET) & ~((uint32_t)SW_BA_3_WINSTART_MASK)) == 0);
	assert((((uint32_t)sw_ba_3_bitmap_force_zero << SW_BA_3_BITMAP_FORCE_ZERO_OFFSET) & ~((uint32_t)SW_BA_3_BITMAP_FORCE_ZERO_MASK)) == 0);
	assert((((uint32_t)sw_ba_3_win_set << SW_BA_3_WIN_SET_OFFSET) & ~((uint32_t)SW_BA_3_WIN_SET_MASK)) == 0);
	assert((((uint32_t)sw_ba_3_winoffset << SW_BA_3_WINOFFSET_OFFSET) & ~((uint32_t)SW_BA_3_WINOFFSET_MASK)) == 0);
	tmp =
		((uint32_t)sw_ba_3_winstart << SW_BA_3_WINSTART_OFFSET) |
		((uint32_t)sw_ba_3_bitmap_force_zero << SW_BA_3_BITMAP_FORCE_ZERO_OFFSET) |
		((uint32_t)sw_ba_3_win_set << SW_BA_3_WIN_SET_OFFSET) |
		((uint32_t)sw_ba_3_winoffset << SW_BA_3_WINOFFSET_OFFSET) ;
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_BA_3_BITMAP_CTRL_2_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_BA_3_BITMAP_CTRL_2_ADDR), tmp);
}
static __inline void mac_ba_3_bitmap_ctrl_2_unpack(volatile uint32_t* sw_ba_3_winstart, volatile uint32_t* sw_ba_3_bitmap_force_zero, volatile uint32_t* sw_ba_3_winoffset)
{
	uint32_t tmp;

	tmp = mac_ba_3_bitmap_ctrl_2_get();
	*sw_ba_3_winstart = (tmp & ((uint32_t)SW_BA_3_WINSTART_MASK)) >> SW_BA_3_WINSTART_OFFSET;
	*sw_ba_3_bitmap_force_zero = (tmp & ((uint32_t)SW_BA_3_BITMAP_FORCE_ZERO_MASK)) >> SW_BA_3_BITMAP_FORCE_ZERO_OFFSET;
	*sw_ba_3_winoffset = (tmp & ((uint32_t)SW_BA_3_WINOFFSET_MASK)) >> SW_BA_3_WINOFFSET_OFFSET;
}
static __inline uint32_t mac_ba_3_bitmap_sts_0_sw_ro_ba_3_winstart_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_3_BITMAP_STS_0_ADDR)) & SW_RO_BA_3_WINSTART_MASK) >> SW_RO_BA_3_WINSTART_OFFSET;
}
static __inline uint32_t mac_ba_3_bitmap_sts_0_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_3_BITMAP_STS_0_ADDR));
}
static __inline void mac_ba_3_bitmap_sts_0_unpack(volatile uint32_t* sw_ro_ba_3_winstart)
{
	uint32_t tmp;

	tmp = mac_ba_3_bitmap_sts_0_get();
	*sw_ro_ba_3_winstart = (tmp & ((uint32_t)SW_RO_BA_3_WINSTART_MASK)) >> SW_RO_BA_3_WINSTART_OFFSET;
}
static __inline uint32_t mac_ba_3_bitmap_sts_1_sw_ro_ba_3_bitmap_high_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_3_BITMAP_STS_1_ADDR)) & SW_RO_BA_3_BITMAP_HIGH_MASK) >> SW_RO_BA_3_BITMAP_HIGH_OFFSET;
}
static __inline uint32_t mac_ba_3_bitmap_sts_1_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_3_BITMAP_STS_1_ADDR));
}
static __inline void mac_ba_3_bitmap_sts_1_unpack(volatile uint32_t* sw_ro_ba_3_bitmap_high)
{
	uint32_t tmp;

	tmp = mac_ba_3_bitmap_sts_1_get();
	*sw_ro_ba_3_bitmap_high = (tmp & ((uint32_t)SW_RO_BA_3_BITMAP_HIGH_MASK)) >> SW_RO_BA_3_BITMAP_HIGH_OFFSET;
}
static __inline uint32_t mac_ba_3_bitmap_sts_2_sw_ro_ba_3_bitmap_low_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_3_BITMAP_STS_2_ADDR)) & SW_RO_BA_3_BITMAP_LOW_MASK) >> SW_RO_BA_3_BITMAP_LOW_OFFSET;
}
static __inline uint32_t mac_ba_3_bitmap_sts_2_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_3_BITMAP_STS_2_ADDR));
}
static __inline void mac_ba_3_bitmap_sts_2_unpack(volatile uint32_t* sw_ro_ba_3_bitmap_low)
{
	uint32_t tmp;

	tmp = mac_ba_3_bitmap_sts_2_get();
	*sw_ro_ba_3_bitmap_low = (tmp & ((uint32_t)SW_RO_BA_3_BITMAP_LOW_MASK)) >> SW_RO_BA_3_BITMAP_LOW_OFFSET;
}
static __inline void mac_ba_4_bitmap_ctrl_0_sw_ba_4_addr2_low_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_4_BITMAP_CTRL_0_ADDR);
	tmp &= ~SW_BA_4_ADDR2_LOW_MASK;
	tmp |= (value << SW_BA_4_ADDR2_LOW_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_BA_4_BITMAP_CTRL_0_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_BA_4_BITMAP_CTRL_0_ADDR), tmp);
}
static __inline uint32_t mac_ba_4_bitmap_ctrl_0_sw_ba_4_addr2_low_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_4_BITMAP_CTRL_0_ADDR)) & SW_BA_4_ADDR2_LOW_MASK) >> SW_BA_4_ADDR2_LOW_OFFSET;
}
static __inline void mac_ba_4_bitmap_ctrl_0_set(uint32_t value)
{
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_BA_4_BITMAP_CTRL_0_ADDR, value);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_BA_4_BITMAP_CTRL_0_ADDR), value);
}
static __inline uint32_t mac_ba_4_bitmap_ctrl_0_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_4_BITMAP_CTRL_0_ADDR));
}
static __inline void mac_ba_4_bitmap_ctrl_0_pack(uint32_t sw_ba_4_addr2_low)
{
	uint32_t tmp;

	assert((((uint32_t)sw_ba_4_addr2_low << SW_BA_4_ADDR2_LOW_OFFSET) & ~((uint32_t)SW_BA_4_ADDR2_LOW_MASK)) == 0);
	tmp =
		((uint32_t)sw_ba_4_addr2_low << SW_BA_4_ADDR2_LOW_OFFSET) ;
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_BA_4_BITMAP_CTRL_0_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_BA_4_BITMAP_CTRL_0_ADDR), tmp);
}
static __inline void mac_ba_4_bitmap_ctrl_0_unpack(volatile uint32_t* sw_ba_4_addr2_low)
{
	uint32_t tmp;

	tmp = mac_ba_4_bitmap_ctrl_0_get();
	*sw_ba_4_addr2_low = (tmp & ((uint32_t)SW_BA_4_ADDR2_LOW_MASK)) >> SW_BA_4_ADDR2_LOW_OFFSET;
}
static __inline void mac_ba_4_bitmap_ctrl_1_sw_ba_4_addr1_chos_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_4_BITMAP_CTRL_1_ADDR);
	tmp &= ~SW_BA_4_ADDR1_CHOS_MASK;
	tmp |= (value << SW_BA_4_ADDR1_CHOS_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_BA_4_BITMAP_CTRL_1_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_BA_4_BITMAP_CTRL_1_ADDR), tmp);
}
static __inline uint32_t mac_ba_4_bitmap_ctrl_1_sw_ba_4_addr1_chos_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_4_BITMAP_CTRL_1_ADDR)) & SW_BA_4_ADDR1_CHOS_MASK) >> SW_BA_4_ADDR1_CHOS_OFFSET;
}
static __inline void mac_ba_4_bitmap_ctrl_1_sw_ba_4_tid_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_4_BITMAP_CTRL_1_ADDR);
	tmp &= ~SW_BA_4_TID_MASK;
	tmp |= (value << SW_BA_4_TID_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_BA_4_BITMAP_CTRL_1_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_BA_4_BITMAP_CTRL_1_ADDR), tmp);
}
static __inline uint32_t mac_ba_4_bitmap_ctrl_1_sw_ba_4_tid_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_4_BITMAP_CTRL_1_ADDR)) & SW_BA_4_TID_MASK) >> SW_BA_4_TID_OFFSET;
}
static __inline void mac_ba_4_bitmap_ctrl_1_sw_ba_4_addr2_high_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_4_BITMAP_CTRL_1_ADDR);
	tmp &= ~SW_BA_4_ADDR2_HIGH_MASK;
	tmp |= (value << SW_BA_4_ADDR2_HIGH_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_BA_4_BITMAP_CTRL_1_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_BA_4_BITMAP_CTRL_1_ADDR), tmp);
}
static __inline uint32_t mac_ba_4_bitmap_ctrl_1_sw_ba_4_addr2_high_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_4_BITMAP_CTRL_1_ADDR)) & SW_BA_4_ADDR2_HIGH_MASK) >> SW_BA_4_ADDR2_HIGH_OFFSET;
}
static __inline void mac_ba_4_bitmap_ctrl_1_set(uint32_t value)
{
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_BA_4_BITMAP_CTRL_1_ADDR, value);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_BA_4_BITMAP_CTRL_1_ADDR), value);
}
static __inline uint32_t mac_ba_4_bitmap_ctrl_1_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_4_BITMAP_CTRL_1_ADDR));
}
static __inline void mac_ba_4_bitmap_ctrl_1_pack(uint32_t sw_ba_4_addr1_chos, uint32_t sw_ba_4_tid, uint32_t sw_ba_4_addr2_high)
{
	uint32_t tmp;

	assert((((uint32_t)sw_ba_4_addr1_chos << SW_BA_4_ADDR1_CHOS_OFFSET) & ~((uint32_t)SW_BA_4_ADDR1_CHOS_MASK)) == 0);
	assert((((uint32_t)sw_ba_4_tid << SW_BA_4_TID_OFFSET) & ~((uint32_t)SW_BA_4_TID_MASK)) == 0);
	assert((((uint32_t)sw_ba_4_addr2_high << SW_BA_4_ADDR2_HIGH_OFFSET) & ~((uint32_t)SW_BA_4_ADDR2_HIGH_MASK)) == 0);
	tmp =
		((uint32_t)sw_ba_4_addr1_chos << SW_BA_4_ADDR1_CHOS_OFFSET) |
		((uint32_t)sw_ba_4_tid << SW_BA_4_TID_OFFSET) |
		((uint32_t)sw_ba_4_addr2_high << SW_BA_4_ADDR2_HIGH_OFFSET) ;
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_BA_4_BITMAP_CTRL_1_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_BA_4_BITMAP_CTRL_1_ADDR), tmp);
}
static __inline void mac_ba_4_bitmap_ctrl_1_unpack(volatile uint32_t* sw_ba_4_addr1_chos, volatile uint32_t* sw_ba_4_tid, volatile uint32_t* sw_ba_4_addr2_high)
{
	uint32_t tmp;

	tmp = mac_ba_4_bitmap_ctrl_1_get();
	*sw_ba_4_addr1_chos = (tmp & ((uint32_t)SW_BA_4_ADDR1_CHOS_MASK)) >> SW_BA_4_ADDR1_CHOS_OFFSET;
	*sw_ba_4_tid = (tmp & ((uint32_t)SW_BA_4_TID_MASK)) >> SW_BA_4_TID_OFFSET;
	*sw_ba_4_addr2_high = (tmp & ((uint32_t)SW_BA_4_ADDR2_HIGH_MASK)) >> SW_BA_4_ADDR2_HIGH_OFFSET;
}
static __inline void mac_ba_4_bitmap_ctrl_2_sw_ba_4_winstart_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_4_BITMAP_CTRL_2_ADDR);
	tmp &= ~SW_BA_4_WINSTART_MASK;
	tmp |= (value << SW_BA_4_WINSTART_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_BA_4_BITMAP_CTRL_2_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_BA_4_BITMAP_CTRL_2_ADDR), tmp);
}
static __inline uint32_t mac_ba_4_bitmap_ctrl_2_sw_ba_4_winstart_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_4_BITMAP_CTRL_2_ADDR)) & SW_BA_4_WINSTART_MASK) >> SW_BA_4_WINSTART_OFFSET;
}
static __inline void mac_ba_4_bitmap_ctrl_2_sw_ba_4_bitmap_force_zero_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_4_BITMAP_CTRL_2_ADDR);
	tmp &= ~SW_BA_4_BITMAP_FORCE_ZERO_MASK;
	tmp |= (value << SW_BA_4_BITMAP_FORCE_ZERO_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_BA_4_BITMAP_CTRL_2_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_BA_4_BITMAP_CTRL_2_ADDR), tmp);
}
static __inline uint32_t mac_ba_4_bitmap_ctrl_2_sw_ba_4_bitmap_force_zero_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_4_BITMAP_CTRL_2_ADDR)) & SW_BA_4_BITMAP_FORCE_ZERO_MASK) >> SW_BA_4_BITMAP_FORCE_ZERO_OFFSET;
}
static __inline void mac_ba_4_bitmap_ctrl_2_sw_ba_4_win_set_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_4_BITMAP_CTRL_2_ADDR);
	tmp &= ~SW_BA_4_WIN_SET_MASK;
	tmp |= (value << SW_BA_4_WIN_SET_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_BA_4_BITMAP_CTRL_2_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_BA_4_BITMAP_CTRL_2_ADDR), tmp);
}
static __inline void mac_ba_4_bitmap_ctrl_2_sw_ba_4_winoffset_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_4_BITMAP_CTRL_2_ADDR);
	tmp &= ~SW_BA_4_WINOFFSET_MASK;
	tmp |= (value << SW_BA_4_WINOFFSET_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_BA_4_BITMAP_CTRL_2_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_BA_4_BITMAP_CTRL_2_ADDR), tmp);
}
static __inline uint32_t mac_ba_4_bitmap_ctrl_2_sw_ba_4_winoffset_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_4_BITMAP_CTRL_2_ADDR)) & SW_BA_4_WINOFFSET_MASK) >> SW_BA_4_WINOFFSET_OFFSET;
}
static __inline void mac_ba_4_bitmap_ctrl_2_set(uint32_t value)
{
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_BA_4_BITMAP_CTRL_2_ADDR, value);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_BA_4_BITMAP_CTRL_2_ADDR), value);
}
static __inline uint32_t mac_ba_4_bitmap_ctrl_2_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_4_BITMAP_CTRL_2_ADDR));
}
static __inline void mac_ba_4_bitmap_ctrl_2_pack(uint32_t sw_ba_4_winstart, uint32_t sw_ba_4_bitmap_force_zero, uint32_t sw_ba_4_win_set, uint32_t sw_ba_4_winoffset)
{
	uint32_t tmp;

	assert((((uint32_t)sw_ba_4_winstart << SW_BA_4_WINSTART_OFFSET) & ~((uint32_t)SW_BA_4_WINSTART_MASK)) == 0);
	assert((((uint32_t)sw_ba_4_bitmap_force_zero << SW_BA_4_BITMAP_FORCE_ZERO_OFFSET) & ~((uint32_t)SW_BA_4_BITMAP_FORCE_ZERO_MASK)) == 0);
	assert((((uint32_t)sw_ba_4_win_set << SW_BA_4_WIN_SET_OFFSET) & ~((uint32_t)SW_BA_4_WIN_SET_MASK)) == 0);
	assert((((uint32_t)sw_ba_4_winoffset << SW_BA_4_WINOFFSET_OFFSET) & ~((uint32_t)SW_BA_4_WINOFFSET_MASK)) == 0);
	tmp =
		((uint32_t)sw_ba_4_winstart << SW_BA_4_WINSTART_OFFSET) |
		((uint32_t)sw_ba_4_bitmap_force_zero << SW_BA_4_BITMAP_FORCE_ZERO_OFFSET) |
		((uint32_t)sw_ba_4_win_set << SW_BA_4_WIN_SET_OFFSET) |
		((uint32_t)sw_ba_4_winoffset << SW_BA_4_WINOFFSET_OFFSET) ;
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_BA_4_BITMAP_CTRL_2_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_BA_4_BITMAP_CTRL_2_ADDR), tmp);
}
static __inline void mac_ba_4_bitmap_ctrl_2_unpack(volatile uint32_t* sw_ba_4_winstart, volatile uint32_t* sw_ba_4_bitmap_force_zero, volatile uint32_t* sw_ba_4_winoffset)
{
	uint32_t tmp;

	tmp = mac_ba_4_bitmap_ctrl_2_get();
	*sw_ba_4_winstart = (tmp & ((uint32_t)SW_BA_4_WINSTART_MASK)) >> SW_BA_4_WINSTART_OFFSET;
	*sw_ba_4_bitmap_force_zero = (tmp & ((uint32_t)SW_BA_4_BITMAP_FORCE_ZERO_MASK)) >> SW_BA_4_BITMAP_FORCE_ZERO_OFFSET;
	*sw_ba_4_winoffset = (tmp & ((uint32_t)SW_BA_4_WINOFFSET_MASK)) >> SW_BA_4_WINOFFSET_OFFSET;
}
static __inline uint32_t mac_ba_4_bitmap_sts_0_sw_ro_ba_4_winstart_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_4_BITMAP_STS_0_ADDR)) & SW_RO_BA_4_WINSTART_MASK) >> SW_RO_BA_4_WINSTART_OFFSET;
}
static __inline uint32_t mac_ba_4_bitmap_sts_0_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_4_BITMAP_STS_0_ADDR));
}
static __inline void mac_ba_4_bitmap_sts_0_unpack(volatile uint32_t* sw_ro_ba_4_winstart)
{
	uint32_t tmp;

	tmp = mac_ba_4_bitmap_sts_0_get();
	*sw_ro_ba_4_winstart = (tmp & ((uint32_t)SW_RO_BA_4_WINSTART_MASK)) >> SW_RO_BA_4_WINSTART_OFFSET;
}
static __inline uint32_t mac_ba_4_bitmap_sts_1_sw_ro_ba_4_bitmap_high_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_4_BITMAP_STS_1_ADDR)) & SW_RO_BA_4_BITMAP_HIGH_MASK) >> SW_RO_BA_4_BITMAP_HIGH_OFFSET;
}
static __inline uint32_t mac_ba_4_bitmap_sts_1_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_4_BITMAP_STS_1_ADDR));
}
static __inline void mac_ba_4_bitmap_sts_1_unpack(volatile uint32_t* sw_ro_ba_4_bitmap_high)
{
	uint32_t tmp;

	tmp = mac_ba_4_bitmap_sts_1_get();
	*sw_ro_ba_4_bitmap_high = (tmp & ((uint32_t)SW_RO_BA_4_BITMAP_HIGH_MASK)) >> SW_RO_BA_4_BITMAP_HIGH_OFFSET;
}
static __inline uint32_t mac_ba_4_bitmap_sts_2_sw_ro_ba_4_bitmap_low_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_4_BITMAP_STS_2_ADDR)) & SW_RO_BA_4_BITMAP_LOW_MASK) >> SW_RO_BA_4_BITMAP_LOW_OFFSET;
}
static __inline uint32_t mac_ba_4_bitmap_sts_2_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_4_BITMAP_STS_2_ADDR));
}
static __inline void mac_ba_4_bitmap_sts_2_unpack(volatile uint32_t* sw_ro_ba_4_bitmap_low)
{
	uint32_t tmp;

	tmp = mac_ba_4_bitmap_sts_2_get();
	*sw_ro_ba_4_bitmap_low = (tmp & ((uint32_t)SW_RO_BA_4_BITMAP_LOW_MASK)) >> SW_RO_BA_4_BITMAP_LOW_OFFSET;
}
static __inline void mac_ba_5_bitmap_ctrl_0_sw_ba_5_addr2_low_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_5_BITMAP_CTRL_0_ADDR);
	tmp &= ~SW_BA_5_ADDR2_LOW_MASK;
	tmp |= (value << SW_BA_5_ADDR2_LOW_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_BA_5_BITMAP_CTRL_0_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_BA_5_BITMAP_CTRL_0_ADDR), tmp);
}
static __inline uint32_t mac_ba_5_bitmap_ctrl_0_sw_ba_5_addr2_low_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_5_BITMAP_CTRL_0_ADDR)) & SW_BA_5_ADDR2_LOW_MASK) >> SW_BA_5_ADDR2_LOW_OFFSET;
}
static __inline void mac_ba_5_bitmap_ctrl_0_set(uint32_t value)
{
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_BA_5_BITMAP_CTRL_0_ADDR, value);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_BA_5_BITMAP_CTRL_0_ADDR), value);
}
static __inline uint32_t mac_ba_5_bitmap_ctrl_0_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_5_BITMAP_CTRL_0_ADDR));
}
static __inline void mac_ba_5_bitmap_ctrl_0_pack(uint32_t sw_ba_5_addr2_low)
{
	uint32_t tmp;

	assert((((uint32_t)sw_ba_5_addr2_low << SW_BA_5_ADDR2_LOW_OFFSET) & ~((uint32_t)SW_BA_5_ADDR2_LOW_MASK)) == 0);
	tmp =
		((uint32_t)sw_ba_5_addr2_low << SW_BA_5_ADDR2_LOW_OFFSET) ;
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_BA_5_BITMAP_CTRL_0_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_BA_5_BITMAP_CTRL_0_ADDR), tmp);
}
static __inline void mac_ba_5_bitmap_ctrl_0_unpack(volatile uint32_t* sw_ba_5_addr2_low)
{
	uint32_t tmp;

	tmp = mac_ba_5_bitmap_ctrl_0_get();
	*sw_ba_5_addr2_low = (tmp & ((uint32_t)SW_BA_5_ADDR2_LOW_MASK)) >> SW_BA_5_ADDR2_LOW_OFFSET;
}
static __inline void mac_ba_5_bitmap_ctrl_1_sw_ba_5_addr1_chos_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_5_BITMAP_CTRL_1_ADDR);
	tmp &= ~SW_BA_5_ADDR1_CHOS_MASK;
	tmp |= (value << SW_BA_5_ADDR1_CHOS_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_BA_5_BITMAP_CTRL_1_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_BA_5_BITMAP_CTRL_1_ADDR), tmp);
}
static __inline uint32_t mac_ba_5_bitmap_ctrl_1_sw_ba_5_addr1_chos_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_5_BITMAP_CTRL_1_ADDR)) & SW_BA_5_ADDR1_CHOS_MASK) >> SW_BA_5_ADDR1_CHOS_OFFSET;
}
static __inline void mac_ba_5_bitmap_ctrl_1_sw_ba_5_tid_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_5_BITMAP_CTRL_1_ADDR);
	tmp &= ~SW_BA_5_TID_MASK;
	tmp |= (value << SW_BA_5_TID_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_BA_5_BITMAP_CTRL_1_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_BA_5_BITMAP_CTRL_1_ADDR), tmp);
}
static __inline uint32_t mac_ba_5_bitmap_ctrl_1_sw_ba_5_tid_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_5_BITMAP_CTRL_1_ADDR)) & SW_BA_5_TID_MASK) >> SW_BA_5_TID_OFFSET;
}
static __inline void mac_ba_5_bitmap_ctrl_1_sw_ba_5_addr2_high_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_5_BITMAP_CTRL_1_ADDR);
	tmp &= ~SW_BA_5_ADDR2_HIGH_MASK;
	tmp |= (value << SW_BA_5_ADDR2_HIGH_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_BA_5_BITMAP_CTRL_1_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_BA_5_BITMAP_CTRL_1_ADDR), tmp);
}
static __inline uint32_t mac_ba_5_bitmap_ctrl_1_sw_ba_5_addr2_high_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_5_BITMAP_CTRL_1_ADDR)) & SW_BA_5_ADDR2_HIGH_MASK) >> SW_BA_5_ADDR2_HIGH_OFFSET;
}
static __inline void mac_ba_5_bitmap_ctrl_1_set(uint32_t value)
{
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_BA_5_BITMAP_CTRL_1_ADDR, value);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_BA_5_BITMAP_CTRL_1_ADDR), value);
}
static __inline uint32_t mac_ba_5_bitmap_ctrl_1_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_5_BITMAP_CTRL_1_ADDR));
}
static __inline void mac_ba_5_bitmap_ctrl_1_pack(uint32_t sw_ba_5_addr1_chos, uint32_t sw_ba_5_tid, uint32_t sw_ba_5_addr2_high)
{
	uint32_t tmp;

	assert((((uint32_t)sw_ba_5_addr1_chos << SW_BA_5_ADDR1_CHOS_OFFSET) & ~((uint32_t)SW_BA_5_ADDR1_CHOS_MASK)) == 0);
	assert((((uint32_t)sw_ba_5_tid << SW_BA_5_TID_OFFSET) & ~((uint32_t)SW_BA_5_TID_MASK)) == 0);
	assert((((uint32_t)sw_ba_5_addr2_high << SW_BA_5_ADDR2_HIGH_OFFSET) & ~((uint32_t)SW_BA_5_ADDR2_HIGH_MASK)) == 0);
	tmp =
		((uint32_t)sw_ba_5_addr1_chos << SW_BA_5_ADDR1_CHOS_OFFSET) |
		((uint32_t)sw_ba_5_tid << SW_BA_5_TID_OFFSET) |
		((uint32_t)sw_ba_5_addr2_high << SW_BA_5_ADDR2_HIGH_OFFSET) ;
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_BA_5_BITMAP_CTRL_1_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_BA_5_BITMAP_CTRL_1_ADDR), tmp);
}
static __inline void mac_ba_5_bitmap_ctrl_1_unpack(volatile uint32_t* sw_ba_5_addr1_chos, volatile uint32_t* sw_ba_5_tid, volatile uint32_t* sw_ba_5_addr2_high)
{
	uint32_t tmp;

	tmp = mac_ba_5_bitmap_ctrl_1_get();
	*sw_ba_5_addr1_chos = (tmp & ((uint32_t)SW_BA_5_ADDR1_CHOS_MASK)) >> SW_BA_5_ADDR1_CHOS_OFFSET;
	*sw_ba_5_tid = (tmp & ((uint32_t)SW_BA_5_TID_MASK)) >> SW_BA_5_TID_OFFSET;
	*sw_ba_5_addr2_high = (tmp & ((uint32_t)SW_BA_5_ADDR2_HIGH_MASK)) >> SW_BA_5_ADDR2_HIGH_OFFSET;
}
static __inline void mac_ba_5_bitmap_ctrl_2_sw_ba_5_winstart_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_5_BITMAP_CTRL_2_ADDR);
	tmp &= ~SW_BA_5_WINSTART_MASK;
	tmp |= (value << SW_BA_5_WINSTART_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_BA_5_BITMAP_CTRL_2_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_BA_5_BITMAP_CTRL_2_ADDR), tmp);
}
static __inline uint32_t mac_ba_5_bitmap_ctrl_2_sw_ba_5_winstart_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_5_BITMAP_CTRL_2_ADDR)) & SW_BA_5_WINSTART_MASK) >> SW_BA_5_WINSTART_OFFSET;
}
static __inline void mac_ba_5_bitmap_ctrl_2_sw_ba_5_bitmap_force_zero_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_5_BITMAP_CTRL_2_ADDR);
	tmp &= ~SW_BA_5_BITMAP_FORCE_ZERO_MASK;
	tmp |= (value << SW_BA_5_BITMAP_FORCE_ZERO_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_BA_5_BITMAP_CTRL_2_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_BA_5_BITMAP_CTRL_2_ADDR), tmp);
}
static __inline uint32_t mac_ba_5_bitmap_ctrl_2_sw_ba_5_bitmap_force_zero_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_5_BITMAP_CTRL_2_ADDR)) & SW_BA_5_BITMAP_FORCE_ZERO_MASK) >> SW_BA_5_BITMAP_FORCE_ZERO_OFFSET;
}
static __inline void mac_ba_5_bitmap_ctrl_2_sw_ba_5_win_set_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_5_BITMAP_CTRL_2_ADDR);
	tmp &= ~SW_BA_5_WIN_SET_MASK;
	tmp |= (value << SW_BA_5_WIN_SET_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_BA_5_BITMAP_CTRL_2_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_BA_5_BITMAP_CTRL_2_ADDR), tmp);
}
static __inline void mac_ba_5_bitmap_ctrl_2_sw_ba_5_winoffset_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_5_BITMAP_CTRL_2_ADDR);
	tmp &= ~SW_BA_5_WINOFFSET_MASK;
	tmp |= (value << SW_BA_5_WINOFFSET_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_BA_5_BITMAP_CTRL_2_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_BA_5_BITMAP_CTRL_2_ADDR), tmp);
}
static __inline uint32_t mac_ba_5_bitmap_ctrl_2_sw_ba_5_winoffset_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_5_BITMAP_CTRL_2_ADDR)) & SW_BA_5_WINOFFSET_MASK) >> SW_BA_5_WINOFFSET_OFFSET;
}
static __inline void mac_ba_5_bitmap_ctrl_2_set(uint32_t value)
{
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_BA_5_BITMAP_CTRL_2_ADDR, value);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_BA_5_BITMAP_CTRL_2_ADDR), value);
}
static __inline uint32_t mac_ba_5_bitmap_ctrl_2_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_5_BITMAP_CTRL_2_ADDR));
}
static __inline void mac_ba_5_bitmap_ctrl_2_pack(uint32_t sw_ba_5_winstart, uint32_t sw_ba_5_bitmap_force_zero, uint32_t sw_ba_5_win_set, uint32_t sw_ba_5_winoffset)
{
	uint32_t tmp;

	assert((((uint32_t)sw_ba_5_winstart << SW_BA_5_WINSTART_OFFSET) & ~((uint32_t)SW_BA_5_WINSTART_MASK)) == 0);
	assert((((uint32_t)sw_ba_5_bitmap_force_zero << SW_BA_5_BITMAP_FORCE_ZERO_OFFSET) & ~((uint32_t)SW_BA_5_BITMAP_FORCE_ZERO_MASK)) == 0);
	assert((((uint32_t)sw_ba_5_win_set << SW_BA_5_WIN_SET_OFFSET) & ~((uint32_t)SW_BA_5_WIN_SET_MASK)) == 0);
	assert((((uint32_t)sw_ba_5_winoffset << SW_BA_5_WINOFFSET_OFFSET) & ~((uint32_t)SW_BA_5_WINOFFSET_MASK)) == 0);
	tmp =
		((uint32_t)sw_ba_5_winstart << SW_BA_5_WINSTART_OFFSET) |
		((uint32_t)sw_ba_5_bitmap_force_zero << SW_BA_5_BITMAP_FORCE_ZERO_OFFSET) |
		((uint32_t)sw_ba_5_win_set << SW_BA_5_WIN_SET_OFFSET) |
		((uint32_t)sw_ba_5_winoffset << SW_BA_5_WINOFFSET_OFFSET) ;
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_BA_5_BITMAP_CTRL_2_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_BA_5_BITMAP_CTRL_2_ADDR), tmp);
}
static __inline void mac_ba_5_bitmap_ctrl_2_unpack(volatile uint32_t* sw_ba_5_winstart, volatile uint32_t* sw_ba_5_bitmap_force_zero, volatile uint32_t* sw_ba_5_winoffset)
{
	uint32_t tmp;

	tmp = mac_ba_5_bitmap_ctrl_2_get();
	*sw_ba_5_winstart = (tmp & ((uint32_t)SW_BA_5_WINSTART_MASK)) >> SW_BA_5_WINSTART_OFFSET;
	*sw_ba_5_bitmap_force_zero = (tmp & ((uint32_t)SW_BA_5_BITMAP_FORCE_ZERO_MASK)) >> SW_BA_5_BITMAP_FORCE_ZERO_OFFSET;
	*sw_ba_5_winoffset = (tmp & ((uint32_t)SW_BA_5_WINOFFSET_MASK)) >> SW_BA_5_WINOFFSET_OFFSET;
}
static __inline uint32_t mac_ba_5_bitmap_sts_0_sw_ro_ba_5_winstart_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_5_BITMAP_STS_0_ADDR)) & SW_RO_BA_5_WINSTART_MASK) >> SW_RO_BA_5_WINSTART_OFFSET;
}
static __inline uint32_t mac_ba_5_bitmap_sts_0_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_5_BITMAP_STS_0_ADDR));
}
static __inline void mac_ba_5_bitmap_sts_0_unpack(volatile uint32_t* sw_ro_ba_5_winstart)
{
	uint32_t tmp;

	tmp = mac_ba_5_bitmap_sts_0_get();
	*sw_ro_ba_5_winstart = (tmp & ((uint32_t)SW_RO_BA_5_WINSTART_MASK)) >> SW_RO_BA_5_WINSTART_OFFSET;
}
static __inline uint32_t mac_ba_5_bitmap_sts_1_sw_ro_ba_5_bitmap_high_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_5_BITMAP_STS_1_ADDR)) & SW_RO_BA_5_BITMAP_HIGH_MASK) >> SW_RO_BA_5_BITMAP_HIGH_OFFSET;
}
static __inline uint32_t mac_ba_5_bitmap_sts_1_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_5_BITMAP_STS_1_ADDR));
}
static __inline void mac_ba_5_bitmap_sts_1_unpack(volatile uint32_t* sw_ro_ba_5_bitmap_high)
{
	uint32_t tmp;

	tmp = mac_ba_5_bitmap_sts_1_get();
	*sw_ro_ba_5_bitmap_high = (tmp & ((uint32_t)SW_RO_BA_5_BITMAP_HIGH_MASK)) >> SW_RO_BA_5_BITMAP_HIGH_OFFSET;
}
static __inline uint32_t mac_ba_5_bitmap_sts_2_sw_ro_ba_5_bitmap_low_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_5_BITMAP_STS_2_ADDR)) & SW_RO_BA_5_BITMAP_LOW_MASK) >> SW_RO_BA_5_BITMAP_LOW_OFFSET;
}
static __inline uint32_t mac_ba_5_bitmap_sts_2_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_5_BITMAP_STS_2_ADDR));
}
static __inline void mac_ba_5_bitmap_sts_2_unpack(volatile uint32_t* sw_ro_ba_5_bitmap_low)
{
	uint32_t tmp;

	tmp = mac_ba_5_bitmap_sts_2_get();
	*sw_ro_ba_5_bitmap_low = (tmp & ((uint32_t)SW_RO_BA_5_BITMAP_LOW_MASK)) >> SW_RO_BA_5_BITMAP_LOW_OFFSET;
}
static __inline void mac_ba_6_bitmap_ctrl_0_sw_ba_6_addr2_low_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_6_BITMAP_CTRL_0_ADDR);
	tmp &= ~SW_BA_6_ADDR2_LOW_MASK;
	tmp |= (value << SW_BA_6_ADDR2_LOW_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_BA_6_BITMAP_CTRL_0_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_BA_6_BITMAP_CTRL_0_ADDR), tmp);
}
static __inline uint32_t mac_ba_6_bitmap_ctrl_0_sw_ba_6_addr2_low_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_6_BITMAP_CTRL_0_ADDR)) & SW_BA_6_ADDR2_LOW_MASK) >> SW_BA_6_ADDR2_LOW_OFFSET;
}
static __inline void mac_ba_6_bitmap_ctrl_0_set(uint32_t value)
{
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_BA_6_BITMAP_CTRL_0_ADDR, value);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_BA_6_BITMAP_CTRL_0_ADDR), value);
}
static __inline uint32_t mac_ba_6_bitmap_ctrl_0_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_6_BITMAP_CTRL_0_ADDR));
}
static __inline void mac_ba_6_bitmap_ctrl_0_pack(uint32_t sw_ba_6_addr2_low)
{
	uint32_t tmp;

	assert((((uint32_t)sw_ba_6_addr2_low << SW_BA_6_ADDR2_LOW_OFFSET) & ~((uint32_t)SW_BA_6_ADDR2_LOW_MASK)) == 0);
	tmp =
		((uint32_t)sw_ba_6_addr2_low << SW_BA_6_ADDR2_LOW_OFFSET) ;
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_BA_6_BITMAP_CTRL_0_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_BA_6_BITMAP_CTRL_0_ADDR), tmp);
}
static __inline void mac_ba_6_bitmap_ctrl_0_unpack(volatile uint32_t* sw_ba_6_addr2_low)
{
	uint32_t tmp;

	tmp = mac_ba_6_bitmap_ctrl_0_get();
	*sw_ba_6_addr2_low = (tmp & ((uint32_t)SW_BA_6_ADDR2_LOW_MASK)) >> SW_BA_6_ADDR2_LOW_OFFSET;
}
static __inline void mac_ba_6_bitmap_ctrl_1_sw_ba_6_addr1_chos_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_6_BITMAP_CTRL_1_ADDR);
	tmp &= ~SW_BA_6_ADDR1_CHOS_MASK;
	tmp |= (value << SW_BA_6_ADDR1_CHOS_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_BA_6_BITMAP_CTRL_1_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_BA_6_BITMAP_CTRL_1_ADDR), tmp);
}
static __inline uint32_t mac_ba_6_bitmap_ctrl_1_sw_ba_6_addr1_chos_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_6_BITMAP_CTRL_1_ADDR)) & SW_BA_6_ADDR1_CHOS_MASK) >> SW_BA_6_ADDR1_CHOS_OFFSET;
}
static __inline void mac_ba_6_bitmap_ctrl_1_sw_ba_6_tid_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_6_BITMAP_CTRL_1_ADDR);
	tmp &= ~SW_BA_6_TID_MASK;
	tmp |= (value << SW_BA_6_TID_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_BA_6_BITMAP_CTRL_1_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_BA_6_BITMAP_CTRL_1_ADDR), tmp);
}
static __inline uint32_t mac_ba_6_bitmap_ctrl_1_sw_ba_6_tid_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_6_BITMAP_CTRL_1_ADDR)) & SW_BA_6_TID_MASK) >> SW_BA_6_TID_OFFSET;
}
static __inline void mac_ba_6_bitmap_ctrl_1_sw_ba_6_addr2_high_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_6_BITMAP_CTRL_1_ADDR);
	tmp &= ~SW_BA_6_ADDR2_HIGH_MASK;
	tmp |= (value << SW_BA_6_ADDR2_HIGH_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_BA_6_BITMAP_CTRL_1_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_BA_6_BITMAP_CTRL_1_ADDR), tmp);
}
static __inline uint32_t mac_ba_6_bitmap_ctrl_1_sw_ba_6_addr2_high_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_6_BITMAP_CTRL_1_ADDR)) & SW_BA_6_ADDR2_HIGH_MASK) >> SW_BA_6_ADDR2_HIGH_OFFSET;
}
static __inline void mac_ba_6_bitmap_ctrl_1_set(uint32_t value)
{
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_BA_6_BITMAP_CTRL_1_ADDR, value);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_BA_6_BITMAP_CTRL_1_ADDR), value);
}
static __inline uint32_t mac_ba_6_bitmap_ctrl_1_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_6_BITMAP_CTRL_1_ADDR));
}
static __inline void mac_ba_6_bitmap_ctrl_1_pack(uint32_t sw_ba_6_addr1_chos, uint32_t sw_ba_6_tid, uint32_t sw_ba_6_addr2_high)
{
	uint32_t tmp;

	assert((((uint32_t)sw_ba_6_addr1_chos << SW_BA_6_ADDR1_CHOS_OFFSET) & ~((uint32_t)SW_BA_6_ADDR1_CHOS_MASK)) == 0);
	assert((((uint32_t)sw_ba_6_tid << SW_BA_6_TID_OFFSET) & ~((uint32_t)SW_BA_6_TID_MASK)) == 0);
	assert((((uint32_t)sw_ba_6_addr2_high << SW_BA_6_ADDR2_HIGH_OFFSET) & ~((uint32_t)SW_BA_6_ADDR2_HIGH_MASK)) == 0);
	tmp =
		((uint32_t)sw_ba_6_addr1_chos << SW_BA_6_ADDR1_CHOS_OFFSET) |
		((uint32_t)sw_ba_6_tid << SW_BA_6_TID_OFFSET) |
		((uint32_t)sw_ba_6_addr2_high << SW_BA_6_ADDR2_HIGH_OFFSET) ;
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_BA_6_BITMAP_CTRL_1_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_BA_6_BITMAP_CTRL_1_ADDR), tmp);
}
static __inline void mac_ba_6_bitmap_ctrl_1_unpack(volatile uint32_t* sw_ba_6_addr1_chos, volatile uint32_t* sw_ba_6_tid, volatile uint32_t* sw_ba_6_addr2_high)
{
	uint32_t tmp;

	tmp = mac_ba_6_bitmap_ctrl_1_get();
	*sw_ba_6_addr1_chos = (tmp & ((uint32_t)SW_BA_6_ADDR1_CHOS_MASK)) >> SW_BA_6_ADDR1_CHOS_OFFSET;
	*sw_ba_6_tid = (tmp & ((uint32_t)SW_BA_6_TID_MASK)) >> SW_BA_6_TID_OFFSET;
	*sw_ba_6_addr2_high = (tmp & ((uint32_t)SW_BA_6_ADDR2_HIGH_MASK)) >> SW_BA_6_ADDR2_HIGH_OFFSET;
}
static __inline void mac_ba_6_bitmap_ctrl_2_sw_ba_6_winstart_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_6_BITMAP_CTRL_2_ADDR);
	tmp &= ~SW_BA_6_WINSTART_MASK;
	tmp |= (value << SW_BA_6_WINSTART_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_BA_6_BITMAP_CTRL_2_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_BA_6_BITMAP_CTRL_2_ADDR), tmp);
}
static __inline uint32_t mac_ba_6_bitmap_ctrl_2_sw_ba_6_winstart_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_6_BITMAP_CTRL_2_ADDR)) & SW_BA_6_WINSTART_MASK) >> SW_BA_6_WINSTART_OFFSET;
}
static __inline void mac_ba_6_bitmap_ctrl_2_sw_ba_6_bitmap_force_zero_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_6_BITMAP_CTRL_2_ADDR);
	tmp &= ~SW_BA_6_BITMAP_FORCE_ZERO_MASK;
	tmp |= (value << SW_BA_6_BITMAP_FORCE_ZERO_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_BA_6_BITMAP_CTRL_2_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_BA_6_BITMAP_CTRL_2_ADDR), tmp);
}
static __inline uint32_t mac_ba_6_bitmap_ctrl_2_sw_ba_6_bitmap_force_zero_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_6_BITMAP_CTRL_2_ADDR)) & SW_BA_6_BITMAP_FORCE_ZERO_MASK) >> SW_BA_6_BITMAP_FORCE_ZERO_OFFSET;
}
static __inline void mac_ba_6_bitmap_ctrl_2_sw_ba_6_win_set_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_6_BITMAP_CTRL_2_ADDR);
	tmp &= ~SW_BA_6_WIN_SET_MASK;
	tmp |= (value << SW_BA_6_WIN_SET_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_BA_6_BITMAP_CTRL_2_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_BA_6_BITMAP_CTRL_2_ADDR), tmp);
}
static __inline void mac_ba_6_bitmap_ctrl_2_sw_ba_6_winoffset_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_6_BITMAP_CTRL_2_ADDR);
	tmp &= ~SW_BA_6_WINOFFSET_MASK;
	tmp |= (value << SW_BA_6_WINOFFSET_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_BA_6_BITMAP_CTRL_2_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_BA_6_BITMAP_CTRL_2_ADDR), tmp);
}
static __inline uint32_t mac_ba_6_bitmap_ctrl_2_sw_ba_6_winoffset_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_6_BITMAP_CTRL_2_ADDR)) & SW_BA_6_WINOFFSET_MASK) >> SW_BA_6_WINOFFSET_OFFSET;
}
static __inline void mac_ba_6_bitmap_ctrl_2_set(uint32_t value)
{
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_BA_6_BITMAP_CTRL_2_ADDR, value);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_BA_6_BITMAP_CTRL_2_ADDR), value);
}
static __inline uint32_t mac_ba_6_bitmap_ctrl_2_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_6_BITMAP_CTRL_2_ADDR));
}
static __inline void mac_ba_6_bitmap_ctrl_2_pack(uint32_t sw_ba_6_winstart, uint32_t sw_ba_6_bitmap_force_zero, uint32_t sw_ba_6_win_set, uint32_t sw_ba_6_winoffset)
{
	uint32_t tmp;

	assert((((uint32_t)sw_ba_6_winstart << SW_BA_6_WINSTART_OFFSET) & ~((uint32_t)SW_BA_6_WINSTART_MASK)) == 0);
	assert((((uint32_t)sw_ba_6_bitmap_force_zero << SW_BA_6_BITMAP_FORCE_ZERO_OFFSET) & ~((uint32_t)SW_BA_6_BITMAP_FORCE_ZERO_MASK)) == 0);
	assert((((uint32_t)sw_ba_6_win_set << SW_BA_6_WIN_SET_OFFSET) & ~((uint32_t)SW_BA_6_WIN_SET_MASK)) == 0);
	assert((((uint32_t)sw_ba_6_winoffset << SW_BA_6_WINOFFSET_OFFSET) & ~((uint32_t)SW_BA_6_WINOFFSET_MASK)) == 0);
	tmp =
		((uint32_t)sw_ba_6_winstart << SW_BA_6_WINSTART_OFFSET) |
		((uint32_t)sw_ba_6_bitmap_force_zero << SW_BA_6_BITMAP_FORCE_ZERO_OFFSET) |
		((uint32_t)sw_ba_6_win_set << SW_BA_6_WIN_SET_OFFSET) |
		((uint32_t)sw_ba_6_winoffset << SW_BA_6_WINOFFSET_OFFSET) ;
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_BA_6_BITMAP_CTRL_2_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_BA_6_BITMAP_CTRL_2_ADDR), tmp);
}
static __inline void mac_ba_6_bitmap_ctrl_2_unpack(volatile uint32_t* sw_ba_6_winstart, volatile uint32_t* sw_ba_6_bitmap_force_zero, volatile uint32_t* sw_ba_6_winoffset)
{
	uint32_t tmp;

	tmp = mac_ba_6_bitmap_ctrl_2_get();
	*sw_ba_6_winstart = (tmp & ((uint32_t)SW_BA_6_WINSTART_MASK)) >> SW_BA_6_WINSTART_OFFSET;
	*sw_ba_6_bitmap_force_zero = (tmp & ((uint32_t)SW_BA_6_BITMAP_FORCE_ZERO_MASK)) >> SW_BA_6_BITMAP_FORCE_ZERO_OFFSET;
	*sw_ba_6_winoffset = (tmp & ((uint32_t)SW_BA_6_WINOFFSET_MASK)) >> SW_BA_6_WINOFFSET_OFFSET;
}
static __inline uint32_t mac_ba_6_bitmap_sts_0_sw_ro_ba_6_winstart_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_6_BITMAP_STS_0_ADDR)) & SW_RO_BA_6_WINSTART_MASK) >> SW_RO_BA_6_WINSTART_OFFSET;
}
static __inline uint32_t mac_ba_6_bitmap_sts_0_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_6_BITMAP_STS_0_ADDR));
}
static __inline void mac_ba_6_bitmap_sts_0_unpack(volatile uint32_t* sw_ro_ba_6_winstart)
{
	uint32_t tmp;

	tmp = mac_ba_6_bitmap_sts_0_get();
	*sw_ro_ba_6_winstart = (tmp & ((uint32_t)SW_RO_BA_6_WINSTART_MASK)) >> SW_RO_BA_6_WINSTART_OFFSET;
}
static __inline uint32_t mac_ba_6_bitmap_sts_1_sw_ro_ba_6_bitmap_high_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_6_BITMAP_STS_1_ADDR)) & SW_RO_BA_6_BITMAP_HIGH_MASK) >> SW_RO_BA_6_BITMAP_HIGH_OFFSET;
}
static __inline uint32_t mac_ba_6_bitmap_sts_1_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_6_BITMAP_STS_1_ADDR));
}
static __inline void mac_ba_6_bitmap_sts_1_unpack(volatile uint32_t* sw_ro_ba_6_bitmap_high)
{
	uint32_t tmp;

	tmp = mac_ba_6_bitmap_sts_1_get();
	*sw_ro_ba_6_bitmap_high = (tmp & ((uint32_t)SW_RO_BA_6_BITMAP_HIGH_MASK)) >> SW_RO_BA_6_BITMAP_HIGH_OFFSET;
}
static __inline uint32_t mac_ba_6_bitmap_sts_2_sw_ro_ba_6_bitmap_low_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_6_BITMAP_STS_2_ADDR)) & SW_RO_BA_6_BITMAP_LOW_MASK) >> SW_RO_BA_6_BITMAP_LOW_OFFSET;
}
static __inline uint32_t mac_ba_6_bitmap_sts_2_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_6_BITMAP_STS_2_ADDR));
}
static __inline void mac_ba_6_bitmap_sts_2_unpack(volatile uint32_t* sw_ro_ba_6_bitmap_low)
{
	uint32_t tmp;

	tmp = mac_ba_6_bitmap_sts_2_get();
	*sw_ro_ba_6_bitmap_low = (tmp & ((uint32_t)SW_RO_BA_6_BITMAP_LOW_MASK)) >> SW_RO_BA_6_BITMAP_LOW_OFFSET;
}
static __inline void mac_ba_7_bitmap_ctrl_0_sw_ba_7_addr2_low_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_7_BITMAP_CTRL_0_ADDR);
	tmp &= ~SW_BA_7_ADDR2_LOW_MASK;
	tmp |= (value << SW_BA_7_ADDR2_LOW_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_BA_7_BITMAP_CTRL_0_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_BA_7_BITMAP_CTRL_0_ADDR), tmp);
}
static __inline uint32_t mac_ba_7_bitmap_ctrl_0_sw_ba_7_addr2_low_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_7_BITMAP_CTRL_0_ADDR)) & SW_BA_7_ADDR2_LOW_MASK) >> SW_BA_7_ADDR2_LOW_OFFSET;
}
static __inline void mac_ba_7_bitmap_ctrl_0_set(uint32_t value)
{
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_BA_7_BITMAP_CTRL_0_ADDR, value);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_BA_7_BITMAP_CTRL_0_ADDR), value);
}
static __inline uint32_t mac_ba_7_bitmap_ctrl_0_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_7_BITMAP_CTRL_0_ADDR));
}
static __inline void mac_ba_7_bitmap_ctrl_0_pack(uint32_t sw_ba_7_addr2_low)
{
	uint32_t tmp;

	assert((((uint32_t)sw_ba_7_addr2_low << SW_BA_7_ADDR2_LOW_OFFSET) & ~((uint32_t)SW_BA_7_ADDR2_LOW_MASK)) == 0);
	tmp =
		((uint32_t)sw_ba_7_addr2_low << SW_BA_7_ADDR2_LOW_OFFSET) ;
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_BA_7_BITMAP_CTRL_0_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_BA_7_BITMAP_CTRL_0_ADDR), tmp);
}
static __inline void mac_ba_7_bitmap_ctrl_0_unpack(volatile uint32_t* sw_ba_7_addr2_low)
{
	uint32_t tmp;

	tmp = mac_ba_7_bitmap_ctrl_0_get();
	*sw_ba_7_addr2_low = (tmp & ((uint32_t)SW_BA_7_ADDR2_LOW_MASK)) >> SW_BA_7_ADDR2_LOW_OFFSET;
}
static __inline void mac_ba_7_bitmap_ctrl_1_sw_ba_7_addr1_chos_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_7_BITMAP_CTRL_1_ADDR);
	tmp &= ~SW_BA_7_ADDR1_CHOS_MASK;
	tmp |= (value << SW_BA_7_ADDR1_CHOS_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_BA_7_BITMAP_CTRL_1_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_BA_7_BITMAP_CTRL_1_ADDR), tmp);
}
static __inline uint32_t mac_ba_7_bitmap_ctrl_1_sw_ba_7_addr1_chos_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_7_BITMAP_CTRL_1_ADDR)) & SW_BA_7_ADDR1_CHOS_MASK) >> SW_BA_7_ADDR1_CHOS_OFFSET;
}
static __inline void mac_ba_7_bitmap_ctrl_1_sw_ba_7_tid_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_7_BITMAP_CTRL_1_ADDR);
	tmp &= ~SW_BA_7_TID_MASK;
	tmp |= (value << SW_BA_7_TID_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_BA_7_BITMAP_CTRL_1_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_BA_7_BITMAP_CTRL_1_ADDR), tmp);
}
static __inline uint32_t mac_ba_7_bitmap_ctrl_1_sw_ba_7_tid_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_7_BITMAP_CTRL_1_ADDR)) & SW_BA_7_TID_MASK) >> SW_BA_7_TID_OFFSET;
}
static __inline void mac_ba_7_bitmap_ctrl_1_sw_ba_7_addr2_high_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_7_BITMAP_CTRL_1_ADDR);
	tmp &= ~SW_BA_7_ADDR2_HIGH_MASK;
	tmp |= (value << SW_BA_7_ADDR2_HIGH_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_BA_7_BITMAP_CTRL_1_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_BA_7_BITMAP_CTRL_1_ADDR), tmp);
}
static __inline uint32_t mac_ba_7_bitmap_ctrl_1_sw_ba_7_addr2_high_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_7_BITMAP_CTRL_1_ADDR)) & SW_BA_7_ADDR2_HIGH_MASK) >> SW_BA_7_ADDR2_HIGH_OFFSET;
}
static __inline void mac_ba_7_bitmap_ctrl_1_set(uint32_t value)
{
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_BA_7_BITMAP_CTRL_1_ADDR, value);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_BA_7_BITMAP_CTRL_1_ADDR), value);
}
static __inline uint32_t mac_ba_7_bitmap_ctrl_1_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_7_BITMAP_CTRL_1_ADDR));
}
static __inline void mac_ba_7_bitmap_ctrl_1_pack(uint32_t sw_ba_7_addr1_chos, uint32_t sw_ba_7_tid, uint32_t sw_ba_7_addr2_high)
{
	uint32_t tmp;

	assert((((uint32_t)sw_ba_7_addr1_chos << SW_BA_7_ADDR1_CHOS_OFFSET) & ~((uint32_t)SW_BA_7_ADDR1_CHOS_MASK)) == 0);
	assert((((uint32_t)sw_ba_7_tid << SW_BA_7_TID_OFFSET) & ~((uint32_t)SW_BA_7_TID_MASK)) == 0);
	assert((((uint32_t)sw_ba_7_addr2_high << SW_BA_7_ADDR2_HIGH_OFFSET) & ~((uint32_t)SW_BA_7_ADDR2_HIGH_MASK)) == 0);
	tmp =
		((uint32_t)sw_ba_7_addr1_chos << SW_BA_7_ADDR1_CHOS_OFFSET) |
		((uint32_t)sw_ba_7_tid << SW_BA_7_TID_OFFSET) |
		((uint32_t)sw_ba_7_addr2_high << SW_BA_7_ADDR2_HIGH_OFFSET) ;
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_BA_7_BITMAP_CTRL_1_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_BA_7_BITMAP_CTRL_1_ADDR), tmp);
}
static __inline void mac_ba_7_bitmap_ctrl_1_unpack(volatile uint32_t* sw_ba_7_addr1_chos, volatile uint32_t* sw_ba_7_tid, volatile uint32_t* sw_ba_7_addr2_high)
{
	uint32_t tmp;

	tmp = mac_ba_7_bitmap_ctrl_1_get();
	*sw_ba_7_addr1_chos = (tmp & ((uint32_t)SW_BA_7_ADDR1_CHOS_MASK)) >> SW_BA_7_ADDR1_CHOS_OFFSET;
	*sw_ba_7_tid = (tmp & ((uint32_t)SW_BA_7_TID_MASK)) >> SW_BA_7_TID_OFFSET;
	*sw_ba_7_addr2_high = (tmp & ((uint32_t)SW_BA_7_ADDR2_HIGH_MASK)) >> SW_BA_7_ADDR2_HIGH_OFFSET;
}
static __inline void mac_ba_7_bitmap_ctrl_2_sw_ba_7_winstart_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_7_BITMAP_CTRL_2_ADDR);
	tmp &= ~SW_BA_7_WINSTART_MASK;
	tmp |= (value << SW_BA_7_WINSTART_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_BA_7_BITMAP_CTRL_2_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_BA_7_BITMAP_CTRL_2_ADDR), tmp);
}
static __inline uint32_t mac_ba_7_bitmap_ctrl_2_sw_ba_7_winstart_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_7_BITMAP_CTRL_2_ADDR)) & SW_BA_7_WINSTART_MASK) >> SW_BA_7_WINSTART_OFFSET;
}
static __inline void mac_ba_7_bitmap_ctrl_2_sw_ba_7_bitmap_force_zero_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_7_BITMAP_CTRL_2_ADDR);
	tmp &= ~SW_BA_7_BITMAP_FORCE_ZERO_MASK;
	tmp |= (value << SW_BA_7_BITMAP_FORCE_ZERO_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_BA_7_BITMAP_CTRL_2_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_BA_7_BITMAP_CTRL_2_ADDR), tmp);
}
static __inline uint32_t mac_ba_7_bitmap_ctrl_2_sw_ba_7_bitmap_force_zero_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_7_BITMAP_CTRL_2_ADDR)) & SW_BA_7_BITMAP_FORCE_ZERO_MASK) >> SW_BA_7_BITMAP_FORCE_ZERO_OFFSET;
}
static __inline void mac_ba_7_bitmap_ctrl_2_sw_ba_7_win_set_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_7_BITMAP_CTRL_2_ADDR);
	tmp &= ~SW_BA_7_WIN_SET_MASK;
	tmp |= (value << SW_BA_7_WIN_SET_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_BA_7_BITMAP_CTRL_2_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_BA_7_BITMAP_CTRL_2_ADDR), tmp);
}
static __inline void mac_ba_7_bitmap_ctrl_2_sw_ba_7_winoffset_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_7_BITMAP_CTRL_2_ADDR);
	tmp &= ~SW_BA_7_WINOFFSET_MASK;
	tmp |= (value << SW_BA_7_WINOFFSET_OFFSET);
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_BA_7_BITMAP_CTRL_2_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_BA_7_BITMAP_CTRL_2_ADDR), tmp);
}
static __inline uint32_t mac_ba_7_bitmap_ctrl_2_sw_ba_7_winoffset_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_7_BITMAP_CTRL_2_ADDR)) & SW_BA_7_WINOFFSET_MASK) >> SW_BA_7_WINOFFSET_OFFSET;
}
static __inline void mac_ba_7_bitmap_ctrl_2_set(uint32_t value)
{
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_BA_7_BITMAP_CTRL_2_ADDR, value);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_BA_7_BITMAP_CTRL_2_ADDR), value);
}
static __inline uint32_t mac_ba_7_bitmap_ctrl_2_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_7_BITMAP_CTRL_2_ADDR));
}
static __inline void mac_ba_7_bitmap_ctrl_2_pack(uint32_t sw_ba_7_winstart, uint32_t sw_ba_7_bitmap_force_zero, uint32_t sw_ba_7_win_set, uint32_t sw_ba_7_winoffset)
{
	uint32_t tmp;

	assert((((uint32_t)sw_ba_7_winstart << SW_BA_7_WINSTART_OFFSET) & ~((uint32_t)SW_BA_7_WINSTART_MASK)) == 0);
	assert((((uint32_t)sw_ba_7_bitmap_force_zero << SW_BA_7_BITMAP_FORCE_ZERO_OFFSET) & ~((uint32_t)SW_BA_7_BITMAP_FORCE_ZERO_MASK)) == 0);
	assert((((uint32_t)sw_ba_7_win_set << SW_BA_7_WIN_SET_OFFSET) & ~((uint32_t)SW_BA_7_WIN_SET_MASK)) == 0);
	assert((((uint32_t)sw_ba_7_winoffset << SW_BA_7_WINOFFSET_OFFSET) & ~((uint32_t)SW_BA_7_WINOFFSET_MASK)) == 0);
	tmp =
		((uint32_t)sw_ba_7_winstart << SW_BA_7_WINSTART_OFFSET) |
		((uint32_t)sw_ba_7_bitmap_force_zero << SW_BA_7_BITMAP_FORCE_ZERO_OFFSET) |
		((uint32_t)sw_ba_7_win_set << SW_BA_7_WIN_SET_OFFSET) |
		((uint32_t)sw_ba_7_winoffset << SW_BA_7_WINOFFSET_OFFSET) ;
	WQ_MAC_WRITE(MAC_RX_BASEADDR + CFG_MAC_BA_7_BITMAP_CTRL_2_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_RX_BASEADDR + CFG_MAC_BA_7_BITMAP_CTRL_2_ADDR), tmp);
}
static __inline void mac_ba_7_bitmap_ctrl_2_unpack(volatile uint32_t* sw_ba_7_winstart, volatile uint32_t* sw_ba_7_bitmap_force_zero, volatile uint32_t* sw_ba_7_winoffset)
{
	uint32_t tmp;

	tmp = mac_ba_7_bitmap_ctrl_2_get();
	*sw_ba_7_winstart = (tmp & ((uint32_t)SW_BA_7_WINSTART_MASK)) >> SW_BA_7_WINSTART_OFFSET;
	*sw_ba_7_bitmap_force_zero = (tmp & ((uint32_t)SW_BA_7_BITMAP_FORCE_ZERO_MASK)) >> SW_BA_7_BITMAP_FORCE_ZERO_OFFSET;
	*sw_ba_7_winoffset = (tmp & ((uint32_t)SW_BA_7_WINOFFSET_MASK)) >> SW_BA_7_WINOFFSET_OFFSET;
}
static __inline uint32_t mac_ba_7_bitmap_sts_0_sw_ro_ba_7_winstart_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_7_BITMAP_STS_0_ADDR)) & SW_RO_BA_7_WINSTART_MASK) >> SW_RO_BA_7_WINSTART_OFFSET;
}
static __inline uint32_t mac_ba_7_bitmap_sts_0_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_7_BITMAP_STS_0_ADDR));
}
static __inline void mac_ba_7_bitmap_sts_0_unpack(volatile uint32_t* sw_ro_ba_7_winstart)
{
	uint32_t tmp;

	tmp = mac_ba_7_bitmap_sts_0_get();
	*sw_ro_ba_7_winstart = (tmp & ((uint32_t)SW_RO_BA_7_WINSTART_MASK)) >> SW_RO_BA_7_WINSTART_OFFSET;
}
static __inline uint32_t mac_ba_7_bitmap_sts_1_sw_ro_ba_7_bitmap_high_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_7_BITMAP_STS_1_ADDR)) & SW_RO_BA_7_BITMAP_HIGH_MASK) >> SW_RO_BA_7_BITMAP_HIGH_OFFSET;
}
static __inline uint32_t mac_ba_7_bitmap_sts_1_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_7_BITMAP_STS_1_ADDR));
}
static __inline void mac_ba_7_bitmap_sts_1_unpack(volatile uint32_t* sw_ro_ba_7_bitmap_high)
{
	uint32_t tmp;

	tmp = mac_ba_7_bitmap_sts_1_get();
	*sw_ro_ba_7_bitmap_high = (tmp & ((uint32_t)SW_RO_BA_7_BITMAP_HIGH_MASK)) >> SW_RO_BA_7_BITMAP_HIGH_OFFSET;
}
static __inline uint32_t mac_ba_7_bitmap_sts_2_sw_ro_ba_7_bitmap_low_get(void)
{
	return ((WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_7_BITMAP_STS_2_ADDR)) & SW_RO_BA_7_BITMAP_LOW_MASK) >> SW_RO_BA_7_BITMAP_LOW_OFFSET;
}
static __inline uint32_t mac_ba_7_bitmap_sts_2_get(void)
{
	return (WQ_MAC_READ(MAC_RX_BASEADDR + CFG_MAC_BA_7_BITMAP_STS_2_ADDR));
}
static __inline void mac_ba_7_bitmap_sts_2_unpack(volatile uint32_t* sw_ro_ba_7_bitmap_low)
{
	uint32_t tmp;

	tmp = mac_ba_7_bitmap_sts_2_get();
	*sw_ro_ba_7_bitmap_low = (tmp & ((uint32_t)SW_RO_BA_7_BITMAP_LOW_MASK)) >> SW_RO_BA_7_BITMAP_LOW_OFFSET;
}




