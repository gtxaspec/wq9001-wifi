
//-----------------------------------
#define CFG_MAC_TXQ_CTRL_ADDR 0x0000
#define SW_TXQS_SRST_OFFSET 11
#define SW_TXQS_SRST_MASK 0x00000800
#define SW_TXQS_CTS_RETRY_BIT_FORCE_ZERO_OFFSET 10
#define SW_TXQS_CTS_RETRY_BIT_FORCE_ZERO_MASK 0x00000400
#define SW_TXQS_RTS_RETRY_BIT_FORCE_ZERO_OFFSET 9
#define SW_TXQS_RTS_RETRY_BIT_FORCE_ZERO_MASK 0x00000200
#define SW_FORCE_HT_RTS_RATE_EXPTECT_OFFSET 8
#define SW_FORCE_HT_RTS_RATE_EXPTECT_MASK 0x00000100
#define SW_TXQS_CTS_SELF_TRY_NUM_OFFSET 4
#define SW_TXQS_CTS_SELF_TRY_NUM_MASK 0x000000F0
#define SW_TXQS_RTS_TRY_NUM_OFFSET 0
#define SW_TXQS_RTS_TRY_NUM_MASK 0x0000000F

//-----------------------------------
#define CFG_MAC_NODE_TX_DISABLE_ADDR 0x0004
#define SW_TXQS_NODE_TX_DISABLE_OFFSET 0
#define SW_TXQS_NODE_TX_DISABLE_MASK 0xFFFFFFFF

//-----------------------------------
#define CFG_MAC_TXQ_CFEND_CTRL_ADDR 0x0008
#define SW_TXQS_CFG_CFEND_RATE_EN_OFFSET 8
#define SW_TXQS_CFG_CFEND_RATE_EN_MASK 0x00000100
#define SW_TXQS_CFG_CFEND_RATE_OFFSET 0
#define SW_TXQS_CFG_CFEND_RATE_MASK 0x000000FF

//-----------------------------------
#define CFG_MAC_TXQ_RESP_TIMEOUT_DLY_ADDR 0x0010
#define SW_TXQS_RESP_RX_START_DLY_DSSS_LONG_OFFSET 24
#define SW_TXQS_RESP_RX_START_DLY_DSSS_LONG_MASK 0xFF000000
#define SW_TXQS_RESP_RX_START_DLY_DSSS_SHORT_OFFSET 16
#define SW_TXQS_RESP_RX_START_DLY_DSSS_SHORT_MASK 0x00FF0000
#define SW_TXQS_RESP_RX_START_DLY_OFDM_NONHT_OFFSET 8
#define SW_TXQS_RESP_RX_START_DLY_OFDM_NONHT_MASK 0x0000FF00
#define SW_TXQS_RESP_RX_START_DLY_OFDM_HT_OFFSET 0
#define SW_TXQS_RESP_RX_START_DLY_OFDM_HT_MASK 0x000000FF

//-----------------------------------
#define CFG_MAC_TXQS_PROCESS_TIMEOUT_ADDR 0x0014
#define SW_TXQS_PROCESS_TIMEOUT_OFFSET 0
#define SW_TXQS_PROCESS_TIMEOUT_MASK 0xFFFFFFFF

//-----------------------------------
#define CFG_MAC_TXQ_SECOND_PCS_CTRL_ADDR 0x0018
#define SW_TXQ_HT40_CHECK_PERIOD_OFFSET 16
#define SW_TXQ_HT40_CHECK_PERIOD_MASK 0xFFFF0000
#define SW_TXQ6_HT40_AUTO_BW_SEL_EN_OFFSET 6
#define SW_TXQ6_HT40_AUTO_BW_SEL_EN_MASK 0x00000040
#define SW_TXQ3_HT40_AUTO_BW_SEL_EN_OFFSET 3
#define SW_TXQ3_HT40_AUTO_BW_SEL_EN_MASK 0x00000008
#define SW_TXQ2_HT40_AUTO_BW_SEL_EN_OFFSET 2
#define SW_TXQ2_HT40_AUTO_BW_SEL_EN_MASK 0x00000004
#define SW_TXQ1_HT40_AUTO_BW_SEL_EN_OFFSET 1
#define SW_TXQ1_HT40_AUTO_BW_SEL_EN_MASK 0x00000002
#define SW_TXQ0_HT40_AUTO_BW_SEL_EN_OFFSET 0
#define SW_TXQ0_HT40_AUTO_BW_SEL_EN_MASK 0x00000001

//-----------------------------------
#define CFG_MAC_TXQ_SIGTAP_CTRL_ADDR 0x0020
#define SW_TXQS_TRIG_PLS_OFFSET 4
#define SW_TXQS_TRIG_PLS_MASK 0x00000010
#define SW_TXQS_SIGTAP_MUX_OFFSET 0
#define SW_TXQS_SIGTAP_MUX_MASK 0x0000000F

//-----------------------------------
#define CFG_MAC_TXQS_DBG_DISABLE_TIMEOUT_ADDR 0x0024
#define SW_TXQS_DBG_DISABLE_TIMEOUT_OFFSET 0
#define SW_TXQS_DBG_DISABLE_TIMEOUT_MASK 0xFFFFFFFF

//-----------------------------------
#define CFG_MAC_TXQS_DBG_PCS_BUSY_MONITOR_ADDR 0x0028
#define SW_TXQS_PCS_BUSY_MONITOR_CLR_OFFSET 17
#define SW_TXQS_PCS_BUSY_MONITOR_CLR_MASK 0x00020000
#define SW_TXQS_PCS_BUSY_MONITOR_MODE_OFFSET 16
#define SW_TXQS_PCS_BUSY_MONITOR_MODE_MASK 0x00010000
#define SW_TXQS_PCS_BUSY_MONITOR_THED_OFFSET 0
#define SW_TXQS_PCS_BUSY_MONITOR_THED_MASK 0x0000FFFF

//-----------------------------------
#define CFG_MAC_TXQS_INT_DESC_DONE_CTRL_ADDR 0x0030
#define SW_TXQ6_INT_DESC_DONE_TYPE_1_EN_OFFSET 13
#define SW_TXQ6_INT_DESC_DONE_TYPE_1_EN_MASK 0x00002000
#define SW_TXQ6_INT_DESC_DONE_TYPE_0_EN_OFFSET 12
#define SW_TXQ6_INT_DESC_DONE_TYPE_0_EN_MASK 0x00001000
#define SW_TXQ3_INT_DESC_DONE_TYPE_1_EN_OFFSET 7
#define SW_TXQ3_INT_DESC_DONE_TYPE_1_EN_MASK 0x00000080
#define SW_TXQ3_INT_DESC_DONE_TYPE_0_EN_OFFSET 6
#define SW_TXQ3_INT_DESC_DONE_TYPE_0_EN_MASK 0x00000040
#define SW_TXQ2_INT_DESC_DONE_TYPE_1_EN_OFFSET 5
#define SW_TXQ2_INT_DESC_DONE_TYPE_1_EN_MASK 0x00000020
#define SW_TXQ2_INT_DESC_DONE_TYPE_0_EN_OFFSET 4
#define SW_TXQ2_INT_DESC_DONE_TYPE_0_EN_MASK 0x00000010
#define SW_TXQ1_INT_DESC_DONE_TYPE_1_EN_OFFSET 3
#define SW_TXQ1_INT_DESC_DONE_TYPE_1_EN_MASK 0x00000008
#define SW_TXQ1_INT_DESC_DONE_TYPE_0_EN_OFFSET 2
#define SW_TXQ1_INT_DESC_DONE_TYPE_0_EN_MASK 0x00000004
#define SW_TXQ0_INT_DESC_DONE_TYPE_1_EN_OFFSET 1
#define SW_TXQ0_INT_DESC_DONE_TYPE_1_EN_MASK 0x00000002
#define SW_TXQ0_INT_DESC_DONE_TYPE_0_EN_OFFSET 0
#define SW_TXQ0_INT_DESC_DONE_TYPE_0_EN_MASK 0x00000001

//-----------------------------------
#define CFG_MAC_TXQS_INNER_COLLISION_CTRL_ADDR 0x0040
#define SW_TXQ6_INNER_COLLISION_CW_DOUBLE_EN_OFFSET 4
#define SW_TXQ6_INNER_COLLISION_CW_DOUBLE_EN_MASK 0x00000010
#define SW_TXQ3_INNER_COLLISION_CW_DOUBLE_EN_OFFSET 3
#define SW_TXQ3_INNER_COLLISION_CW_DOUBLE_EN_MASK 0x00000008
#define SW_TXQ2_INNER_COLLISION_CW_DOUBLE_EN_OFFSET 2
#define SW_TXQ2_INNER_COLLISION_CW_DOUBLE_EN_MASK 0x00000004
#define SW_TXQ1_INNER_COLLISION_CW_DOUBLE_EN_OFFSET 1
#define SW_TXQ1_INNER_COLLISION_CW_DOUBLE_EN_MASK 0x00000002
#define SW_TXQ0_INNER_COLLISION_CW_DOUBLE_EN_OFFSET 0
#define SW_TXQ0_INNER_COLLISION_CW_DOUBLE_EN_MASK 0x00000001

//-----------------------------------
#define CFG_MAC_TXQ_DBG_0_ADDR 0x0080
#define SW_RO_TXQ_DBG_0_OFFSET 0
#define SW_RO_TXQ_DBG_0_MASK 0xFFFFFFFF

//-----------------------------------
#define CFG_MAC_TXQ_DBG_1_ADDR 0x0084
#define SW_RO_TXQ_DBG_1_OFFSET 0
#define SW_RO_TXQ_DBG_1_MASK 0xFFFFFFFF

//-----------------------------------
#define CFG_MAC_TXQ_GENERAL_DBG_0_ADDR 0x00a0
#define SW_RO_TXQ0_RTS_SINGLE_TX_FAIL_REASON_OFFSET 28
#define SW_RO_TXQ0_RTS_SINGLE_TX_FAIL_REASON_MASK 0xF0000000
#define SW_RO_TXQ0_CTS_SELF_TX_FAIL_REASON_OFFSET 24
#define SW_RO_TXQ0_CTS_SELF_TX_FAIL_REASON_MASK 0x0F000000
#define SW_RO_TXQ0_CFEND_TX_FAIL_REASON_OFFSET 20
#define SW_RO_TXQ0_CFEND_TX_FAIL_REASON_MASK 0x00F00000
#define SW_RO_TXQ0_FRAME_TX_FAIL_REASON_OFFSET 16
#define SW_RO_TXQ0_FRAME_TX_FAIL_REASON_MASK 0x000F0000
#define SW_RO_TXQ1_RTS_SINGLE_TX_FAIL_REASON_OFFSET 12
#define SW_RO_TXQ1_RTS_SINGLE_TX_FAIL_REASON_MASK 0x0000F000
#define SW_RO_TXQ1_CTS_SELF_TX_FAIL_REASON_OFFSET 8
#define SW_RO_TXQ1_CTS_SELF_TX_FAIL_REASON_MASK 0x00000F00
#define SW_RO_TXQ1_CFEND_TX_FAIL_REASON_OFFSET 4
#define SW_RO_TXQ1_CFEND_TX_FAIL_REASON_MASK 0x000000F0
#define SW_RO_TXQ1_FRAME_TX_FAIL_REASON_OFFSET 0
#define SW_RO_TXQ1_FRAME_TX_FAIL_REASON_MASK 0x0000000F

//-----------------------------------
#define CFG_MAC_TXQ_GENERAL_DBG_1_ADDR 0x00a4
#define SW_RO_TXQ2_RTS_SINGLE_TX_FAIL_REASON_OFFSET 28
#define SW_RO_TXQ2_RTS_SINGLE_TX_FAIL_REASON_MASK 0xF0000000
#define SW_RO_TXQ2_CTS_SELF_TX_FAIL_REASON_OFFSET 24
#define SW_RO_TXQ2_CTS_SELF_TX_FAIL_REASON_MASK 0x0F000000
#define SW_RO_TXQ2_CFEND_TX_FAIL_REASON_OFFSET 20
#define SW_RO_TXQ2_CFEND_TX_FAIL_REASON_MASK 0x00F00000
#define SW_RO_TXQ2_FRAME_TX_FAIL_REASON_OFFSET 16
#define SW_RO_TXQ2_FRAME_TX_FAIL_REASON_MASK 0x000F0000
#define SW_RO_TXQ3_RTS_SINGLE_TX_FAIL_REASON_OFFSET 12
#define SW_RO_TXQ3_RTS_SINGLE_TX_FAIL_REASON_MASK 0x0000F000
#define SW_RO_TXQ3_CTS_SELF_TX_FAIL_REASON_OFFSET 8
#define SW_RO_TXQ3_CTS_SELF_TX_FAIL_REASON_MASK 0x00000F00
#define SW_RO_TXQ3_CFEND_TX_FAIL_REASON_OFFSET 4
#define SW_RO_TXQ3_CFEND_TX_FAIL_REASON_MASK 0x000000F0
#define SW_RO_TXQ3_FRAME_TX_FAIL_REASON_OFFSET 0
#define SW_RO_TXQ3_FRAME_TX_FAIL_REASON_MASK 0x0000000F

//-----------------------------------
#define CFG_MAC_TXQ_GENERAL_DBG_3_ADDR 0x00ac
#define SW_RO_TXQ6_RTS_SINGLE_TX_FAIL_REASON_OFFSET 28
#define SW_RO_TXQ6_RTS_SINGLE_TX_FAIL_REASON_MASK 0xF0000000
#define SW_RO_TXQ6_CTS_SELF_TX_FAIL_REASON_OFFSET 24
#define SW_RO_TXQ6_CTS_SELF_TX_FAIL_REASON_MASK 0x0F000000
#define SW_RO_TXQ6_CFEND_TX_FAIL_REASON_OFFSET 20
#define SW_RO_TXQ6_CFEND_TX_FAIL_REASON_MASK 0x00F00000
#define SW_RO_TXQ6_FRAME_TX_FAIL_REASON_OFFSET 16
#define SW_RO_TXQ6_FRAME_TX_FAIL_REASON_MASK 0x000F0000

//-----------------------------------
#define CFG_MAC_TXQ0_ENABLE_ADDR 0x0100
#define SW_TXQ0_SRST_OFFSET 5
#define SW_TXQ0_SRST_MASK 0x00000020
#define SW_TXQ0_DBG_INFO_CLR_OFFSET 4
#define SW_TXQ0_DBG_INFO_CLR_MASK 0x00000010
#define SW_TXQ0_DUMMY_TRIG_OFFSET 2
#define SW_TXQ0_DUMMY_TRIG_MASK 0x00000004
#define SW_TXQ0_DIS_PLS_OFFSET 1
#define SW_TXQ0_DIS_PLS_MASK 0x00000002
#define SW_TXQ0_EN_PLS_OFFSET 0
#define SW_TXQ0_EN_PLS_MASK 0x00000001

//-----------------------------------
#define CFG_MAC_TXQ0_CTRL_ADDR 0x0104
#define SW_TXQ0_DUMMY_INT_EN_OFFSET 6
#define SW_TXQ0_DUMMY_INT_EN_MASK 0x00000040
#define SW_TXQ0_HW_FRAME_FC_POWER_MODE_OFFSET 5
#define SW_TXQ0_HW_FRAME_FC_POWER_MODE_MASK 0x00000020
#define SW_TXQ0_CF_END_EN_OFFSET 4
#define SW_TXQ0_CF_END_EN_MASK 0x00000010
#define SW_TXQ0_CW_MIN_SET_PLS_OFFSET 0
#define SW_TXQ0_CW_MIN_SET_PLS_MASK 0x00000001

//-----------------------------------
#define CFG_MAC_TXQ0_IFS_CTRL_ADDR 0x0108
#define SW_TXQ0_EIFS_OFFSET 16
#define SW_TXQ0_EIFS_MASK 0xFFFF0000
#define SW_TXQ0_DIFS_OFFSET 0
#define SW_TXQ0_DIFS_MASK 0x000000FF

//-----------------------------------
#define CFG_MAC_TXQ0_RSP_TIME_ADDR 0x010c
#define SW_TXQ0_RESP_TIMEOUT_OFFSET 0
#define SW_TXQ0_RESP_TIMEOUT_MASK 0x000000FF

//-----------------------------------
#define CFG_MAC_TXQ0_PTR_ADDR 0x0110
#define SW_TXQ0_START_PTR_OFFSET 0
#define SW_TXQ0_START_PTR_MASK 0xFFFFFFFF

//-----------------------------------
#define CFG_MAC_TXQ0_TX_TIMEOUT_ADDR 0x0114
#define SW_TXQ0_TIMEOUT_OFFSET 0
#define SW_TXQ0_TIMEOUT_MASK 0xFFFFFFFF

//-----------------------------------
#define CFG_MAC_TXQ0_CW_ADDR 0x0120
#define SW_TXQ0_CW_MAX_OFFSET 16
#define SW_TXQ0_CW_MAX_MASK 0xFFFF0000
#define SW_TXQ0_CW_MIN_OFFSET 0
#define SW_TXQ0_CW_MIN_MASK 0x0000FFFF

//-----------------------------------
#define CFG_MAC_TXQ0_CW_FORCE_ADDR 0x0124
#define SW_TXQ0_CW_RAND_FORCE_EN_OFFSET 16
#define SW_TXQ0_CW_RAND_FORCE_EN_MASK 0x00010000
#define SW_TXQ0_CW_RAND_FORCE_VAL_OFFSET 0
#define SW_TXQ0_CW_RAND_FORCE_VAL_MASK 0x0000FFFF

//-----------------------------------
#define CFG_MAC_TXQ0_BKOFF_CTRL_ADDR 0x0128
#define SW_TXQ0_BKOFF_SEED_LOAD_OFFSET 16
#define SW_TXQ0_BKOFF_SEED_LOAD_MASK 0x00010000
#define SW_TXQ0_BKOFF_SEED_OFFSET 0
#define SW_TXQ0_BKOFF_SEED_MASK 0x0000FFFF

//-----------------------------------
#define CFG_MAC_TXQ0_PERIOD_ADDR 0x012c
#define SW_TXQ0_TXOP_OFFSET 0
#define SW_TXQ0_TXOP_MASK 0x00007FFF

//-----------------------------------
#define CFG_MAC_TXQ0_INT_CTRL_ADDR 0x0150
#define SW_TXQ0_DESC_DONE_INT_MITIGATION_OFFSET 16
#define SW_TXQ0_DESC_DONE_INT_MITIGATION_MASK 0x007F0000
#define SW_TXQ0_DESC_DONE_INT_TIMEOUT_OFFSET 0
#define SW_TXQ0_DESC_DONE_INT_TIMEOUT_MASK 0x0000FFFF

//-----------------------------------
#define CFG_MAC_TXQ0_STS_0_ADDR 0x0180
#define SW_RO_TXQ0_DESC_ACCESS_FSM_OFFSET 4
#define SW_RO_TXQ0_DESC_ACCESS_FSM_MASK 0x000000F0
#define SW_RO_TXQ0_CHN_ACESS_FSM_OFFSET 0
#define SW_RO_TXQ0_CHN_ACESS_FSM_MASK 0x0000000F

//-----------------------------------
#define CFG_MAC_TXQ0_DBG_BUS_0_STS_ADDR 0x0184
#define SW_TXQ0_DBG_BUS_0_STS_OFFSET 0
#define SW_TXQ0_DBG_BUS_0_STS_MASK 0xFFFFFFFF

//-----------------------------------
#define CFG_MAC_TXQ0_DBG_BUS_0_CLR_ADDR 0x0188
#define SW_TXQ0_DBG_BUS_0_CLR_OFFSET 0
#define SW_TXQ0_DBG_BUS_0_CLR_MASK 0xFFFFFFFF

//-----------------------------------
#define CFG_MAC_TXQ0_TX_STAT_STS_CLR_ADDR 0x0190
#define SW_TXQ0_RTS_TX_OK_CNT_CLR_OFFSET 5
#define SW_TXQ0_RTS_TX_OK_CNT_CLR_MASK 0x00000020
#define SW_TXQ0_CTS_TX_OK_CNT_CLR_OFFSET 4
#define SW_TXQ0_CTS_TX_OK_CNT_CLR_MASK 0x00000010
#define SW_TXQ0_FRAME_TX_OK_CNT_CLR_OFFSET 3
#define SW_TXQ0_FRAME_TX_OK_CNT_CLR_MASK 0x00000008
#define SW_TXQ0_CFEND_TX_OK_CNT_CLR_OFFSET 2
#define SW_TXQ0_CFEND_TX_OK_CNT_CLR_MASK 0x00000004
#define SW_TXQ0_RTS_TX_FAIL_CNT_CLR_OFFSET 1
#define SW_TXQ0_RTS_TX_FAIL_CNT_CLR_MASK 0x00000002
#define SW_TXQ0_FRAME_TX_FAIL_CNT_CLR_OFFSET 0
#define SW_TXQ0_FRAME_TX_FAIL_CNT_CLR_MASK 0x00000001

//-----------------------------------
#define CFG_MAC_TXQ0_TX_STAT_STS_0_ADDR 0x0194
#define SW_RO_TXQ0_RTS_TX_OK_CNT_OFFSET 16
#define SW_RO_TXQ0_RTS_TX_OK_CNT_MASK 0xFFFF0000
#define SW_RO_TXQ0_CTS_TX_OK_CNT_OFFSET 0
#define SW_RO_TXQ0_CTS_TX_OK_CNT_MASK 0x0000FFFF

//-----------------------------------
#define CFG_MAC_TXQ0_TX_STAT_STS_1_ADDR 0x0198
#define SW_RO_TXQ0_FRAME_TX_OK_CNT_OFFSET 16
#define SW_RO_TXQ0_FRAME_TX_OK_CNT_MASK 0xFFFF0000
#define SW_RO_TXQ0_CFEND_TX_OK_CNT_OFFSET 0
#define SW_RO_TXQ0_CFEND_TX_OK_CNT_MASK 0x0000FFFF

//-----------------------------------
#define CFG_MAC_TXQ0_TX_STAT_STS_2_ADDR 0x019c
#define SW_RO_TXQ0_RTS_TX_FAIL_CNT_OFFSET 16
#define SW_RO_TXQ0_RTS_TX_FAIL_CNT_MASK 0xFFFF0000
#define SW_RO_TXQ0_FRAME_TX_FAIL_CNT_OFFSET 0
#define SW_RO_TXQ0_FRAME_TX_FAIL_CNT_MASK 0x0000FFFF

//-----------------------------------
#define CFG_MAC_TXQ0_TX_STAT_STS_3_ADDR 0x01a0
#define SW_RO_TXQ0_TX_DESC_PTR_OFFSET 0
#define SW_RO_TXQ0_TX_DESC_PTR_MASK 0xFFFFFFFF

//-----------------------------------
#define CFG_MAC_TXQ0_PCS_BUSY_MONITOR_STAT_ADDR 0x01a4
#define SW_RO_TXQ0_PCS_BUSY_STUCK_TX_CNT_OFFSET 0
#define SW_RO_TXQ0_PCS_BUSY_STUCK_TX_CNT_MASK 0x0000FFFF

//-----------------------------------
#define CFG_MAC_TXQ0_DBG_CW_CTRL_ADDR 0x01b0
#define SW_TXQ0_DBG_CW_CLR_OFFSET 0
#define SW_TXQ0_DBG_CW_CLR_MASK 0x00000001

//-----------------------------------
#define CFG_MAC_TXQ0_DBG_CW_STS_ADDR 0x01b4
#define SW_RO_TXQ0_CW_OFFSET 16
#define SW_RO_TXQ0_CW_MASK 0xFFFF0000
#define SW_RO_TXQ0_CW_RTL_MAX_OFFSET 0
#define SW_RO_TXQ0_CW_RTL_MAX_MASK 0x0000FFFF

//-----------------------------------
#define CFG_MAC_TXQ1_ENABLE_ADDR 0x0200
#define SW_TXQ1_SRST_OFFSET 5
#define SW_TXQ1_SRST_MASK 0x00000020
#define SW_TXQ1_DBG_INFO_CLR_OFFSET 4
#define SW_TXQ1_DBG_INFO_CLR_MASK 0x00000010
#define SW_TXQ1_DUMMY_TRIG_OFFSET 2
#define SW_TXQ1_DUMMY_TRIG_MASK 0x00000004
#define SW_TXQ1_DIS_PLS_OFFSET 1
#define SW_TXQ1_DIS_PLS_MASK 0x00000002
#define SW_TXQ1_EN_PLS_OFFSET 0
#define SW_TXQ1_EN_PLS_MASK 0x00000001

//-----------------------------------
#define CFG_MAC_TXQ1_CTRL_ADDR 0x0204
#define SW_TXQ1_DUMMY_INT_EN_OFFSET 6
#define SW_TXQ1_DUMMY_INT_EN_MASK 0x00000040
#define SW_TXQ1_HW_FRAME_FC_POWER_MODE_OFFSET 5
#define SW_TXQ1_HW_FRAME_FC_POWER_MODE_MASK 0x00000020
#define SW_TXQ1_CF_END_EN_OFFSET 4
#define SW_TXQ1_CF_END_EN_MASK 0x00000010
#define SW_TXQ1_CW_MIN_SET_PLS_OFFSET 0
#define SW_TXQ1_CW_MIN_SET_PLS_MASK 0x00000001

//-----------------------------------
#define CFG_MAC_TXQ1_IFS_CTRL_ADDR 0x0208
#define SW_TXQ1_EIFS_OFFSET 16
#define SW_TXQ1_EIFS_MASK 0xFFFF0000
#define SW_TXQ1_DIFS_OFFSET 0
#define SW_TXQ1_DIFS_MASK 0x000000FF

//-----------------------------------
#define CFG_MAC_TXQ1_RSP_TIME_ADDR 0x020c
#define SW_TXQ1_RESP_TIMEOUT_OFFSET 0
#define SW_TXQ1_RESP_TIMEOUT_MASK 0x000000FF

//-----------------------------------
#define CFG_MAC_TXQ1_PTR_ADDR 0x0210
#define SW_TXQ1_START_PTR_OFFSET 0
#define SW_TXQ1_START_PTR_MASK 0xFFFFFFFF

//-----------------------------------
#define CFG_MAC_TXQ1_TX_TIMEOUT_ADDR 0x0214
#define SW_TXQ1_TIMEOUT_OFFSET 0
#define SW_TXQ1_TIMEOUT_MASK 0xFFFFFFFF

//-----------------------------------
#define CFG_MAC_TXQ1_CW_ADDR 0x0220
#define SW_TXQ1_CW_MAX_OFFSET 16
#define SW_TXQ1_CW_MAX_MASK 0xFFFF0000
#define SW_TXQ1_CW_MIN_OFFSET 0
#define SW_TXQ1_CW_MIN_MASK 0x0000FFFF

//-----------------------------------
#define CFG_MAC_TXQ1_CW_FORCE_ADDR 0x0224
#define SW_TXQ1_CW_RAND_FORCE_EN_OFFSET 16
#define SW_TXQ1_CW_RAND_FORCE_EN_MASK 0x00010000
#define SW_TXQ1_CW_RAND_FORCE_VAL_OFFSET 0
#define SW_TXQ1_CW_RAND_FORCE_VAL_MASK 0x0000FFFF

//-----------------------------------
#define CFG_MAC_TXQ1_BKOFF_CTRL_ADDR 0x0228
#define SW_TXQ1_BKOFF_SEED_LOAD_OFFSET 16
#define SW_TXQ1_BKOFF_SEED_LOAD_MASK 0x00010000
#define SW_TXQ1_BKOFF_SEED_OFFSET 0
#define SW_TXQ1_BKOFF_SEED_MASK 0x0000FFFF

//-----------------------------------
#define CFG_MAC_TXQ1_PERIOD_ADDR 0x022c
#define SW_TXQ1_TXOP_OFFSET 0
#define SW_TXQ1_TXOP_MASK 0x00007FFF

//-----------------------------------
#define CFG_MAC_TXQ1_INT_CTRL_ADDR 0x0250
#define SW_TXQ1_DESC_DONE_INT_MITIGATION_OFFSET 16
#define SW_TXQ1_DESC_DONE_INT_MITIGATION_MASK 0x007F0000
#define SW_TXQ1_DESC_DONE_INT_TIMEOUT_OFFSET 0
#define SW_TXQ1_DESC_DONE_INT_TIMEOUT_MASK 0x0000FFFF

//-----------------------------------
#define CFG_MAC_TXQ1_STS_0_ADDR 0x0280
#define SW_RO_TXQ1_DESC_ACCESS_FSM_OFFSET 4
#define SW_RO_TXQ1_DESC_ACCESS_FSM_MASK 0x000000F0
#define SW_RO_TXQ1_CHN_ACESS_FSM_OFFSET 0
#define SW_RO_TXQ1_CHN_ACESS_FSM_MASK 0x0000000F

//-----------------------------------
#define CFG_MAC_TXQ1_DBG_BUS_0_STS_ADDR 0x0284
#define SW_TXQ1_DBG_BUS_0_STS_OFFSET 0
#define SW_TXQ1_DBG_BUS_0_STS_MASK 0xFFFFFFFF

//-----------------------------------
#define CFG_MAC_TXQ1_DBG_BUS_0_CLR_ADDR 0x0288
#define SW_TXQ1_DBG_BUS_0_CLR_OFFSET 0
#define SW_TXQ1_DBG_BUS_0_CLR_MASK 0xFFFFFFFF

//-----------------------------------
#define CFG_MAC_TXQ1_TX_STAT_STS_CLR_ADDR 0x0290
#define SW_TXQ1_RTS_TX_OK_CNT_CLR_OFFSET 5
#define SW_TXQ1_RTS_TX_OK_CNT_CLR_MASK 0x00000020
#define SW_TXQ1_CTS_TX_OK_CNT_CLR_OFFSET 4
#define SW_TXQ1_CTS_TX_OK_CNT_CLR_MASK 0x00000010
#define SW_TXQ1_FRAME_TX_OK_CNT_CLR_OFFSET 3
#define SW_TXQ1_FRAME_TX_OK_CNT_CLR_MASK 0x00000008
#define SW_TXQ1_CFEND_TX_OK_CNT_CLR_OFFSET 2
#define SW_TXQ1_CFEND_TX_OK_CNT_CLR_MASK 0x00000004
#define SW_TXQ1_RTS_TX_FAIL_CNT_CLR_OFFSET 1
#define SW_TXQ1_RTS_TX_FAIL_CNT_CLR_MASK 0x00000002
#define SW_TXQ1_FRAME_TX_FAIL_CNT_CLR_OFFSET 0
#define SW_TXQ1_FRAME_TX_FAIL_CNT_CLR_MASK 0x00000001

//-----------------------------------
#define CFG_MAC_TXQ1_TX_STAT_STS_0_ADDR 0x0294
#define SW_RO_TXQ1_RTS_TX_OK_CNT_OFFSET 16
#define SW_RO_TXQ1_RTS_TX_OK_CNT_MASK 0xFFFF0000
#define SW_RO_TXQ1_CTS_TX_OK_CNT_OFFSET 0
#define SW_RO_TXQ1_CTS_TX_OK_CNT_MASK 0x0000FFFF

//-----------------------------------
#define CFG_MAC_TXQ1_TX_STAT_STS_1_ADDR 0x0298
#define SW_RO_TXQ1_FRAME_TX_OK_CNT_OFFSET 16
#define SW_RO_TXQ1_FRAME_TX_OK_CNT_MASK 0xFFFF0000
#define SW_RO_TXQ1_CFEND_TX_OK_CNT_OFFSET 0
#define SW_RO_TXQ1_CFEND_TX_OK_CNT_MASK 0x0000FFFF

//-----------------------------------
#define CFG_MAC_TXQ1_TX_STAT_STS_2_ADDR 0x029c
#define SW_RO_TXQ1_RTS_TX_FAIL_CNT_OFFSET 16
#define SW_RO_TXQ1_RTS_TX_FAIL_CNT_MASK 0xFFFF0000
#define SW_RO_TXQ1_FRAME_TX_FAIL_CNT_OFFSET 0
#define SW_RO_TXQ1_FRAME_TX_FAIL_CNT_MASK 0x0000FFFF

//-----------------------------------
#define CFG_MAC_TXQ1_TX_STAT_STS_3_ADDR 0x02a0
#define SW_RO_TXQ1_TX_DESC_PTR_OFFSET 0
#define SW_RO_TXQ1_TX_DESC_PTR_MASK 0xFFFFFFFF

//-----------------------------------
#define CFG_MAC_TXQ1_PCS_BUSY_MONITOR_STAT_ADDR 0x02a4
#define SW_RO_TXQ1_PCS_BUSY_STUCK_TX_CNT_OFFSET 0
#define SW_RO_TXQ1_PCS_BUSY_STUCK_TX_CNT_MASK 0x0000FFFF

//-----------------------------------
#define CFG_MAC_TXQ1_DBG_CW_CTRL_ADDR 0x02b0
#define SW_TXQ1_DBG_CW_CLR_OFFSET 0
#define SW_TXQ1_DBG_CW_CLR_MASK 0x00000001

//-----------------------------------
#define CFG_MAC_TXQ1_DBG_CW_STS_ADDR 0x02b4
#define SW_RO_TXQ1_CW_OFFSET 16
#define SW_RO_TXQ1_CW_MASK 0xFFFF0000
#define SW_RO_TXQ1_CW_RTL_MAX_OFFSET 0
#define SW_RO_TXQ1_CW_RTL_MAX_MASK 0x0000FFFF

//-----------------------------------
#define CFG_MAC_TXQ2_ENABLE_ADDR 0x0300
#define SW_TXQ2_SRST_OFFSET 5
#define SW_TXQ2_SRST_MASK 0x00000020
#define SW_TXQ2_DBG_INFO_CLR_OFFSET 4
#define SW_TXQ2_DBG_INFO_CLR_MASK 0x00000010
#define SW_TXQ2_DUMMY_TRIG_OFFSET 2
#define SW_TXQ2_DUMMY_TRIG_MASK 0x00000004
#define SW_TXQ2_DIS_PLS_OFFSET 1
#define SW_TXQ2_DIS_PLS_MASK 0x00000002
#define SW_TXQ2_EN_PLS_OFFSET 0
#define SW_TXQ2_EN_PLS_MASK 0x00000001

//-----------------------------------
#define CFG_MAC_TXQ2_CTRL_ADDR 0x0304
#define SW_TXQ2_DUMMY_INT_EN_OFFSET 6
#define SW_TXQ2_DUMMY_INT_EN_MASK 0x00000040
#define SW_TXQ2_HW_FRAME_FC_POWER_MODE_OFFSET 5
#define SW_TXQ2_HW_FRAME_FC_POWER_MODE_MASK 0x00000020
#define SW_TXQ2_CF_END_EN_OFFSET 4
#define SW_TXQ2_CF_END_EN_MASK 0x00000010
#define SW_TXQ2_CW_MIN_SET_PLS_OFFSET 0
#define SW_TXQ2_CW_MIN_SET_PLS_MASK 0x00000001

//-----------------------------------
#define CFG_MAC_TXQ2_IFS_CTRL_ADDR 0x0308
#define SW_TXQ2_EIFS_OFFSET 16
#define SW_TXQ2_EIFS_MASK 0xFFFF0000
#define SW_TXQ2_DIFS_OFFSET 0
#define SW_TXQ2_DIFS_MASK 0x000000FF

//-----------------------------------
#define CFG_MAC_TXQ2_RSP_TIME_ADDR 0x030c
#define SW_TXQ2_RESP_TIMEOUT_OFFSET 0
#define SW_TXQ2_RESP_TIMEOUT_MASK 0x000000FF

//-----------------------------------
#define CFG_MAC_TXQ2_PTR_ADDR 0x0310
#define SW_TXQ2_START_PTR_OFFSET 0
#define SW_TXQ2_START_PTR_MASK 0xFFFFFFFF

//-----------------------------------
#define CFG_MAC_TXQ2_TX_TIMEOUT_ADDR 0x0314
#define SW_TXQ2_TIMEOUT_OFFSET 0
#define SW_TXQ2_TIMEOUT_MASK 0xFFFFFFFF

//-----------------------------------
#define CFG_MAC_TXQ2_CW_ADDR 0x0320
#define SW_TXQ2_CW_MAX_OFFSET 16
#define SW_TXQ2_CW_MAX_MASK 0xFFFF0000
#define SW_TXQ2_CW_MIN_OFFSET 0
#define SW_TXQ2_CW_MIN_MASK 0x0000FFFF

//-----------------------------------
#define CFG_MAC_TXQ2_CW_FORCE_ADDR 0x0324
#define SW_TXQ2_CW_RAND_FORCE_EN_OFFSET 16
#define SW_TXQ2_CW_RAND_FORCE_EN_MASK 0x00010000
#define SW_TXQ2_CW_RAND_FORCE_VAL_OFFSET 0
#define SW_TXQ2_CW_RAND_FORCE_VAL_MASK 0x0000FFFF

//-----------------------------------
#define CFG_MAC_TXQ2_BKOFF_CTRL_ADDR 0x0328
#define SW_TXQ2_BKOFF_SEED_LOAD_OFFSET 16
#define SW_TXQ2_BKOFF_SEED_LOAD_MASK 0x00010000
#define SW_TXQ2_BKOFF_SEED_OFFSET 0
#define SW_TXQ2_BKOFF_SEED_MASK 0x0000FFFF

//-----------------------------------
#define CFG_MAC_TXQ2_PERIOD_ADDR 0x032c
#define SW_TXQ2_TXOP_OFFSET 0
#define SW_TXQ2_TXOP_MASK 0x00007FFF

//-----------------------------------
#define CFG_MAC_TXQ2_INT_CTRL_ADDR 0x0350
#define SW_TXQ2_DESC_DONE_INT_MITIGATION_OFFSET 16
#define SW_TXQ2_DESC_DONE_INT_MITIGATION_MASK 0x007F0000
#define SW_TXQ2_DESC_DONE_INT_TIMEOUT_OFFSET 0
#define SW_TXQ2_DESC_DONE_INT_TIMEOUT_MASK 0x0000FFFF

//-----------------------------------
#define CFG_MAC_TXQ2_STS_0_ADDR 0x0380
#define SW_RO_TXQ2_DESC_ACCESS_FSM_OFFSET 4
#define SW_RO_TXQ2_DESC_ACCESS_FSM_MASK 0x000000F0
#define SW_RO_TXQ2_CHN_ACESS_FSM_OFFSET 0
#define SW_RO_TXQ2_CHN_ACESS_FSM_MASK 0x0000000F

//-----------------------------------
#define CFG_MAC_TXQ2_DBG_BUS_0_STS_ADDR 0x0384
#define SW_TXQ2_DBG_BUS_0_STS_OFFSET 0
#define SW_TXQ2_DBG_BUS_0_STS_MASK 0xFFFFFFFF

//-----------------------------------
#define CFG_MAC_TXQ2_DBG_BUS_0_CLR_ADDR 0x0388
#define SW_TXQ2_DBG_BUS_0_CLR_OFFSET 0
#define SW_TXQ2_DBG_BUS_0_CLR_MASK 0xFFFFFFFF

//-----------------------------------
#define CFG_MAC_TXQ2_TX_STAT_STS_CLR_ADDR 0x0390
#define SW_TXQ2_RTS_TX_OK_CNT_CLR_OFFSET 5
#define SW_TXQ2_RTS_TX_OK_CNT_CLR_MASK 0x00000020
#define SW_TXQ2_CTS_TX_OK_CNT_CLR_OFFSET 4
#define SW_TXQ2_CTS_TX_OK_CNT_CLR_MASK 0x00000010
#define SW_TXQ2_FRAME_TX_OK_CNT_CLR_OFFSET 3
#define SW_TXQ2_FRAME_TX_OK_CNT_CLR_MASK 0x00000008
#define SW_TXQ2_CFEND_TX_OK_CNT_CLR_OFFSET 2
#define SW_TXQ2_CFEND_TX_OK_CNT_CLR_MASK 0x00000004
#define SW_TXQ2_RTS_TX_FAIL_CNT_CLR_OFFSET 1
#define SW_TXQ2_RTS_TX_FAIL_CNT_CLR_MASK 0x00000002
#define SW_TXQ2_FRAME_TX_FAIL_CNT_CLR_OFFSET 0
#define SW_TXQ2_FRAME_TX_FAIL_CNT_CLR_MASK 0x00000001

//-----------------------------------
#define CFG_MAC_TXQ2_TX_STAT_STS_0_ADDR 0x0394
#define SW_RO_TXQ2_RTS_TX_OK_CNT_OFFSET 16
#define SW_RO_TXQ2_RTS_TX_OK_CNT_MASK 0xFFFF0000
#define SW_RO_TXQ2_CTS_TX_OK_CNT_OFFSET 0
#define SW_RO_TXQ2_CTS_TX_OK_CNT_MASK 0x0000FFFF

//-----------------------------------
#define CFG_MAC_TXQ2_TX_STAT_STS_1_ADDR 0x0398
#define SW_RO_TXQ2_FRAME_TX_OK_CNT_OFFSET 16
#define SW_RO_TXQ2_FRAME_TX_OK_CNT_MASK 0xFFFF0000
#define SW_RO_TXQ2_CFEND_TX_OK_CNT_OFFSET 0
#define SW_RO_TXQ2_CFEND_TX_OK_CNT_MASK 0x0000FFFF

//-----------------------------------
#define CFG_MAC_TXQ2_TX_STAT_STS_2_ADDR 0x039c
#define SW_RO_TXQ2_RTS_TX_FAIL_CNT_OFFSET 16
#define SW_RO_TXQ2_RTS_TX_FAIL_CNT_MASK 0xFFFF0000
#define SW_RO_TXQ2_FRAME_TX_FAIL_CNT_OFFSET 0
#define SW_RO_TXQ2_FRAME_TX_FAIL_CNT_MASK 0x0000FFFF

//-----------------------------------
#define CFG_MAC_TXQ2_TX_STAT_STS_3_ADDR 0x03a0
#define SW_RO_TXQ2_TX_DESC_PTR_OFFSET 0
#define SW_RO_TXQ2_TX_DESC_PTR_MASK 0xFFFFFFFF

//-----------------------------------
#define CFG_MAC_TXQ2_PCS_BUSY_MONITOR_STAT_ADDR 0x03a4
#define SW_RO_TXQ2_PCS_BUSY_STUCK_TX_CNT_OFFSET 0
#define SW_RO_TXQ2_PCS_BUSY_STUCK_TX_CNT_MASK 0x0000FFFF

//-----------------------------------
#define CFG_MAC_TXQ2_DBG_CW_CTRL_ADDR 0x03b0
#define SW_TXQ2_DBG_CW_CLR_OFFSET 0
#define SW_TXQ2_DBG_CW_CLR_MASK 0x00000001

//-----------------------------------
#define CFG_MAC_TXQ2_DBG_CW_STS_ADDR 0x03b4
#define SW_RO_TXQ2_CW_OFFSET 16
#define SW_RO_TXQ2_CW_MASK 0xFFFF0000
#define SW_RO_TXQ2_CW_RTL_MAX_OFFSET 0
#define SW_RO_TXQ2_CW_RTL_MAX_MASK 0x0000FFFF

//-----------------------------------
#define CFG_MAC_TXQ3_ENABLE_ADDR 0x0400
#define SW_TXQ3_SRST_OFFSET 5
#define SW_TXQ3_SRST_MASK 0x00000020
#define SW_TXQ3_DBG_INFO_CLR_OFFSET 4
#define SW_TXQ3_DBG_INFO_CLR_MASK 0x00000010
#define SW_TXQ3_DUMMY_TRIG_OFFSET 2
#define SW_TXQ3_DUMMY_TRIG_MASK 0x00000004
#define SW_TXQ3_DIS_PLS_OFFSET 1
#define SW_TXQ3_DIS_PLS_MASK 0x00000002
#define SW_TXQ3_EN_PLS_OFFSET 0
#define SW_TXQ3_EN_PLS_MASK 0x00000001

//-----------------------------------
#define CFG_MAC_TXQ3_CTRL_ADDR 0x0404
#define SW_TXQ3_DUMMY_INT_EN_OFFSET 6
#define SW_TXQ3_DUMMY_INT_EN_MASK 0x00000040
#define SW_TXQ3_HW_FRAME_FC_POWER_MODE_OFFSET 5
#define SW_TXQ3_HW_FRAME_FC_POWER_MODE_MASK 0x00000020
#define SW_TXQ3_CF_END_EN_OFFSET 4
#define SW_TXQ3_CF_END_EN_MASK 0x00000010
#define SW_TXQ3_CW_MIN_SET_PLS_OFFSET 0
#define SW_TXQ3_CW_MIN_SET_PLS_MASK 0x00000001

//-----------------------------------
#define CFG_MAC_TXQ3_IFS_CTRL_ADDR 0x0408
#define SW_TXQ3_EIFS_OFFSET 16
#define SW_TXQ3_EIFS_MASK 0xFFFF0000
#define SW_TXQ3_DIFS_OFFSET 0
#define SW_TXQ3_DIFS_MASK 0x000000FF

//-----------------------------------
#define CFG_MAC_TXQ3_RSP_TIME_ADDR 0x040c
#define SW_TXQ3_RESP_TIMEOUT_OFFSET 0
#define SW_TXQ3_RESP_TIMEOUT_MASK 0x000000FF

//-----------------------------------
#define CFG_MAC_TXQ3_PTR_ADDR 0x0410
#define SW_TXQ3_START_PTR_OFFSET 0
#define SW_TXQ3_START_PTR_MASK 0xFFFFFFFF

//-----------------------------------
#define CFG_MAC_TXQ3_TX_TIMEOUT_ADDR 0x0414
#define SW_TXQ3_TIMEOUT_OFFSET 0
#define SW_TXQ3_TIMEOUT_MASK 0xFFFFFFFF

//-----------------------------------
#define CFG_MAC_TXQ3_CW_ADDR 0x0420
#define SW_TXQ3_CW_MAX_OFFSET 16
#define SW_TXQ3_CW_MAX_MASK 0xFFFF0000
#define SW_TXQ3_CW_MIN_OFFSET 0
#define SW_TXQ3_CW_MIN_MASK 0x0000FFFF

//-----------------------------------
#define CFG_MAC_TXQ3_CW_FORCE_ADDR 0x0424
#define SW_TXQ3_CW_RAND_FORCE_EN_OFFSET 16
#define SW_TXQ3_CW_RAND_FORCE_EN_MASK 0x00010000
#define SW_TXQ3_CW_RAND_FORCE_VAL_OFFSET 0
#define SW_TXQ3_CW_RAND_FORCE_VAL_MASK 0x0000FFFF

//-----------------------------------
#define CFG_MAC_TXQ3_BKOFF_CTRL_ADDR 0x0428
#define SW_TXQ3_BKOFF_SEED_LOAD_OFFSET 16
#define SW_TXQ3_BKOFF_SEED_LOAD_MASK 0x00010000
#define SW_TXQ3_BKOFF_SEED_OFFSET 0
#define SW_TXQ3_BKOFF_SEED_MASK 0x0000FFFF

//-----------------------------------
#define CFG_MAC_TXQ3_PERIOD_ADDR 0x042c
#define SW_TXQ3_TXOP_OFFSET 0
#define SW_TXQ3_TXOP_MASK 0x00007FFF

//-----------------------------------
#define CFG_MAC_TXQ3_INT_CTRL_ADDR 0x0450
#define SW_TXQ3_DESC_DONE_INT_MITIGATION_OFFSET 16
#define SW_TXQ3_DESC_DONE_INT_MITIGATION_MASK 0x007F0000
#define SW_TXQ3_DESC_DONE_INT_TIMEOUT_OFFSET 0
#define SW_TXQ3_DESC_DONE_INT_TIMEOUT_MASK 0x0000FFFF

//-----------------------------------
#define CFG_MAC_TXQ3_STS_0_ADDR 0x0480
#define SW_RO_TXQ3_DESC_ACCESS_FSM_OFFSET 4
#define SW_RO_TXQ3_DESC_ACCESS_FSM_MASK 0x000000F0
#define SW_RO_TXQ3_CHN_ACESS_FSM_OFFSET 0
#define SW_RO_TXQ3_CHN_ACESS_FSM_MASK 0x0000000F

//-----------------------------------
#define CFG_MAC_TXQ3_DBG_BUS_0_STS_ADDR 0x0484
#define SW_TXQ3_DBG_BUS_0_STS_OFFSET 0
#define SW_TXQ3_DBG_BUS_0_STS_MASK 0xFFFFFFFF

//-----------------------------------
#define CFG_MAC_TXQ3_DBG_BUS_0_CLR_ADDR 0x0488
#define SW_TXQ3_DBG_BUS_0_CLR_OFFSET 0
#define SW_TXQ3_DBG_BUS_0_CLR_MASK 0xFFFFFFFF

//-----------------------------------
#define CFG_MAC_TXQ3_TX_STAT_STS_CLR_ADDR 0x0490
#define SW_TXQ3_RTS_TX_OK_CNT_CLR_OFFSET 5
#define SW_TXQ3_RTS_TX_OK_CNT_CLR_MASK 0x00000020
#define SW_TXQ3_CTS_TX_OK_CNT_CLR_OFFSET 4
#define SW_TXQ3_CTS_TX_OK_CNT_CLR_MASK 0x00000010
#define SW_TXQ3_FRAME_TX_OK_CNT_CLR_OFFSET 3
#define SW_TXQ3_FRAME_TX_OK_CNT_CLR_MASK 0x00000008
#define SW_TXQ3_CFEND_TX_OK_CNT_CLR_OFFSET 2
#define SW_TXQ3_CFEND_TX_OK_CNT_CLR_MASK 0x00000004
#define SW_TXQ3_RTS_TX_FAIL_CNT_CLR_OFFSET 1
#define SW_TXQ3_RTS_TX_FAIL_CNT_CLR_MASK 0x00000002
#define SW_TXQ3_FRAME_TX_FAIL_CNT_CLR_OFFSET 0
#define SW_TXQ3_FRAME_TX_FAIL_CNT_CLR_MASK 0x00000001

//-----------------------------------
#define CFG_MAC_TXQ3_TX_STAT_STS_0_ADDR 0x0494
#define SW_RO_TXQ3_RTS_TX_OK_CNT_OFFSET 16
#define SW_RO_TXQ3_RTS_TX_OK_CNT_MASK 0xFFFF0000
#define SW_RO_TXQ3_CTS_TX_OK_CNT_OFFSET 0
#define SW_RO_TXQ3_CTS_TX_OK_CNT_MASK 0x0000FFFF

//-----------------------------------
#define CFG_MAC_TXQ3_TX_STAT_STS_1_ADDR 0x0498
#define SW_RO_TXQ3_FRAME_TX_OK_CNT_OFFSET 16
#define SW_RO_TXQ3_FRAME_TX_OK_CNT_MASK 0xFFFF0000
#define SW_RO_TXQ3_CFEND_TX_OK_CNT_OFFSET 0
#define SW_RO_TXQ3_CFEND_TX_OK_CNT_MASK 0x0000FFFF

//-----------------------------------
#define CFG_MAC_TXQ3_TX_STAT_STS_2_ADDR 0x049c
#define SW_RO_TXQ3_RTS_TX_FAIL_CNT_OFFSET 16
#define SW_RO_TXQ3_RTS_TX_FAIL_CNT_MASK 0xFFFF0000
#define SW_RO_TXQ3_FRAME_TX_FAIL_CNT_OFFSET 0
#define SW_RO_TXQ3_FRAME_TX_FAIL_CNT_MASK 0x0000FFFF

//-----------------------------------
#define CFG_MAC_TXQ3_TX_STAT_STS_3_ADDR 0x04a0
#define SW_RO_TXQ3_TX_DESC_PTR_OFFSET 0
#define SW_RO_TXQ3_TX_DESC_PTR_MASK 0xFFFFFFFF

//-----------------------------------
#define CFG_MAC_TXQ3_PCS_BUSY_MONITOR_STAT_ADDR 0x04a4
#define SW_RO_TXQ3_PCS_BUSY_STUCK_TX_CNT_OFFSET 0
#define SW_RO_TXQ3_PCS_BUSY_STUCK_TX_CNT_MASK 0x0000FFFF

//-----------------------------------
#define CFG_MAC_TXQ3_DBG_CW_CTRL_ADDR 0x04b0
#define SW_TXQ3_DBG_CW_CLR_OFFSET 0
#define SW_TXQ3_DBG_CW_CLR_MASK 0x00000001

//-----------------------------------
#define CFG_MAC_TXQ3_DBG_CW_STS_ADDR 0x04b4
#define SW_RO_TXQ3_CW_OFFSET 16
#define SW_RO_TXQ3_CW_MASK 0xFFFF0000
#define SW_RO_TXQ3_CW_RTL_MAX_OFFSET 0
#define SW_RO_TXQ3_CW_RTL_MAX_MASK 0x0000FFFF

//-----------------------------------
#define CFG_MAC_TXQ6_ENABLE_ADDR 0x0700
#define SW_TXQ6_SRST_OFFSET 5
#define SW_TXQ6_SRST_MASK 0x00000020
#define SW_TXQ6_DBG_INFO_CLR_OFFSET 4
#define SW_TXQ6_DBG_INFO_CLR_MASK 0x00000010
#define SW_TXQ6_DUMMY_TRIG_OFFSET 2
#define SW_TXQ6_DUMMY_TRIG_MASK 0x00000004
#define SW_TXQ6_DIS_PLS_OFFSET 1
#define SW_TXQ6_DIS_PLS_MASK 0x00000002
#define SW_TXQ6_EN_PLS_OFFSET 0
#define SW_TXQ6_EN_PLS_MASK 0x00000001

//-----------------------------------
#define CFG_MAC_TXQ6_CTRL_ADDR 0x0704
#define SW_TXQ6_DUMMY_INT_EN_OFFSET 6
#define SW_TXQ6_DUMMY_INT_EN_MASK 0x00000040
#define SW_TXQ6_HW_FRAME_FC_POWER_MODE_OFFSET 5
#define SW_TXQ6_HW_FRAME_FC_POWER_MODE_MASK 0x00000020
#define SW_TXQ6_CF_END_EN_OFFSET 4
#define SW_TXQ6_CF_END_EN_MASK 0x00000010
#define SW_TXQ6_CW_MIN_SET_PLS_OFFSET 0
#define SW_TXQ6_CW_MIN_SET_PLS_MASK 0x00000001

//-----------------------------------
#define CFG_MAC_TXQ6_IFS_CTRL_ADDR 0x0708
#define SW_TXQ6_EIFS_OFFSET 16
#define SW_TXQ6_EIFS_MASK 0xFFFF0000
#define SW_TXQ6_DIFS_OFFSET 0
#define SW_TXQ6_DIFS_MASK 0x000000FF

//-----------------------------------
#define CFG_MAC_TXQ6_RSP_TIME_ADDR 0x070c
#define SW_TXQ6_RESP_TIMEOUT_OFFSET 0
#define SW_TXQ6_RESP_TIMEOUT_MASK 0x000000FF

//-----------------------------------
#define CFG_MAC_TXQ6_PTR_ADDR 0x0710
#define SW_TXQ6_START_PTR_OFFSET 0
#define SW_TXQ6_START_PTR_MASK 0xFFFFFFFF

//-----------------------------------
#define CFG_MAC_TXQ6_TX_TIMEOUT_ADDR 0x0714
#define SW_TXQ6_TIMEOUT_OFFSET 0
#define SW_TXQ6_TIMEOUT_MASK 0xFFFFFFFF

//-----------------------------------
#define CFG_MAC_TXQ6_CW_ADDR 0x0720
#define SW_TXQ6_CW_MAX_OFFSET 16
#define SW_TXQ6_CW_MAX_MASK 0xFFFF0000
#define SW_TXQ6_CW_MIN_OFFSET 0
#define SW_TXQ6_CW_MIN_MASK 0x0000FFFF

//-----------------------------------
#define CFG_MAC_TXQ6_CW_FORCE_ADDR 0x0724
#define SW_TXQ6_CW_RAND_FORCE_EN_OFFSET 16
#define SW_TXQ6_CW_RAND_FORCE_EN_MASK 0x00010000
#define SW_TXQ6_CW_RAND_FORCE_VAL_OFFSET 0
#define SW_TXQ6_CW_RAND_FORCE_VAL_MASK 0x0000FFFF

//-----------------------------------
#define CFG_MAC_TXQ6_BKOFF_CTRL_ADDR 0x0728
#define SW_TXQ6_BKOFF_SEED_LOAD_OFFSET 16
#define SW_TXQ6_BKOFF_SEED_LOAD_MASK 0x00010000
#define SW_TXQ6_BKOFF_SEED_OFFSET 0
#define SW_TXQ6_BKOFF_SEED_MASK 0x0000FFFF

//-----------------------------------
#define CFG_MAC_TXQ6_PERIOD_ADDR 0x072c
#define SW_TXQ6_TXOP_OFFSET 0
#define SW_TXQ6_TXOP_MASK 0x00007FFF

//-----------------------------------
#define CFG_MAC_TXQ6_INT_CTRL_ADDR 0x0750
#define SW_TXQ6_DESC_DONE_INT_MITIGATION_OFFSET 16
#define SW_TXQ6_DESC_DONE_INT_MITIGATION_MASK 0x007F0000
#define SW_TXQ6_DESC_DONE_INT_TIMEOUT_OFFSET 0
#define SW_TXQ6_DESC_DONE_INT_TIMEOUT_MASK 0x0000FFFF

//-----------------------------------
#define CFG_MAC_TXQ6_STS_0_ADDR 0x0780
#define SW_RO_TXQ6_DESC_ACCESS_FSM_OFFSET 4
#define SW_RO_TXQ6_DESC_ACCESS_FSM_MASK 0x000000F0
#define SW_RO_TXQ6_CHN_ACESS_FSM_OFFSET 0
#define SW_RO_TXQ6_CHN_ACESS_FSM_MASK 0x0000000F

//-----------------------------------
#define CFG_MAC_TXQ6_DBG_BUS_0_STS_ADDR 0x0784
#define SW_TXQ6_DBG_BUS_0_STS_OFFSET 0
#define SW_TXQ6_DBG_BUS_0_STS_MASK 0xFFFFFFFF

//-----------------------------------
#define CFG_MAC_TXQ6_DBG_BUS_0_CLR_ADDR 0x0788
#define SW_TXQ6_DBG_BUS_0_CLR_OFFSET 0
#define SW_TXQ6_DBG_BUS_0_CLR_MASK 0xFFFFFFFF

//-----------------------------------
#define CFG_MAC_TXQ6_TX_STAT_STS_CLR_ADDR 0x0790
#define SW_TXQ6_RTS_TX_OK_CNT_CLR_OFFSET 5
#define SW_TXQ6_RTS_TX_OK_CNT_CLR_MASK 0x00000020
#define SW_TXQ6_CTS_TX_OK_CNT_CLR_OFFSET 4
#define SW_TXQ6_CTS_TX_OK_CNT_CLR_MASK 0x00000010
#define SW_TXQ6_FRAME_TX_OK_CNT_CLR_OFFSET 3
#define SW_TXQ6_FRAME_TX_OK_CNT_CLR_MASK 0x00000008
#define SW_TXQ6_CFEND_TX_OK_CNT_CLR_OFFSET 2
#define SW_TXQ6_CFEND_TX_OK_CNT_CLR_MASK 0x00000004
#define SW_TXQ6_RTS_TX_FAIL_CNT_CLR_OFFSET 1
#define SW_TXQ6_RTS_TX_FAIL_CNT_CLR_MASK 0x00000002
#define SW_TXQ6_FRAME_TX_FAIL_CNT_CLR_OFFSET 0
#define SW_TXQ6_FRAME_TX_FAIL_CNT_CLR_MASK 0x00000001

//-----------------------------------
#define CFG_MAC_TXQ6_TX_STAT_STS_0_ADDR 0x0794
#define SW_RO_TXQ6_RTS_TX_OK_CNT_OFFSET 16
#define SW_RO_TXQ6_RTS_TX_OK_CNT_MASK 0xFFFF0000
#define SW_RO_TXQ6_CTS_TX_OK_CNT_OFFSET 0
#define SW_RO_TXQ6_CTS_TX_OK_CNT_MASK 0x0000FFFF

//-----------------------------------
#define CFG_MAC_TXQ6_TX_STAT_STS_1_ADDR 0x0798
#define SW_RO_TXQ6_FRAME_TX_OK_CNT_OFFSET 16
#define SW_RO_TXQ6_FRAME_TX_OK_CNT_MASK 0xFFFF0000
#define SW_RO_TXQ6_CFEND_TX_OK_CNT_OFFSET 0
#define SW_RO_TXQ6_CFEND_TX_OK_CNT_MASK 0x0000FFFF

//-----------------------------------
#define CFG_MAC_TXQ6_TX_STAT_STS_2_ADDR 0x079c
#define SW_RO_TXQ6_RTS_TX_FAIL_CNT_OFFSET 16
#define SW_RO_TXQ6_RTS_TX_FAIL_CNT_MASK 0xFFFF0000
#define SW_RO_TXQ6_FRAME_TX_FAIL_CNT_OFFSET 0
#define SW_RO_TXQ6_FRAME_TX_FAIL_CNT_MASK 0x0000FFFF

//-----------------------------------
#define CFG_MAC_TXQ6_TX_STAT_STS_3_ADDR 0x07a0
#define SW_RO_TXQ6_TX_DESC_PTR_OFFSET 0
#define SW_RO_TXQ6_TX_DESC_PTR_MASK 0xFFFFFFFF

//-----------------------------------
#define CFG_MAC_TXQ6_PCS_BUSY_MONITOR_STAT_ADDR 0x07a4
#define SW_RO_TXQ6_PCS_BUSY_STUCK_TX_CNT_OFFSET 0
#define SW_RO_TXQ6_PCS_BUSY_STUCK_TX_CNT_MASK 0x0000FFFF

//-----------------------------------
#define CFG_MAC_TXQ6_DBG_CW_CTRL_ADDR 0x07b0
#define SW_TXQ6_DBG_CW_CLR_OFFSET 0
#define SW_TXQ6_DBG_CW_CLR_MASK 0x00000001

//-----------------------------------
#define CFG_MAC_TXQ6_DBG_CW_STS_ADDR 0x07b4
#define SW_RO_TXQ6_CW_OFFSET 16
#define SW_RO_TXQ6_CW_MASK 0xFFFF0000
#define SW_RO_TXQ6_CW_RTL_MAX_OFFSET 0
#define SW_RO_TXQ6_CW_RTL_MAX_MASK 0x0000FFFF

//HW module read/write macro




static __inline void mac_txq_ctrl_sw_txqs_srst_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ_CTRL_ADDR);
	tmp &= ~SW_TXQS_SRST_MASK;
	tmp |= (value << SW_TXQS_SRST_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ_CTRL_ADDR), tmp);
}
static __inline void mac_txq_ctrl_sw_txqs_cts_retry_bit_force_zero_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ_CTRL_ADDR);
	tmp &= ~SW_TXQS_CTS_RETRY_BIT_FORCE_ZERO_MASK;
	tmp |= (value << SW_TXQS_CTS_RETRY_BIT_FORCE_ZERO_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_txq_ctrl_sw_txqs_cts_retry_bit_force_zero_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ_CTRL_ADDR)) & SW_TXQS_CTS_RETRY_BIT_FORCE_ZERO_MASK) >> SW_TXQS_CTS_RETRY_BIT_FORCE_ZERO_OFFSET;
}
static __inline void mac_txq_ctrl_sw_txqs_rts_retry_bit_force_zero_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ_CTRL_ADDR);
	tmp &= ~SW_TXQS_RTS_RETRY_BIT_FORCE_ZERO_MASK;
	tmp |= (value << SW_TXQS_RTS_RETRY_BIT_FORCE_ZERO_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_txq_ctrl_sw_txqs_rts_retry_bit_force_zero_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ_CTRL_ADDR)) & SW_TXQS_RTS_RETRY_BIT_FORCE_ZERO_MASK) >> SW_TXQS_RTS_RETRY_BIT_FORCE_ZERO_OFFSET;
}
static __inline void mac_txq_ctrl_sw_force_ht_rts_rate_exptect_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ_CTRL_ADDR);
	tmp &= ~SW_FORCE_HT_RTS_RATE_EXPTECT_MASK;
	tmp |= (value << SW_FORCE_HT_RTS_RATE_EXPTECT_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_txq_ctrl_sw_force_ht_rts_rate_exptect_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ_CTRL_ADDR)) & SW_FORCE_HT_RTS_RATE_EXPTECT_MASK) >> SW_FORCE_HT_RTS_RATE_EXPTECT_OFFSET;
}
static __inline void mac_txq_ctrl_sw_txqs_cts_self_try_num_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ_CTRL_ADDR);
	tmp &= ~SW_TXQS_CTS_SELF_TRY_NUM_MASK;
	tmp |= (value << SW_TXQS_CTS_SELF_TRY_NUM_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_txq_ctrl_sw_txqs_cts_self_try_num_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ_CTRL_ADDR)) & SW_TXQS_CTS_SELF_TRY_NUM_MASK) >> SW_TXQS_CTS_SELF_TRY_NUM_OFFSET;
}
static __inline void mac_txq_ctrl_sw_txqs_rts_try_num_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ_CTRL_ADDR);
	tmp &= ~SW_TXQS_RTS_TRY_NUM_MASK;
	tmp |= (value << SW_TXQS_RTS_TRY_NUM_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_txq_ctrl_sw_txqs_rts_try_num_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ_CTRL_ADDR)) & SW_TXQS_RTS_TRY_NUM_MASK) >> SW_TXQS_RTS_TRY_NUM_OFFSET;
}
static __inline void mac_txq_ctrl_set(uint32_t value)
{
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ_CTRL_ADDR, value);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ_CTRL_ADDR), value);
}
static __inline uint32_t mac_txq_ctrl_get(void)
{
	return (WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ_CTRL_ADDR));
}
static __inline void mac_txq_ctrl_pack(uint32_t sw_txqs_srst, uint32_t sw_txqs_cts_retry_bit_force_zero, uint32_t sw_txqs_rts_retry_bit_force_zero, uint32_t sw_force_ht_rts_rate_exptect, uint32_t sw_txqs_cts_self_try_num, uint32_t sw_txqs_rts_try_num)
{
	uint32_t tmp;

	assert((((uint32_t)sw_txqs_srst << SW_TXQS_SRST_OFFSET) & ~((uint32_t)SW_TXQS_SRST_MASK)) == 0);
	assert((((uint32_t)sw_txqs_cts_retry_bit_force_zero << SW_TXQS_CTS_RETRY_BIT_FORCE_ZERO_OFFSET) & ~((uint32_t)SW_TXQS_CTS_RETRY_BIT_FORCE_ZERO_MASK)) == 0);
	assert((((uint32_t)sw_txqs_rts_retry_bit_force_zero << SW_TXQS_RTS_RETRY_BIT_FORCE_ZERO_OFFSET) & ~((uint32_t)SW_TXQS_RTS_RETRY_BIT_FORCE_ZERO_MASK)) == 0);
	assert((((uint32_t)sw_force_ht_rts_rate_exptect << SW_FORCE_HT_RTS_RATE_EXPTECT_OFFSET) & ~((uint32_t)SW_FORCE_HT_RTS_RATE_EXPTECT_MASK)) == 0);
	assert((((uint32_t)sw_txqs_cts_self_try_num << SW_TXQS_CTS_SELF_TRY_NUM_OFFSET) & ~((uint32_t)SW_TXQS_CTS_SELF_TRY_NUM_MASK)) == 0);
	assert((((uint32_t)sw_txqs_rts_try_num << SW_TXQS_RTS_TRY_NUM_OFFSET) & ~((uint32_t)SW_TXQS_RTS_TRY_NUM_MASK)) == 0);
	tmp =
		((uint32_t)sw_txqs_srst << SW_TXQS_SRST_OFFSET) |
		((uint32_t)sw_txqs_cts_retry_bit_force_zero << SW_TXQS_CTS_RETRY_BIT_FORCE_ZERO_OFFSET) |
		((uint32_t)sw_txqs_rts_retry_bit_force_zero << SW_TXQS_RTS_RETRY_BIT_FORCE_ZERO_OFFSET) |
		((uint32_t)sw_force_ht_rts_rate_exptect << SW_FORCE_HT_RTS_RATE_EXPTECT_OFFSET) |
		((uint32_t)sw_txqs_cts_self_try_num << SW_TXQS_CTS_SELF_TRY_NUM_OFFSET) |
		((uint32_t)sw_txqs_rts_try_num << SW_TXQS_RTS_TRY_NUM_OFFSET) ;
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ_CTRL_ADDR), tmp);
}
static __inline void mac_txq_ctrl_unpack(volatile uint32_t* sw_txqs_cts_retry_bit_force_zero, volatile uint32_t* sw_txqs_rts_retry_bit_force_zero, volatile uint32_t* sw_force_ht_rts_rate_exptect, volatile uint32_t* sw_txqs_cts_self_try_num, volatile uint32_t* sw_txqs_rts_try_num)
{
	uint32_t tmp;

	tmp = mac_txq_ctrl_get();
	*sw_txqs_cts_retry_bit_force_zero = (tmp & ((uint32_t)SW_TXQS_CTS_RETRY_BIT_FORCE_ZERO_MASK)) >> SW_TXQS_CTS_RETRY_BIT_FORCE_ZERO_OFFSET;
	*sw_txqs_rts_retry_bit_force_zero = (tmp & ((uint32_t)SW_TXQS_RTS_RETRY_BIT_FORCE_ZERO_MASK)) >> SW_TXQS_RTS_RETRY_BIT_FORCE_ZERO_OFFSET;
	*sw_force_ht_rts_rate_exptect = (tmp & ((uint32_t)SW_FORCE_HT_RTS_RATE_EXPTECT_MASK)) >> SW_FORCE_HT_RTS_RATE_EXPTECT_OFFSET;
	*sw_txqs_cts_self_try_num = (tmp & ((uint32_t)SW_TXQS_CTS_SELF_TRY_NUM_MASK)) >> SW_TXQS_CTS_SELF_TRY_NUM_OFFSET;
	*sw_txqs_rts_try_num = (tmp & ((uint32_t)SW_TXQS_RTS_TRY_NUM_MASK)) >> SW_TXQS_RTS_TRY_NUM_OFFSET;
}
static __inline void mac_node_tx_disable_sw_txqs_node_tx_disable_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_NODE_TX_DISABLE_ADDR);
	tmp &= ~SW_TXQS_NODE_TX_DISABLE_MASK;
	tmp |= (value << SW_TXQS_NODE_TX_DISABLE_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_NODE_TX_DISABLE_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_NODE_TX_DISABLE_ADDR), tmp);
}
static __inline uint32_t mac_node_tx_disable_sw_txqs_node_tx_disable_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_NODE_TX_DISABLE_ADDR)) & SW_TXQS_NODE_TX_DISABLE_MASK) >> SW_TXQS_NODE_TX_DISABLE_OFFSET;
}
static __inline void mac_node_tx_disable_set(uint32_t value)
{
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_NODE_TX_DISABLE_ADDR, value);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_NODE_TX_DISABLE_ADDR), value);
}
static __inline uint32_t mac_node_tx_disable_get(void)
{
	return (WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_NODE_TX_DISABLE_ADDR));
}
static __inline void mac_node_tx_disable_pack(uint32_t sw_txqs_node_tx_disable)
{
	uint32_t tmp;

	assert((((uint32_t)sw_txqs_node_tx_disable << SW_TXQS_NODE_TX_DISABLE_OFFSET) & ~((uint32_t)SW_TXQS_NODE_TX_DISABLE_MASK)) == 0);
	tmp =
		((uint32_t)sw_txqs_node_tx_disable << SW_TXQS_NODE_TX_DISABLE_OFFSET) ;
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_NODE_TX_DISABLE_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_NODE_TX_DISABLE_ADDR), tmp);
}
static __inline void mac_node_tx_disable_unpack(volatile uint32_t* sw_txqs_node_tx_disable)
{
	uint32_t tmp;

	tmp = mac_node_tx_disable_get();
	*sw_txqs_node_tx_disable = (tmp & ((uint32_t)SW_TXQS_NODE_TX_DISABLE_MASK)) >> SW_TXQS_NODE_TX_DISABLE_OFFSET;
}
static __inline void mac_txq_cfend_ctrl_sw_txqs_cfg_cfend_rate_en_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ_CFEND_CTRL_ADDR);
	tmp &= ~SW_TXQS_CFG_CFEND_RATE_EN_MASK;
	tmp |= (value << SW_TXQS_CFG_CFEND_RATE_EN_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ_CFEND_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ_CFEND_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_txq_cfend_ctrl_sw_txqs_cfg_cfend_rate_en_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ_CFEND_CTRL_ADDR)) & SW_TXQS_CFG_CFEND_RATE_EN_MASK) >> SW_TXQS_CFG_CFEND_RATE_EN_OFFSET;
}
static __inline void mac_txq_cfend_ctrl_sw_txqs_cfg_cfend_rate_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ_CFEND_CTRL_ADDR);
	tmp &= ~SW_TXQS_CFG_CFEND_RATE_MASK;
	tmp |= (value << SW_TXQS_CFG_CFEND_RATE_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ_CFEND_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ_CFEND_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_txq_cfend_ctrl_sw_txqs_cfg_cfend_rate_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ_CFEND_CTRL_ADDR)) & SW_TXQS_CFG_CFEND_RATE_MASK) >> SW_TXQS_CFG_CFEND_RATE_OFFSET;
}
static __inline void mac_txq_cfend_ctrl_set(uint32_t value)
{
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ_CFEND_CTRL_ADDR, value);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ_CFEND_CTRL_ADDR), value);
}
static __inline uint32_t mac_txq_cfend_ctrl_get(void)
{
	return (WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ_CFEND_CTRL_ADDR));
}
static __inline void mac_txq_cfend_ctrl_pack(uint32_t sw_txqs_cfg_cfend_rate_en, uint32_t sw_txqs_cfg_cfend_rate)
{
	uint32_t tmp;

	assert((((uint32_t)sw_txqs_cfg_cfend_rate_en << SW_TXQS_CFG_CFEND_RATE_EN_OFFSET) & ~((uint32_t)SW_TXQS_CFG_CFEND_RATE_EN_MASK)) == 0);
	assert((((uint32_t)sw_txqs_cfg_cfend_rate << SW_TXQS_CFG_CFEND_RATE_OFFSET) & ~((uint32_t)SW_TXQS_CFG_CFEND_RATE_MASK)) == 0);
	tmp =
		((uint32_t)sw_txqs_cfg_cfend_rate_en << SW_TXQS_CFG_CFEND_RATE_EN_OFFSET) |
		((uint32_t)sw_txqs_cfg_cfend_rate << SW_TXQS_CFG_CFEND_RATE_OFFSET) ;
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ_CFEND_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ_CFEND_CTRL_ADDR), tmp);
}
static __inline void mac_txq_cfend_ctrl_unpack(volatile uint32_t* sw_txqs_cfg_cfend_rate_en, volatile uint32_t* sw_txqs_cfg_cfend_rate)
{
	uint32_t tmp;

	tmp = mac_txq_cfend_ctrl_get();
	*sw_txqs_cfg_cfend_rate_en = (tmp & ((uint32_t)SW_TXQS_CFG_CFEND_RATE_EN_MASK)) >> SW_TXQS_CFG_CFEND_RATE_EN_OFFSET;
	*sw_txqs_cfg_cfend_rate = (tmp & ((uint32_t)SW_TXQS_CFG_CFEND_RATE_MASK)) >> SW_TXQS_CFG_CFEND_RATE_OFFSET;
}
static __inline void mac_txq_resp_timeout_dly_sw_txqs_resp_rx_start_dly_dsss_long_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ_RESP_TIMEOUT_DLY_ADDR);
	tmp &= ~SW_TXQS_RESP_RX_START_DLY_DSSS_LONG_MASK;
	tmp |= (value << SW_TXQS_RESP_RX_START_DLY_DSSS_LONG_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ_RESP_TIMEOUT_DLY_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ_RESP_TIMEOUT_DLY_ADDR), tmp);
}
static __inline uint32_t mac_txq_resp_timeout_dly_sw_txqs_resp_rx_start_dly_dsss_long_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ_RESP_TIMEOUT_DLY_ADDR)) & SW_TXQS_RESP_RX_START_DLY_DSSS_LONG_MASK) >> SW_TXQS_RESP_RX_START_DLY_DSSS_LONG_OFFSET;
}
static __inline void mac_txq_resp_timeout_dly_sw_txqs_resp_rx_start_dly_dsss_short_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ_RESP_TIMEOUT_DLY_ADDR);
	tmp &= ~SW_TXQS_RESP_RX_START_DLY_DSSS_SHORT_MASK;
	tmp |= (value << SW_TXQS_RESP_RX_START_DLY_DSSS_SHORT_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ_RESP_TIMEOUT_DLY_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ_RESP_TIMEOUT_DLY_ADDR), tmp);
}
static __inline uint32_t mac_txq_resp_timeout_dly_sw_txqs_resp_rx_start_dly_dsss_short_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ_RESP_TIMEOUT_DLY_ADDR)) & SW_TXQS_RESP_RX_START_DLY_DSSS_SHORT_MASK) >> SW_TXQS_RESP_RX_START_DLY_DSSS_SHORT_OFFSET;
}
static __inline void mac_txq_resp_timeout_dly_sw_txqs_resp_rx_start_dly_ofdm_nonht_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ_RESP_TIMEOUT_DLY_ADDR);
	tmp &= ~SW_TXQS_RESP_RX_START_DLY_OFDM_NONHT_MASK;
	tmp |= (value << SW_TXQS_RESP_RX_START_DLY_OFDM_NONHT_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ_RESP_TIMEOUT_DLY_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ_RESP_TIMEOUT_DLY_ADDR), tmp);
}
static __inline uint32_t mac_txq_resp_timeout_dly_sw_txqs_resp_rx_start_dly_ofdm_nonht_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ_RESP_TIMEOUT_DLY_ADDR)) & SW_TXQS_RESP_RX_START_DLY_OFDM_NONHT_MASK) >> SW_TXQS_RESP_RX_START_DLY_OFDM_NONHT_OFFSET;
}
static __inline void mac_txq_resp_timeout_dly_sw_txqs_resp_rx_start_dly_ofdm_ht_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ_RESP_TIMEOUT_DLY_ADDR);
	tmp &= ~SW_TXQS_RESP_RX_START_DLY_OFDM_HT_MASK;
	tmp |= (value << SW_TXQS_RESP_RX_START_DLY_OFDM_HT_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ_RESP_TIMEOUT_DLY_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ_RESP_TIMEOUT_DLY_ADDR), tmp);
}
static __inline uint32_t mac_txq_resp_timeout_dly_sw_txqs_resp_rx_start_dly_ofdm_ht_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ_RESP_TIMEOUT_DLY_ADDR)) & SW_TXQS_RESP_RX_START_DLY_OFDM_HT_MASK) >> SW_TXQS_RESP_RX_START_DLY_OFDM_HT_OFFSET;
}
static __inline void mac_txq_resp_timeout_dly_set(uint32_t value)
{
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ_RESP_TIMEOUT_DLY_ADDR, value);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ_RESP_TIMEOUT_DLY_ADDR), value);
}
static __inline uint32_t mac_txq_resp_timeout_dly_get(void)
{
	return (WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ_RESP_TIMEOUT_DLY_ADDR));
}
static __inline void mac_txq_resp_timeout_dly_pack(uint32_t sw_txqs_resp_rx_start_dly_dsss_long, uint32_t sw_txqs_resp_rx_start_dly_dsss_short, uint32_t sw_txqs_resp_rx_start_dly_ofdm_nonht, uint32_t sw_txqs_resp_rx_start_dly_ofdm_ht)
{
	uint32_t tmp;

	assert((((uint32_t)sw_txqs_resp_rx_start_dly_dsss_long << SW_TXQS_RESP_RX_START_DLY_DSSS_LONG_OFFSET) & ~((uint32_t)SW_TXQS_RESP_RX_START_DLY_DSSS_LONG_MASK)) == 0);
	assert((((uint32_t)sw_txqs_resp_rx_start_dly_dsss_short << SW_TXQS_RESP_RX_START_DLY_DSSS_SHORT_OFFSET) & ~((uint32_t)SW_TXQS_RESP_RX_START_DLY_DSSS_SHORT_MASK)) == 0);
	assert((((uint32_t)sw_txqs_resp_rx_start_dly_ofdm_nonht << SW_TXQS_RESP_RX_START_DLY_OFDM_NONHT_OFFSET) & ~((uint32_t)SW_TXQS_RESP_RX_START_DLY_OFDM_NONHT_MASK)) == 0);
	assert((((uint32_t)sw_txqs_resp_rx_start_dly_ofdm_ht << SW_TXQS_RESP_RX_START_DLY_OFDM_HT_OFFSET) & ~((uint32_t)SW_TXQS_RESP_RX_START_DLY_OFDM_HT_MASK)) == 0);
	tmp =
		((uint32_t)sw_txqs_resp_rx_start_dly_dsss_long << SW_TXQS_RESP_RX_START_DLY_DSSS_LONG_OFFSET) |
		((uint32_t)sw_txqs_resp_rx_start_dly_dsss_short << SW_TXQS_RESP_RX_START_DLY_DSSS_SHORT_OFFSET) |
		((uint32_t)sw_txqs_resp_rx_start_dly_ofdm_nonht << SW_TXQS_RESP_RX_START_DLY_OFDM_NONHT_OFFSET) |
		((uint32_t)sw_txqs_resp_rx_start_dly_ofdm_ht << SW_TXQS_RESP_RX_START_DLY_OFDM_HT_OFFSET) ;
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ_RESP_TIMEOUT_DLY_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ_RESP_TIMEOUT_DLY_ADDR), tmp);
}
static __inline void mac_txq_resp_timeout_dly_unpack(volatile uint32_t* sw_txqs_resp_rx_start_dly_dsss_long, volatile uint32_t* sw_txqs_resp_rx_start_dly_dsss_short, volatile uint32_t* sw_txqs_resp_rx_start_dly_ofdm_nonht, volatile uint32_t* sw_txqs_resp_rx_start_dly_ofdm_ht)
{
	uint32_t tmp;

	tmp = mac_txq_resp_timeout_dly_get();
	*sw_txqs_resp_rx_start_dly_dsss_long = (tmp & ((uint32_t)SW_TXQS_RESP_RX_START_DLY_DSSS_LONG_MASK)) >> SW_TXQS_RESP_RX_START_DLY_DSSS_LONG_OFFSET;
	*sw_txqs_resp_rx_start_dly_dsss_short = (tmp & ((uint32_t)SW_TXQS_RESP_RX_START_DLY_DSSS_SHORT_MASK)) >> SW_TXQS_RESP_RX_START_DLY_DSSS_SHORT_OFFSET;
	*sw_txqs_resp_rx_start_dly_ofdm_nonht = (tmp & ((uint32_t)SW_TXQS_RESP_RX_START_DLY_OFDM_NONHT_MASK)) >> SW_TXQS_RESP_RX_START_DLY_OFDM_NONHT_OFFSET;
	*sw_txqs_resp_rx_start_dly_ofdm_ht = (tmp & ((uint32_t)SW_TXQS_RESP_RX_START_DLY_OFDM_HT_MASK)) >> SW_TXQS_RESP_RX_START_DLY_OFDM_HT_OFFSET;
}
static __inline void mac_txqs_process_timeout_sw_txqs_process_timeout_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQS_PROCESS_TIMEOUT_ADDR);
	tmp &= ~SW_TXQS_PROCESS_TIMEOUT_MASK;
	tmp |= (value << SW_TXQS_PROCESS_TIMEOUT_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQS_PROCESS_TIMEOUT_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQS_PROCESS_TIMEOUT_ADDR), tmp);
}
static __inline uint32_t mac_txqs_process_timeout_sw_txqs_process_timeout_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQS_PROCESS_TIMEOUT_ADDR)) & SW_TXQS_PROCESS_TIMEOUT_MASK) >> SW_TXQS_PROCESS_TIMEOUT_OFFSET;
}
static __inline void mac_txqs_process_timeout_set(uint32_t value)
{
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQS_PROCESS_TIMEOUT_ADDR, value);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQS_PROCESS_TIMEOUT_ADDR), value);
}
static __inline uint32_t mac_txqs_process_timeout_get(void)
{
	return (WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQS_PROCESS_TIMEOUT_ADDR));
}
static __inline void mac_txqs_process_timeout_pack(uint32_t sw_txqs_process_timeout)
{
	uint32_t tmp;

	assert((((uint32_t)sw_txqs_process_timeout << SW_TXQS_PROCESS_TIMEOUT_OFFSET) & ~((uint32_t)SW_TXQS_PROCESS_TIMEOUT_MASK)) == 0);
	tmp =
		((uint32_t)sw_txqs_process_timeout << SW_TXQS_PROCESS_TIMEOUT_OFFSET) ;
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQS_PROCESS_TIMEOUT_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQS_PROCESS_TIMEOUT_ADDR), tmp);
}
static __inline void mac_txqs_process_timeout_unpack(volatile uint32_t* sw_txqs_process_timeout)
{
	uint32_t tmp;

	tmp = mac_txqs_process_timeout_get();
	*sw_txqs_process_timeout = (tmp & ((uint32_t)SW_TXQS_PROCESS_TIMEOUT_MASK)) >> SW_TXQS_PROCESS_TIMEOUT_OFFSET;
}
static __inline void mac_txq_second_pcs_ctrl_sw_txq_ht40_check_period_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ_SECOND_PCS_CTRL_ADDR);
	tmp &= ~SW_TXQ_HT40_CHECK_PERIOD_MASK;
	tmp |= (value << SW_TXQ_HT40_CHECK_PERIOD_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ_SECOND_PCS_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ_SECOND_PCS_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_txq_second_pcs_ctrl_sw_txq_ht40_check_period_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ_SECOND_PCS_CTRL_ADDR)) & SW_TXQ_HT40_CHECK_PERIOD_MASK) >> SW_TXQ_HT40_CHECK_PERIOD_OFFSET;
}
static __inline void mac_txq_second_pcs_ctrl_sw_txq6_ht40_auto_bw_sel_en_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ_SECOND_PCS_CTRL_ADDR);
	tmp &= ~SW_TXQ6_HT40_AUTO_BW_SEL_EN_MASK;
	tmp |= (value << SW_TXQ6_HT40_AUTO_BW_SEL_EN_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ_SECOND_PCS_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ_SECOND_PCS_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_txq_second_pcs_ctrl_sw_txq6_ht40_auto_bw_sel_en_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ_SECOND_PCS_CTRL_ADDR)) & SW_TXQ6_HT40_AUTO_BW_SEL_EN_MASK) >> SW_TXQ6_HT40_AUTO_BW_SEL_EN_OFFSET;
}
static __inline void mac_txq_second_pcs_ctrl_sw_txq3_ht40_auto_bw_sel_en_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ_SECOND_PCS_CTRL_ADDR);
	tmp &= ~SW_TXQ3_HT40_AUTO_BW_SEL_EN_MASK;
	tmp |= (value << SW_TXQ3_HT40_AUTO_BW_SEL_EN_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ_SECOND_PCS_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ_SECOND_PCS_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_txq_second_pcs_ctrl_sw_txq3_ht40_auto_bw_sel_en_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ_SECOND_PCS_CTRL_ADDR)) & SW_TXQ3_HT40_AUTO_BW_SEL_EN_MASK) >> SW_TXQ3_HT40_AUTO_BW_SEL_EN_OFFSET;
}
static __inline void mac_txq_second_pcs_ctrl_sw_txq2_ht40_auto_bw_sel_en_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ_SECOND_PCS_CTRL_ADDR);
	tmp &= ~SW_TXQ2_HT40_AUTO_BW_SEL_EN_MASK;
	tmp |= (value << SW_TXQ2_HT40_AUTO_BW_SEL_EN_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ_SECOND_PCS_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ_SECOND_PCS_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_txq_second_pcs_ctrl_sw_txq2_ht40_auto_bw_sel_en_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ_SECOND_PCS_CTRL_ADDR)) & SW_TXQ2_HT40_AUTO_BW_SEL_EN_MASK) >> SW_TXQ2_HT40_AUTO_BW_SEL_EN_OFFSET;
}
static __inline void mac_txq_second_pcs_ctrl_sw_txq1_ht40_auto_bw_sel_en_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ_SECOND_PCS_CTRL_ADDR);
	tmp &= ~SW_TXQ1_HT40_AUTO_BW_SEL_EN_MASK;
	tmp |= (value << SW_TXQ1_HT40_AUTO_BW_SEL_EN_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ_SECOND_PCS_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ_SECOND_PCS_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_txq_second_pcs_ctrl_sw_txq1_ht40_auto_bw_sel_en_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ_SECOND_PCS_CTRL_ADDR)) & SW_TXQ1_HT40_AUTO_BW_SEL_EN_MASK) >> SW_TXQ1_HT40_AUTO_BW_SEL_EN_OFFSET;
}
static __inline void mac_txq_second_pcs_ctrl_sw_txq0_ht40_auto_bw_sel_en_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ_SECOND_PCS_CTRL_ADDR);
	tmp &= ~SW_TXQ0_HT40_AUTO_BW_SEL_EN_MASK;
	tmp |= (value << SW_TXQ0_HT40_AUTO_BW_SEL_EN_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ_SECOND_PCS_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ_SECOND_PCS_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_txq_second_pcs_ctrl_sw_txq0_ht40_auto_bw_sel_en_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ_SECOND_PCS_CTRL_ADDR)) & SW_TXQ0_HT40_AUTO_BW_SEL_EN_MASK) >> SW_TXQ0_HT40_AUTO_BW_SEL_EN_OFFSET;
}
static __inline void mac_txq_second_pcs_ctrl_set(uint32_t value)
{
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ_SECOND_PCS_CTRL_ADDR, value);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ_SECOND_PCS_CTRL_ADDR), value);
}
static __inline uint32_t mac_txq_second_pcs_ctrl_get(void)
{
	return (WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ_SECOND_PCS_CTRL_ADDR));
}
static __inline void mac_txq_second_pcs_ctrl_pack(uint32_t sw_txq_ht40_check_period, uint32_t sw_txq6_ht40_auto_bw_sel_en, uint32_t sw_txq3_ht40_auto_bw_sel_en, uint32_t sw_txq2_ht40_auto_bw_sel_en, uint32_t sw_txq1_ht40_auto_bw_sel_en, uint32_t sw_txq0_ht40_auto_bw_sel_en)
{
	uint32_t tmp;

	assert((((uint32_t)sw_txq_ht40_check_period << SW_TXQ_HT40_CHECK_PERIOD_OFFSET) & ~((uint32_t)SW_TXQ_HT40_CHECK_PERIOD_MASK)) == 0);
	assert((((uint32_t)sw_txq6_ht40_auto_bw_sel_en << SW_TXQ6_HT40_AUTO_BW_SEL_EN_OFFSET) & ~((uint32_t)SW_TXQ6_HT40_AUTO_BW_SEL_EN_MASK)) == 0);
	assert((((uint32_t)sw_txq3_ht40_auto_bw_sel_en << SW_TXQ3_HT40_AUTO_BW_SEL_EN_OFFSET) & ~((uint32_t)SW_TXQ3_HT40_AUTO_BW_SEL_EN_MASK)) == 0);
	assert((((uint32_t)sw_txq2_ht40_auto_bw_sel_en << SW_TXQ2_HT40_AUTO_BW_SEL_EN_OFFSET) & ~((uint32_t)SW_TXQ2_HT40_AUTO_BW_SEL_EN_MASK)) == 0);
	assert((((uint32_t)sw_txq1_ht40_auto_bw_sel_en << SW_TXQ1_HT40_AUTO_BW_SEL_EN_OFFSET) & ~((uint32_t)SW_TXQ1_HT40_AUTO_BW_SEL_EN_MASK)) == 0);
	assert((((uint32_t)sw_txq0_ht40_auto_bw_sel_en << SW_TXQ0_HT40_AUTO_BW_SEL_EN_OFFSET) & ~((uint32_t)SW_TXQ0_HT40_AUTO_BW_SEL_EN_MASK)) == 0);
	tmp =
		((uint32_t)sw_txq_ht40_check_period << SW_TXQ_HT40_CHECK_PERIOD_OFFSET) |
		((uint32_t)sw_txq6_ht40_auto_bw_sel_en << SW_TXQ6_HT40_AUTO_BW_SEL_EN_OFFSET) |
		((uint32_t)sw_txq3_ht40_auto_bw_sel_en << SW_TXQ3_HT40_AUTO_BW_SEL_EN_OFFSET) |
		((uint32_t)sw_txq2_ht40_auto_bw_sel_en << SW_TXQ2_HT40_AUTO_BW_SEL_EN_OFFSET) |
		((uint32_t)sw_txq1_ht40_auto_bw_sel_en << SW_TXQ1_HT40_AUTO_BW_SEL_EN_OFFSET) |
		((uint32_t)sw_txq0_ht40_auto_bw_sel_en << SW_TXQ0_HT40_AUTO_BW_SEL_EN_OFFSET) ;
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ_SECOND_PCS_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ_SECOND_PCS_CTRL_ADDR), tmp);
}
static __inline void mac_txq_second_pcs_ctrl_unpack(volatile uint32_t* sw_txq_ht40_check_period, volatile uint32_t* sw_txq6_ht40_auto_bw_sel_en, volatile uint32_t* sw_txq3_ht40_auto_bw_sel_en, volatile uint32_t* sw_txq2_ht40_auto_bw_sel_en, volatile uint32_t* sw_txq1_ht40_auto_bw_sel_en, volatile uint32_t* sw_txq0_ht40_auto_bw_sel_en)
{
	uint32_t tmp;

	tmp = mac_txq_second_pcs_ctrl_get();
	*sw_txq_ht40_check_period = (tmp & ((uint32_t)SW_TXQ_HT40_CHECK_PERIOD_MASK)) >> SW_TXQ_HT40_CHECK_PERIOD_OFFSET;
	*sw_txq6_ht40_auto_bw_sel_en = (tmp & ((uint32_t)SW_TXQ6_HT40_AUTO_BW_SEL_EN_MASK)) >> SW_TXQ6_HT40_AUTO_BW_SEL_EN_OFFSET;
	*sw_txq3_ht40_auto_bw_sel_en = (tmp & ((uint32_t)SW_TXQ3_HT40_AUTO_BW_SEL_EN_MASK)) >> SW_TXQ3_HT40_AUTO_BW_SEL_EN_OFFSET;
	*sw_txq2_ht40_auto_bw_sel_en = (tmp & ((uint32_t)SW_TXQ2_HT40_AUTO_BW_SEL_EN_MASK)) >> SW_TXQ2_HT40_AUTO_BW_SEL_EN_OFFSET;
	*sw_txq1_ht40_auto_bw_sel_en = (tmp & ((uint32_t)SW_TXQ1_HT40_AUTO_BW_SEL_EN_MASK)) >> SW_TXQ1_HT40_AUTO_BW_SEL_EN_OFFSET;
	*sw_txq0_ht40_auto_bw_sel_en = (tmp & ((uint32_t)SW_TXQ0_HT40_AUTO_BW_SEL_EN_MASK)) >> SW_TXQ0_HT40_AUTO_BW_SEL_EN_OFFSET;
}
static __inline void mac_txq_sigtap_ctrl_sw_txqs_trig_pls_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ_SIGTAP_CTRL_ADDR);
	tmp &= ~SW_TXQS_TRIG_PLS_MASK;
	tmp |= (value << SW_TXQS_TRIG_PLS_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ_SIGTAP_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ_SIGTAP_CTRL_ADDR), tmp);
}
static __inline void mac_txq_sigtap_ctrl_sw_txqs_sigtap_mux_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ_SIGTAP_CTRL_ADDR);
	tmp &= ~SW_TXQS_SIGTAP_MUX_MASK;
	tmp |= (value << SW_TXQS_SIGTAP_MUX_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ_SIGTAP_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ_SIGTAP_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_txq_sigtap_ctrl_sw_txqs_sigtap_mux_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ_SIGTAP_CTRL_ADDR)) & SW_TXQS_SIGTAP_MUX_MASK) >> SW_TXQS_SIGTAP_MUX_OFFSET;
}
static __inline void mac_txq_sigtap_ctrl_set(uint32_t value)
{
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ_SIGTAP_CTRL_ADDR, value);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ_SIGTAP_CTRL_ADDR), value);
}
static __inline uint32_t mac_txq_sigtap_ctrl_get(void)
{
	return (WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ_SIGTAP_CTRL_ADDR));
}
static __inline void mac_txq_sigtap_ctrl_pack(uint32_t sw_txqs_trig_pls, uint32_t sw_txqs_sigtap_mux)
{
	uint32_t tmp;

	assert((((uint32_t)sw_txqs_trig_pls << SW_TXQS_TRIG_PLS_OFFSET) & ~((uint32_t)SW_TXQS_TRIG_PLS_MASK)) == 0);
	assert((((uint32_t)sw_txqs_sigtap_mux << SW_TXQS_SIGTAP_MUX_OFFSET) & ~((uint32_t)SW_TXQS_SIGTAP_MUX_MASK)) == 0);
	tmp =
		((uint32_t)sw_txqs_trig_pls << SW_TXQS_TRIG_PLS_OFFSET) |
		((uint32_t)sw_txqs_sigtap_mux << SW_TXQS_SIGTAP_MUX_OFFSET) ;
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ_SIGTAP_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ_SIGTAP_CTRL_ADDR), tmp);
}
static __inline void mac_txq_sigtap_ctrl_unpack(volatile uint32_t* sw_txqs_sigtap_mux)
{
	uint32_t tmp;

	tmp = mac_txq_sigtap_ctrl_get();
	*sw_txqs_sigtap_mux = (tmp & ((uint32_t)SW_TXQS_SIGTAP_MUX_MASK)) >> SW_TXQS_SIGTAP_MUX_OFFSET;
}
static __inline void mac_txqs_dbg_disable_timeout_sw_txqs_dbg_disable_timeout_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQS_DBG_DISABLE_TIMEOUT_ADDR);
	tmp &= ~SW_TXQS_DBG_DISABLE_TIMEOUT_MASK;
	tmp |= (value << SW_TXQS_DBG_DISABLE_TIMEOUT_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQS_DBG_DISABLE_TIMEOUT_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQS_DBG_DISABLE_TIMEOUT_ADDR), tmp);
}
static __inline uint32_t mac_txqs_dbg_disable_timeout_sw_txqs_dbg_disable_timeout_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQS_DBG_DISABLE_TIMEOUT_ADDR)) & SW_TXQS_DBG_DISABLE_TIMEOUT_MASK) >> SW_TXQS_DBG_DISABLE_TIMEOUT_OFFSET;
}
static __inline void mac_txqs_dbg_disable_timeout_set(uint32_t value)
{
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQS_DBG_DISABLE_TIMEOUT_ADDR, value);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQS_DBG_DISABLE_TIMEOUT_ADDR), value);
}
static __inline uint32_t mac_txqs_dbg_disable_timeout_get(void)
{
	return (WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQS_DBG_DISABLE_TIMEOUT_ADDR));
}
static __inline void mac_txqs_dbg_disable_timeout_pack(uint32_t sw_txqs_dbg_disable_timeout)
{
	uint32_t tmp;

	assert((((uint32_t)sw_txqs_dbg_disable_timeout << SW_TXQS_DBG_DISABLE_TIMEOUT_OFFSET) & ~((uint32_t)SW_TXQS_DBG_DISABLE_TIMEOUT_MASK)) == 0);
	tmp =
		((uint32_t)sw_txqs_dbg_disable_timeout << SW_TXQS_DBG_DISABLE_TIMEOUT_OFFSET) ;
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQS_DBG_DISABLE_TIMEOUT_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQS_DBG_DISABLE_TIMEOUT_ADDR), tmp);
}
static __inline void mac_txqs_dbg_disable_timeout_unpack(volatile uint32_t* sw_txqs_dbg_disable_timeout)
{
	uint32_t tmp;

	tmp = mac_txqs_dbg_disable_timeout_get();
	*sw_txqs_dbg_disable_timeout = (tmp & ((uint32_t)SW_TXQS_DBG_DISABLE_TIMEOUT_MASK)) >> SW_TXQS_DBG_DISABLE_TIMEOUT_OFFSET;
}
static __inline void mac_txqs_dbg_pcs_busy_monitor_sw_txqs_pcs_busy_monitor_clr_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQS_DBG_PCS_BUSY_MONITOR_ADDR);
	tmp &= ~SW_TXQS_PCS_BUSY_MONITOR_CLR_MASK;
	tmp |= (value << SW_TXQS_PCS_BUSY_MONITOR_CLR_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQS_DBG_PCS_BUSY_MONITOR_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQS_DBG_PCS_BUSY_MONITOR_ADDR), tmp);
}
static __inline void mac_txqs_dbg_pcs_busy_monitor_sw_txqs_pcs_busy_monitor_mode_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQS_DBG_PCS_BUSY_MONITOR_ADDR);
	tmp &= ~SW_TXQS_PCS_BUSY_MONITOR_MODE_MASK;
	tmp |= (value << SW_TXQS_PCS_BUSY_MONITOR_MODE_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQS_DBG_PCS_BUSY_MONITOR_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQS_DBG_PCS_BUSY_MONITOR_ADDR), tmp);
}
static __inline uint32_t mac_txqs_dbg_pcs_busy_monitor_sw_txqs_pcs_busy_monitor_mode_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQS_DBG_PCS_BUSY_MONITOR_ADDR)) & SW_TXQS_PCS_BUSY_MONITOR_MODE_MASK) >> SW_TXQS_PCS_BUSY_MONITOR_MODE_OFFSET;
}
static __inline void mac_txqs_dbg_pcs_busy_monitor_sw_txqs_pcs_busy_monitor_thed_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQS_DBG_PCS_BUSY_MONITOR_ADDR);
	tmp &= ~SW_TXQS_PCS_BUSY_MONITOR_THED_MASK;
	tmp |= (value << SW_TXQS_PCS_BUSY_MONITOR_THED_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQS_DBG_PCS_BUSY_MONITOR_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQS_DBG_PCS_BUSY_MONITOR_ADDR), tmp);
}
static __inline uint32_t mac_txqs_dbg_pcs_busy_monitor_sw_txqs_pcs_busy_monitor_thed_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQS_DBG_PCS_BUSY_MONITOR_ADDR)) & SW_TXQS_PCS_BUSY_MONITOR_THED_MASK) >> SW_TXQS_PCS_BUSY_MONITOR_THED_OFFSET;
}
static __inline void mac_txqs_dbg_pcs_busy_monitor_set(uint32_t value)
{
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQS_DBG_PCS_BUSY_MONITOR_ADDR, value);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQS_DBG_PCS_BUSY_MONITOR_ADDR), value);
}
static __inline uint32_t mac_txqs_dbg_pcs_busy_monitor_get(void)
{
	return (WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQS_DBG_PCS_BUSY_MONITOR_ADDR));
}
static __inline void mac_txqs_dbg_pcs_busy_monitor_pack(uint32_t sw_txqs_pcs_busy_monitor_clr, uint32_t sw_txqs_pcs_busy_monitor_mode, uint32_t sw_txqs_pcs_busy_monitor_thed)
{
	uint32_t tmp;

	assert((((uint32_t)sw_txqs_pcs_busy_monitor_clr << SW_TXQS_PCS_BUSY_MONITOR_CLR_OFFSET) & ~((uint32_t)SW_TXQS_PCS_BUSY_MONITOR_CLR_MASK)) == 0);
	assert((((uint32_t)sw_txqs_pcs_busy_monitor_mode << SW_TXQS_PCS_BUSY_MONITOR_MODE_OFFSET) & ~((uint32_t)SW_TXQS_PCS_BUSY_MONITOR_MODE_MASK)) == 0);
	assert((((uint32_t)sw_txqs_pcs_busy_monitor_thed << SW_TXQS_PCS_BUSY_MONITOR_THED_OFFSET) & ~((uint32_t)SW_TXQS_PCS_BUSY_MONITOR_THED_MASK)) == 0);
	tmp =
		((uint32_t)sw_txqs_pcs_busy_monitor_clr << SW_TXQS_PCS_BUSY_MONITOR_CLR_OFFSET) |
		((uint32_t)sw_txqs_pcs_busy_monitor_mode << SW_TXQS_PCS_BUSY_MONITOR_MODE_OFFSET) |
		((uint32_t)sw_txqs_pcs_busy_monitor_thed << SW_TXQS_PCS_BUSY_MONITOR_THED_OFFSET) ;
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQS_DBG_PCS_BUSY_MONITOR_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQS_DBG_PCS_BUSY_MONITOR_ADDR), tmp);
}
static __inline void mac_txqs_dbg_pcs_busy_monitor_unpack(volatile uint32_t* sw_txqs_pcs_busy_monitor_mode, volatile uint32_t* sw_txqs_pcs_busy_monitor_thed)
{
	uint32_t tmp;

	tmp = mac_txqs_dbg_pcs_busy_monitor_get();
	*sw_txqs_pcs_busy_monitor_mode = (tmp & ((uint32_t)SW_TXQS_PCS_BUSY_MONITOR_MODE_MASK)) >> SW_TXQS_PCS_BUSY_MONITOR_MODE_OFFSET;
	*sw_txqs_pcs_busy_monitor_thed = (tmp & ((uint32_t)SW_TXQS_PCS_BUSY_MONITOR_THED_MASK)) >> SW_TXQS_PCS_BUSY_MONITOR_THED_OFFSET;
}
static __inline void mac_txqs_int_desc_done_ctrl_sw_txq6_int_desc_done_type_1_en_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQS_INT_DESC_DONE_CTRL_ADDR);
	tmp &= ~SW_TXQ6_INT_DESC_DONE_TYPE_1_EN_MASK;
	tmp |= (value << SW_TXQ6_INT_DESC_DONE_TYPE_1_EN_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQS_INT_DESC_DONE_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQS_INT_DESC_DONE_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_txqs_int_desc_done_ctrl_sw_txq6_int_desc_done_type_1_en_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQS_INT_DESC_DONE_CTRL_ADDR)) & SW_TXQ6_INT_DESC_DONE_TYPE_1_EN_MASK) >> SW_TXQ6_INT_DESC_DONE_TYPE_1_EN_OFFSET;
}
static __inline void mac_txqs_int_desc_done_ctrl_sw_txq6_int_desc_done_type_0_en_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQS_INT_DESC_DONE_CTRL_ADDR);
	tmp &= ~SW_TXQ6_INT_DESC_DONE_TYPE_0_EN_MASK;
	tmp |= (value << SW_TXQ6_INT_DESC_DONE_TYPE_0_EN_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQS_INT_DESC_DONE_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQS_INT_DESC_DONE_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_txqs_int_desc_done_ctrl_sw_txq6_int_desc_done_type_0_en_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQS_INT_DESC_DONE_CTRL_ADDR)) & SW_TXQ6_INT_DESC_DONE_TYPE_0_EN_MASK) >> SW_TXQ6_INT_DESC_DONE_TYPE_0_EN_OFFSET;
}
static __inline void mac_txqs_int_desc_done_ctrl_sw_txq3_int_desc_done_type_1_en_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQS_INT_DESC_DONE_CTRL_ADDR);
	tmp &= ~SW_TXQ3_INT_DESC_DONE_TYPE_1_EN_MASK;
	tmp |= (value << SW_TXQ3_INT_DESC_DONE_TYPE_1_EN_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQS_INT_DESC_DONE_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQS_INT_DESC_DONE_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_txqs_int_desc_done_ctrl_sw_txq3_int_desc_done_type_1_en_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQS_INT_DESC_DONE_CTRL_ADDR)) & SW_TXQ3_INT_DESC_DONE_TYPE_1_EN_MASK) >> SW_TXQ3_INT_DESC_DONE_TYPE_1_EN_OFFSET;
}
static __inline void mac_txqs_int_desc_done_ctrl_sw_txq3_int_desc_done_type_0_en_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQS_INT_DESC_DONE_CTRL_ADDR);
	tmp &= ~SW_TXQ3_INT_DESC_DONE_TYPE_0_EN_MASK;
	tmp |= (value << SW_TXQ3_INT_DESC_DONE_TYPE_0_EN_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQS_INT_DESC_DONE_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQS_INT_DESC_DONE_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_txqs_int_desc_done_ctrl_sw_txq3_int_desc_done_type_0_en_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQS_INT_DESC_DONE_CTRL_ADDR)) & SW_TXQ3_INT_DESC_DONE_TYPE_0_EN_MASK) >> SW_TXQ3_INT_DESC_DONE_TYPE_0_EN_OFFSET;
}
static __inline void mac_txqs_int_desc_done_ctrl_sw_txq2_int_desc_done_type_1_en_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQS_INT_DESC_DONE_CTRL_ADDR);
	tmp &= ~SW_TXQ2_INT_DESC_DONE_TYPE_1_EN_MASK;
	tmp |= (value << SW_TXQ2_INT_DESC_DONE_TYPE_1_EN_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQS_INT_DESC_DONE_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQS_INT_DESC_DONE_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_txqs_int_desc_done_ctrl_sw_txq2_int_desc_done_type_1_en_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQS_INT_DESC_DONE_CTRL_ADDR)) & SW_TXQ2_INT_DESC_DONE_TYPE_1_EN_MASK) >> SW_TXQ2_INT_DESC_DONE_TYPE_1_EN_OFFSET;
}
static __inline void mac_txqs_int_desc_done_ctrl_sw_txq2_int_desc_done_type_0_en_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQS_INT_DESC_DONE_CTRL_ADDR);
	tmp &= ~SW_TXQ2_INT_DESC_DONE_TYPE_0_EN_MASK;
	tmp |= (value << SW_TXQ2_INT_DESC_DONE_TYPE_0_EN_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQS_INT_DESC_DONE_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQS_INT_DESC_DONE_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_txqs_int_desc_done_ctrl_sw_txq2_int_desc_done_type_0_en_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQS_INT_DESC_DONE_CTRL_ADDR)) & SW_TXQ2_INT_DESC_DONE_TYPE_0_EN_MASK) >> SW_TXQ2_INT_DESC_DONE_TYPE_0_EN_OFFSET;
}
static __inline void mac_txqs_int_desc_done_ctrl_sw_txq1_int_desc_done_type_1_en_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQS_INT_DESC_DONE_CTRL_ADDR);
	tmp &= ~SW_TXQ1_INT_DESC_DONE_TYPE_1_EN_MASK;
	tmp |= (value << SW_TXQ1_INT_DESC_DONE_TYPE_1_EN_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQS_INT_DESC_DONE_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQS_INT_DESC_DONE_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_txqs_int_desc_done_ctrl_sw_txq1_int_desc_done_type_1_en_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQS_INT_DESC_DONE_CTRL_ADDR)) & SW_TXQ1_INT_DESC_DONE_TYPE_1_EN_MASK) >> SW_TXQ1_INT_DESC_DONE_TYPE_1_EN_OFFSET;
}
static __inline void mac_txqs_int_desc_done_ctrl_sw_txq1_int_desc_done_type_0_en_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQS_INT_DESC_DONE_CTRL_ADDR);
	tmp &= ~SW_TXQ1_INT_DESC_DONE_TYPE_0_EN_MASK;
	tmp |= (value << SW_TXQ1_INT_DESC_DONE_TYPE_0_EN_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQS_INT_DESC_DONE_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQS_INT_DESC_DONE_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_txqs_int_desc_done_ctrl_sw_txq1_int_desc_done_type_0_en_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQS_INT_DESC_DONE_CTRL_ADDR)) & SW_TXQ1_INT_DESC_DONE_TYPE_0_EN_MASK) >> SW_TXQ1_INT_DESC_DONE_TYPE_0_EN_OFFSET;
}
static __inline void mac_txqs_int_desc_done_ctrl_sw_txq0_int_desc_done_type_1_en_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQS_INT_DESC_DONE_CTRL_ADDR);
	tmp &= ~SW_TXQ0_INT_DESC_DONE_TYPE_1_EN_MASK;
	tmp |= (value << SW_TXQ0_INT_DESC_DONE_TYPE_1_EN_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQS_INT_DESC_DONE_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQS_INT_DESC_DONE_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_txqs_int_desc_done_ctrl_sw_txq0_int_desc_done_type_1_en_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQS_INT_DESC_DONE_CTRL_ADDR)) & SW_TXQ0_INT_DESC_DONE_TYPE_1_EN_MASK) >> SW_TXQ0_INT_DESC_DONE_TYPE_1_EN_OFFSET;
}
static __inline void mac_txqs_int_desc_done_ctrl_sw_txq0_int_desc_done_type_0_en_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQS_INT_DESC_DONE_CTRL_ADDR);
	tmp &= ~SW_TXQ0_INT_DESC_DONE_TYPE_0_EN_MASK;
	tmp |= (value << SW_TXQ0_INT_DESC_DONE_TYPE_0_EN_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQS_INT_DESC_DONE_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQS_INT_DESC_DONE_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_txqs_int_desc_done_ctrl_sw_txq0_int_desc_done_type_0_en_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQS_INT_DESC_DONE_CTRL_ADDR)) & SW_TXQ0_INT_DESC_DONE_TYPE_0_EN_MASK) >> SW_TXQ0_INT_DESC_DONE_TYPE_0_EN_OFFSET;
}
static __inline void mac_txqs_int_desc_done_ctrl_set(uint32_t value)
{
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQS_INT_DESC_DONE_CTRL_ADDR, value);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQS_INT_DESC_DONE_CTRL_ADDR), value);
}
static __inline uint32_t mac_txqs_int_desc_done_ctrl_get(void)
{
	return (WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQS_INT_DESC_DONE_CTRL_ADDR));
}
static __inline void mac_txqs_int_desc_done_ctrl_pack(uint32_t sw_txq6_int_desc_done_type_1_en, uint32_t sw_txq6_int_desc_done_type_0_en, uint32_t sw_txq3_int_desc_done_type_1_en, uint32_t sw_txq3_int_desc_done_type_0_en, uint32_t sw_txq2_int_desc_done_type_1_en, uint32_t sw_txq2_int_desc_done_type_0_en, uint32_t sw_txq1_int_desc_done_type_1_en, uint32_t sw_txq1_int_desc_done_type_0_en, uint32_t sw_txq0_int_desc_done_type_1_en, uint32_t sw_txq0_int_desc_done_type_0_en)
{
	uint32_t tmp;

	assert((((uint32_t)sw_txq6_int_desc_done_type_1_en << SW_TXQ6_INT_DESC_DONE_TYPE_1_EN_OFFSET) & ~((uint32_t)SW_TXQ6_INT_DESC_DONE_TYPE_1_EN_MASK)) == 0);
	assert((((uint32_t)sw_txq6_int_desc_done_type_0_en << SW_TXQ6_INT_DESC_DONE_TYPE_0_EN_OFFSET) & ~((uint32_t)SW_TXQ6_INT_DESC_DONE_TYPE_0_EN_MASK)) == 0);
	assert((((uint32_t)sw_txq3_int_desc_done_type_1_en << SW_TXQ3_INT_DESC_DONE_TYPE_1_EN_OFFSET) & ~((uint32_t)SW_TXQ3_INT_DESC_DONE_TYPE_1_EN_MASK)) == 0);
	assert((((uint32_t)sw_txq3_int_desc_done_type_0_en << SW_TXQ3_INT_DESC_DONE_TYPE_0_EN_OFFSET) & ~((uint32_t)SW_TXQ3_INT_DESC_DONE_TYPE_0_EN_MASK)) == 0);
	assert((((uint32_t)sw_txq2_int_desc_done_type_1_en << SW_TXQ2_INT_DESC_DONE_TYPE_1_EN_OFFSET) & ~((uint32_t)SW_TXQ2_INT_DESC_DONE_TYPE_1_EN_MASK)) == 0);
	assert((((uint32_t)sw_txq2_int_desc_done_type_0_en << SW_TXQ2_INT_DESC_DONE_TYPE_0_EN_OFFSET) & ~((uint32_t)SW_TXQ2_INT_DESC_DONE_TYPE_0_EN_MASK)) == 0);
	assert((((uint32_t)sw_txq1_int_desc_done_type_1_en << SW_TXQ1_INT_DESC_DONE_TYPE_1_EN_OFFSET) & ~((uint32_t)SW_TXQ1_INT_DESC_DONE_TYPE_1_EN_MASK)) == 0);
	assert((((uint32_t)sw_txq1_int_desc_done_type_0_en << SW_TXQ1_INT_DESC_DONE_TYPE_0_EN_OFFSET) & ~((uint32_t)SW_TXQ1_INT_DESC_DONE_TYPE_0_EN_MASK)) == 0);
	assert((((uint32_t)sw_txq0_int_desc_done_type_1_en << SW_TXQ0_INT_DESC_DONE_TYPE_1_EN_OFFSET) & ~((uint32_t)SW_TXQ0_INT_DESC_DONE_TYPE_1_EN_MASK)) == 0);
	assert((((uint32_t)sw_txq0_int_desc_done_type_0_en << SW_TXQ0_INT_DESC_DONE_TYPE_0_EN_OFFSET) & ~((uint32_t)SW_TXQ0_INT_DESC_DONE_TYPE_0_EN_MASK)) == 0);
	tmp =
		((uint32_t)sw_txq6_int_desc_done_type_1_en << SW_TXQ6_INT_DESC_DONE_TYPE_1_EN_OFFSET) |
		((uint32_t)sw_txq6_int_desc_done_type_0_en << SW_TXQ6_INT_DESC_DONE_TYPE_0_EN_OFFSET) |
		((uint32_t)sw_txq3_int_desc_done_type_1_en << SW_TXQ3_INT_DESC_DONE_TYPE_1_EN_OFFSET) |
		((uint32_t)sw_txq3_int_desc_done_type_0_en << SW_TXQ3_INT_DESC_DONE_TYPE_0_EN_OFFSET) |
		((uint32_t)sw_txq2_int_desc_done_type_1_en << SW_TXQ2_INT_DESC_DONE_TYPE_1_EN_OFFSET) |
		((uint32_t)sw_txq2_int_desc_done_type_0_en << SW_TXQ2_INT_DESC_DONE_TYPE_0_EN_OFFSET) |
		((uint32_t)sw_txq1_int_desc_done_type_1_en << SW_TXQ1_INT_DESC_DONE_TYPE_1_EN_OFFSET) |
		((uint32_t)sw_txq1_int_desc_done_type_0_en << SW_TXQ1_INT_DESC_DONE_TYPE_0_EN_OFFSET) |
		((uint32_t)sw_txq0_int_desc_done_type_1_en << SW_TXQ0_INT_DESC_DONE_TYPE_1_EN_OFFSET) |
		((uint32_t)sw_txq0_int_desc_done_type_0_en << SW_TXQ0_INT_DESC_DONE_TYPE_0_EN_OFFSET) ;
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQS_INT_DESC_DONE_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQS_INT_DESC_DONE_CTRL_ADDR), tmp);
}
static __inline void mac_txqs_int_desc_done_ctrl_unpack(volatile uint32_t* sw_txq6_int_desc_done_type_1_en, volatile uint32_t* sw_txq6_int_desc_done_type_0_en, volatile uint32_t* sw_txq3_int_desc_done_type_1_en, volatile uint32_t* sw_txq3_int_desc_done_type_0_en, volatile uint32_t* sw_txq2_int_desc_done_type_1_en, volatile uint32_t* sw_txq2_int_desc_done_type_0_en, volatile uint32_t* sw_txq1_int_desc_done_type_1_en, volatile uint32_t* sw_txq1_int_desc_done_type_0_en, volatile uint32_t* sw_txq0_int_desc_done_type_1_en, volatile uint32_t* sw_txq0_int_desc_done_type_0_en)
{
	uint32_t tmp;

	tmp = mac_txqs_int_desc_done_ctrl_get();
	*sw_txq6_int_desc_done_type_1_en = (tmp & ((uint32_t)SW_TXQ6_INT_DESC_DONE_TYPE_1_EN_MASK)) >> SW_TXQ6_INT_DESC_DONE_TYPE_1_EN_OFFSET;
	*sw_txq6_int_desc_done_type_0_en = (tmp & ((uint32_t)SW_TXQ6_INT_DESC_DONE_TYPE_0_EN_MASK)) >> SW_TXQ6_INT_DESC_DONE_TYPE_0_EN_OFFSET;
	*sw_txq3_int_desc_done_type_1_en = (tmp & ((uint32_t)SW_TXQ3_INT_DESC_DONE_TYPE_1_EN_MASK)) >> SW_TXQ3_INT_DESC_DONE_TYPE_1_EN_OFFSET;
	*sw_txq3_int_desc_done_type_0_en = (tmp & ((uint32_t)SW_TXQ3_INT_DESC_DONE_TYPE_0_EN_MASK)) >> SW_TXQ3_INT_DESC_DONE_TYPE_0_EN_OFFSET;
	*sw_txq2_int_desc_done_type_1_en = (tmp & ((uint32_t)SW_TXQ2_INT_DESC_DONE_TYPE_1_EN_MASK)) >> SW_TXQ2_INT_DESC_DONE_TYPE_1_EN_OFFSET;
	*sw_txq2_int_desc_done_type_0_en = (tmp & ((uint32_t)SW_TXQ2_INT_DESC_DONE_TYPE_0_EN_MASK)) >> SW_TXQ2_INT_DESC_DONE_TYPE_0_EN_OFFSET;
	*sw_txq1_int_desc_done_type_1_en = (tmp & ((uint32_t)SW_TXQ1_INT_DESC_DONE_TYPE_1_EN_MASK)) >> SW_TXQ1_INT_DESC_DONE_TYPE_1_EN_OFFSET;
	*sw_txq1_int_desc_done_type_0_en = (tmp & ((uint32_t)SW_TXQ1_INT_DESC_DONE_TYPE_0_EN_MASK)) >> SW_TXQ1_INT_DESC_DONE_TYPE_0_EN_OFFSET;
	*sw_txq0_int_desc_done_type_1_en = (tmp & ((uint32_t)SW_TXQ0_INT_DESC_DONE_TYPE_1_EN_MASK)) >> SW_TXQ0_INT_DESC_DONE_TYPE_1_EN_OFFSET;
	*sw_txq0_int_desc_done_type_0_en = (tmp & ((uint32_t)SW_TXQ0_INT_DESC_DONE_TYPE_0_EN_MASK)) >> SW_TXQ0_INT_DESC_DONE_TYPE_0_EN_OFFSET;
}
static __inline void mac_txqs_inner_collision_ctrl_sw_txq6_inner_collision_cw_double_en_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQS_INNER_COLLISION_CTRL_ADDR);
	tmp &= ~SW_TXQ6_INNER_COLLISION_CW_DOUBLE_EN_MASK;
	tmp |= (value << SW_TXQ6_INNER_COLLISION_CW_DOUBLE_EN_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQS_INNER_COLLISION_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQS_INNER_COLLISION_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_txqs_inner_collision_ctrl_sw_txq6_inner_collision_cw_double_en_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQS_INNER_COLLISION_CTRL_ADDR)) & SW_TXQ6_INNER_COLLISION_CW_DOUBLE_EN_MASK) >> SW_TXQ6_INNER_COLLISION_CW_DOUBLE_EN_OFFSET;
}
static __inline void mac_txqs_inner_collision_ctrl_sw_txq3_inner_collision_cw_double_en_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQS_INNER_COLLISION_CTRL_ADDR);
	tmp &= ~SW_TXQ3_INNER_COLLISION_CW_DOUBLE_EN_MASK;
	tmp |= (value << SW_TXQ3_INNER_COLLISION_CW_DOUBLE_EN_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQS_INNER_COLLISION_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQS_INNER_COLLISION_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_txqs_inner_collision_ctrl_sw_txq3_inner_collision_cw_double_en_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQS_INNER_COLLISION_CTRL_ADDR)) & SW_TXQ3_INNER_COLLISION_CW_DOUBLE_EN_MASK) >> SW_TXQ3_INNER_COLLISION_CW_DOUBLE_EN_OFFSET;
}
static __inline void mac_txqs_inner_collision_ctrl_sw_txq2_inner_collision_cw_double_en_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQS_INNER_COLLISION_CTRL_ADDR);
	tmp &= ~SW_TXQ2_INNER_COLLISION_CW_DOUBLE_EN_MASK;
	tmp |= (value << SW_TXQ2_INNER_COLLISION_CW_DOUBLE_EN_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQS_INNER_COLLISION_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQS_INNER_COLLISION_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_txqs_inner_collision_ctrl_sw_txq2_inner_collision_cw_double_en_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQS_INNER_COLLISION_CTRL_ADDR)) & SW_TXQ2_INNER_COLLISION_CW_DOUBLE_EN_MASK) >> SW_TXQ2_INNER_COLLISION_CW_DOUBLE_EN_OFFSET;
}
static __inline void mac_txqs_inner_collision_ctrl_sw_txq1_inner_collision_cw_double_en_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQS_INNER_COLLISION_CTRL_ADDR);
	tmp &= ~SW_TXQ1_INNER_COLLISION_CW_DOUBLE_EN_MASK;
	tmp |= (value << SW_TXQ1_INNER_COLLISION_CW_DOUBLE_EN_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQS_INNER_COLLISION_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQS_INNER_COLLISION_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_txqs_inner_collision_ctrl_sw_txq1_inner_collision_cw_double_en_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQS_INNER_COLLISION_CTRL_ADDR)) & SW_TXQ1_INNER_COLLISION_CW_DOUBLE_EN_MASK) >> SW_TXQ1_INNER_COLLISION_CW_DOUBLE_EN_OFFSET;
}
static __inline void mac_txqs_inner_collision_ctrl_sw_txq0_inner_collision_cw_double_en_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQS_INNER_COLLISION_CTRL_ADDR);
	tmp &= ~SW_TXQ0_INNER_COLLISION_CW_DOUBLE_EN_MASK;
	tmp |= (value << SW_TXQ0_INNER_COLLISION_CW_DOUBLE_EN_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQS_INNER_COLLISION_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQS_INNER_COLLISION_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_txqs_inner_collision_ctrl_sw_txq0_inner_collision_cw_double_en_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQS_INNER_COLLISION_CTRL_ADDR)) & SW_TXQ0_INNER_COLLISION_CW_DOUBLE_EN_MASK) >> SW_TXQ0_INNER_COLLISION_CW_DOUBLE_EN_OFFSET;
}
static __inline void mac_txqs_inner_collision_ctrl_set(uint32_t value)
{
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQS_INNER_COLLISION_CTRL_ADDR, value);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQS_INNER_COLLISION_CTRL_ADDR), value);
}
static __inline uint32_t mac_txqs_inner_collision_ctrl_get(void)
{
	return (WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQS_INNER_COLLISION_CTRL_ADDR));
}
static __inline void mac_txqs_inner_collision_ctrl_pack(uint32_t sw_txq6_inner_collision_cw_double_en, uint32_t sw_txq3_inner_collision_cw_double_en, uint32_t sw_txq2_inner_collision_cw_double_en, uint32_t sw_txq1_inner_collision_cw_double_en, uint32_t sw_txq0_inner_collision_cw_double_en)
{
	uint32_t tmp;

	assert((((uint32_t)sw_txq6_inner_collision_cw_double_en << SW_TXQ6_INNER_COLLISION_CW_DOUBLE_EN_OFFSET) & ~((uint32_t)SW_TXQ6_INNER_COLLISION_CW_DOUBLE_EN_MASK)) == 0);
	assert((((uint32_t)sw_txq3_inner_collision_cw_double_en << SW_TXQ3_INNER_COLLISION_CW_DOUBLE_EN_OFFSET) & ~((uint32_t)SW_TXQ3_INNER_COLLISION_CW_DOUBLE_EN_MASK)) == 0);
	assert((((uint32_t)sw_txq2_inner_collision_cw_double_en << SW_TXQ2_INNER_COLLISION_CW_DOUBLE_EN_OFFSET) & ~((uint32_t)SW_TXQ2_INNER_COLLISION_CW_DOUBLE_EN_MASK)) == 0);
	assert((((uint32_t)sw_txq1_inner_collision_cw_double_en << SW_TXQ1_INNER_COLLISION_CW_DOUBLE_EN_OFFSET) & ~((uint32_t)SW_TXQ1_INNER_COLLISION_CW_DOUBLE_EN_MASK)) == 0);
	assert((((uint32_t)sw_txq0_inner_collision_cw_double_en << SW_TXQ0_INNER_COLLISION_CW_DOUBLE_EN_OFFSET) & ~((uint32_t)SW_TXQ0_INNER_COLLISION_CW_DOUBLE_EN_MASK)) == 0);
	tmp =
		((uint32_t)sw_txq6_inner_collision_cw_double_en << SW_TXQ6_INNER_COLLISION_CW_DOUBLE_EN_OFFSET) |
		((uint32_t)sw_txq3_inner_collision_cw_double_en << SW_TXQ3_INNER_COLLISION_CW_DOUBLE_EN_OFFSET) |
		((uint32_t)sw_txq2_inner_collision_cw_double_en << SW_TXQ2_INNER_COLLISION_CW_DOUBLE_EN_OFFSET) |
		((uint32_t)sw_txq1_inner_collision_cw_double_en << SW_TXQ1_INNER_COLLISION_CW_DOUBLE_EN_OFFSET) |
		((uint32_t)sw_txq0_inner_collision_cw_double_en << SW_TXQ0_INNER_COLLISION_CW_DOUBLE_EN_OFFSET) ;
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQS_INNER_COLLISION_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQS_INNER_COLLISION_CTRL_ADDR), tmp);
}
static __inline void mac_txqs_inner_collision_ctrl_unpack(volatile uint32_t* sw_txq6_inner_collision_cw_double_en, volatile uint32_t* sw_txq3_inner_collision_cw_double_en, volatile uint32_t* sw_txq2_inner_collision_cw_double_en, volatile uint32_t* sw_txq1_inner_collision_cw_double_en, volatile uint32_t* sw_txq0_inner_collision_cw_double_en)
{
	uint32_t tmp;

	tmp = mac_txqs_inner_collision_ctrl_get();
	*sw_txq6_inner_collision_cw_double_en = (tmp & ((uint32_t)SW_TXQ6_INNER_COLLISION_CW_DOUBLE_EN_MASK)) >> SW_TXQ6_INNER_COLLISION_CW_DOUBLE_EN_OFFSET;
	*sw_txq3_inner_collision_cw_double_en = (tmp & ((uint32_t)SW_TXQ3_INNER_COLLISION_CW_DOUBLE_EN_MASK)) >> SW_TXQ3_INNER_COLLISION_CW_DOUBLE_EN_OFFSET;
	*sw_txq2_inner_collision_cw_double_en = (tmp & ((uint32_t)SW_TXQ2_INNER_COLLISION_CW_DOUBLE_EN_MASK)) >> SW_TXQ2_INNER_COLLISION_CW_DOUBLE_EN_OFFSET;
	*sw_txq1_inner_collision_cw_double_en = (tmp & ((uint32_t)SW_TXQ1_INNER_COLLISION_CW_DOUBLE_EN_MASK)) >> SW_TXQ1_INNER_COLLISION_CW_DOUBLE_EN_OFFSET;
	*sw_txq0_inner_collision_cw_double_en = (tmp & ((uint32_t)SW_TXQ0_INNER_COLLISION_CW_DOUBLE_EN_MASK)) >> SW_TXQ0_INNER_COLLISION_CW_DOUBLE_EN_OFFSET;
}
static __inline uint32_t mac_txq_dbg_0_sw_ro_txq_dbg_0_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ_DBG_0_ADDR)) & SW_RO_TXQ_DBG_0_MASK) >> SW_RO_TXQ_DBG_0_OFFSET;
}
static __inline uint32_t mac_txq_dbg_0_get(void)
{
	return (WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ_DBG_0_ADDR));
}
static __inline void mac_txq_dbg_0_unpack(volatile uint32_t* sw_ro_txq_dbg_0)
{
	uint32_t tmp;

	tmp = mac_txq_dbg_0_get();
	*sw_ro_txq_dbg_0 = (tmp & ((uint32_t)SW_RO_TXQ_DBG_0_MASK)) >> SW_RO_TXQ_DBG_0_OFFSET;
}
static __inline uint32_t mac_txq_dbg_1_sw_ro_txq_dbg_1_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ_DBG_1_ADDR)) & SW_RO_TXQ_DBG_1_MASK) >> SW_RO_TXQ_DBG_1_OFFSET;
}
static __inline uint32_t mac_txq_dbg_1_get(void)
{
	return (WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ_DBG_1_ADDR));
}
static __inline void mac_txq_dbg_1_unpack(volatile uint32_t* sw_ro_txq_dbg_1)
{
	uint32_t tmp;

	tmp = mac_txq_dbg_1_get();
	*sw_ro_txq_dbg_1 = (tmp & ((uint32_t)SW_RO_TXQ_DBG_1_MASK)) >> SW_RO_TXQ_DBG_1_OFFSET;
}
static __inline uint32_t mac_txq_general_dbg_0_sw_ro_txq0_rts_single_tx_fail_reason_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ_GENERAL_DBG_0_ADDR)) & SW_RO_TXQ0_RTS_SINGLE_TX_FAIL_REASON_MASK) >> SW_RO_TXQ0_RTS_SINGLE_TX_FAIL_REASON_OFFSET;
}
static __inline uint32_t mac_txq_general_dbg_0_sw_ro_txq0_cts_self_tx_fail_reason_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ_GENERAL_DBG_0_ADDR)) & SW_RO_TXQ0_CTS_SELF_TX_FAIL_REASON_MASK) >> SW_RO_TXQ0_CTS_SELF_TX_FAIL_REASON_OFFSET;
}
static __inline uint32_t mac_txq_general_dbg_0_sw_ro_txq0_cfend_tx_fail_reason_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ_GENERAL_DBG_0_ADDR)) & SW_RO_TXQ0_CFEND_TX_FAIL_REASON_MASK) >> SW_RO_TXQ0_CFEND_TX_FAIL_REASON_OFFSET;
}
static __inline uint32_t mac_txq_general_dbg_0_sw_ro_txq0_frame_tx_fail_reason_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ_GENERAL_DBG_0_ADDR)) & SW_RO_TXQ0_FRAME_TX_FAIL_REASON_MASK) >> SW_RO_TXQ0_FRAME_TX_FAIL_REASON_OFFSET;
}
static __inline uint32_t mac_txq_general_dbg_0_sw_ro_txq1_rts_single_tx_fail_reason_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ_GENERAL_DBG_0_ADDR)) & SW_RO_TXQ1_RTS_SINGLE_TX_FAIL_REASON_MASK) >> SW_RO_TXQ1_RTS_SINGLE_TX_FAIL_REASON_OFFSET;
}
static __inline uint32_t mac_txq_general_dbg_0_sw_ro_txq1_cts_self_tx_fail_reason_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ_GENERAL_DBG_0_ADDR)) & SW_RO_TXQ1_CTS_SELF_TX_FAIL_REASON_MASK) >> SW_RO_TXQ1_CTS_SELF_TX_FAIL_REASON_OFFSET;
}
static __inline uint32_t mac_txq_general_dbg_0_sw_ro_txq1_cfend_tx_fail_reason_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ_GENERAL_DBG_0_ADDR)) & SW_RO_TXQ1_CFEND_TX_FAIL_REASON_MASK) >> SW_RO_TXQ1_CFEND_TX_FAIL_REASON_OFFSET;
}
static __inline uint32_t mac_txq_general_dbg_0_sw_ro_txq1_frame_tx_fail_reason_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ_GENERAL_DBG_0_ADDR)) & SW_RO_TXQ1_FRAME_TX_FAIL_REASON_MASK) >> SW_RO_TXQ1_FRAME_TX_FAIL_REASON_OFFSET;
}
static __inline uint32_t mac_txq_general_dbg_0_get(void)
{
	return (WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ_GENERAL_DBG_0_ADDR));
}
static __inline void mac_txq_general_dbg_0_unpack(volatile uint32_t* sw_ro_txq0_rts_single_tx_fail_reason, volatile uint32_t* sw_ro_txq0_cts_self_tx_fail_reason, volatile uint32_t* sw_ro_txq0_cfend_tx_fail_reason, volatile uint32_t* sw_ro_txq0_frame_tx_fail_reason, volatile uint32_t* sw_ro_txq1_rts_single_tx_fail_reason, volatile uint32_t* sw_ro_txq1_cts_self_tx_fail_reason, volatile uint32_t* sw_ro_txq1_cfend_tx_fail_reason, volatile uint32_t* sw_ro_txq1_frame_tx_fail_reason)
{
	uint32_t tmp;

	tmp = mac_txq_general_dbg_0_get();
	*sw_ro_txq0_rts_single_tx_fail_reason = (tmp & ((uint32_t)SW_RO_TXQ0_RTS_SINGLE_TX_FAIL_REASON_MASK)) >> SW_RO_TXQ0_RTS_SINGLE_TX_FAIL_REASON_OFFSET;
	*sw_ro_txq0_cts_self_tx_fail_reason = (tmp & ((uint32_t)SW_RO_TXQ0_CTS_SELF_TX_FAIL_REASON_MASK)) >> SW_RO_TXQ0_CTS_SELF_TX_FAIL_REASON_OFFSET;
	*sw_ro_txq0_cfend_tx_fail_reason = (tmp & ((uint32_t)SW_RO_TXQ0_CFEND_TX_FAIL_REASON_MASK)) >> SW_RO_TXQ0_CFEND_TX_FAIL_REASON_OFFSET;
	*sw_ro_txq0_frame_tx_fail_reason = (tmp & ((uint32_t)SW_RO_TXQ0_FRAME_TX_FAIL_REASON_MASK)) >> SW_RO_TXQ0_FRAME_TX_FAIL_REASON_OFFSET;
	*sw_ro_txq1_rts_single_tx_fail_reason = (tmp & ((uint32_t)SW_RO_TXQ1_RTS_SINGLE_TX_FAIL_REASON_MASK)) >> SW_RO_TXQ1_RTS_SINGLE_TX_FAIL_REASON_OFFSET;
	*sw_ro_txq1_cts_self_tx_fail_reason = (tmp & ((uint32_t)SW_RO_TXQ1_CTS_SELF_TX_FAIL_REASON_MASK)) >> SW_RO_TXQ1_CTS_SELF_TX_FAIL_REASON_OFFSET;
	*sw_ro_txq1_cfend_tx_fail_reason = (tmp & ((uint32_t)SW_RO_TXQ1_CFEND_TX_FAIL_REASON_MASK)) >> SW_RO_TXQ1_CFEND_TX_FAIL_REASON_OFFSET;
	*sw_ro_txq1_frame_tx_fail_reason = (tmp & ((uint32_t)SW_RO_TXQ1_FRAME_TX_FAIL_REASON_MASK)) >> SW_RO_TXQ1_FRAME_TX_FAIL_REASON_OFFSET;
}
static __inline uint32_t mac_txq_general_dbg_1_sw_ro_txq2_rts_single_tx_fail_reason_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ_GENERAL_DBG_1_ADDR)) & SW_RO_TXQ2_RTS_SINGLE_TX_FAIL_REASON_MASK) >> SW_RO_TXQ2_RTS_SINGLE_TX_FAIL_REASON_OFFSET;
}
static __inline uint32_t mac_txq_general_dbg_1_sw_ro_txq2_cts_self_tx_fail_reason_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ_GENERAL_DBG_1_ADDR)) & SW_RO_TXQ2_CTS_SELF_TX_FAIL_REASON_MASK) >> SW_RO_TXQ2_CTS_SELF_TX_FAIL_REASON_OFFSET;
}
static __inline uint32_t mac_txq_general_dbg_1_sw_ro_txq2_cfend_tx_fail_reason_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ_GENERAL_DBG_1_ADDR)) & SW_RO_TXQ2_CFEND_TX_FAIL_REASON_MASK) >> SW_RO_TXQ2_CFEND_TX_FAIL_REASON_OFFSET;
}
static __inline uint32_t mac_txq_general_dbg_1_sw_ro_txq2_frame_tx_fail_reason_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ_GENERAL_DBG_1_ADDR)) & SW_RO_TXQ2_FRAME_TX_FAIL_REASON_MASK) >> SW_RO_TXQ2_FRAME_TX_FAIL_REASON_OFFSET;
}
static __inline uint32_t mac_txq_general_dbg_1_sw_ro_txq3_rts_single_tx_fail_reason_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ_GENERAL_DBG_1_ADDR)) & SW_RO_TXQ3_RTS_SINGLE_TX_FAIL_REASON_MASK) >> SW_RO_TXQ3_RTS_SINGLE_TX_FAIL_REASON_OFFSET;
}
static __inline uint32_t mac_txq_general_dbg_1_sw_ro_txq3_cts_self_tx_fail_reason_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ_GENERAL_DBG_1_ADDR)) & SW_RO_TXQ3_CTS_SELF_TX_FAIL_REASON_MASK) >> SW_RO_TXQ3_CTS_SELF_TX_FAIL_REASON_OFFSET;
}
static __inline uint32_t mac_txq_general_dbg_1_sw_ro_txq3_cfend_tx_fail_reason_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ_GENERAL_DBG_1_ADDR)) & SW_RO_TXQ3_CFEND_TX_FAIL_REASON_MASK) >> SW_RO_TXQ3_CFEND_TX_FAIL_REASON_OFFSET;
}
static __inline uint32_t mac_txq_general_dbg_1_sw_ro_txq3_frame_tx_fail_reason_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ_GENERAL_DBG_1_ADDR)) & SW_RO_TXQ3_FRAME_TX_FAIL_REASON_MASK) >> SW_RO_TXQ3_FRAME_TX_FAIL_REASON_OFFSET;
}
static __inline uint32_t mac_txq_general_dbg_1_get(void)
{
	return (WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ_GENERAL_DBG_1_ADDR));
}
static __inline void mac_txq_general_dbg_1_unpack(volatile uint32_t* sw_ro_txq2_rts_single_tx_fail_reason, volatile uint32_t* sw_ro_txq2_cts_self_tx_fail_reason, volatile uint32_t* sw_ro_txq2_cfend_tx_fail_reason, volatile uint32_t* sw_ro_txq2_frame_tx_fail_reason, volatile uint32_t* sw_ro_txq3_rts_single_tx_fail_reason, volatile uint32_t* sw_ro_txq3_cts_self_tx_fail_reason, volatile uint32_t* sw_ro_txq3_cfend_tx_fail_reason, volatile uint32_t* sw_ro_txq3_frame_tx_fail_reason)
{
	uint32_t tmp;

	tmp = mac_txq_general_dbg_1_get();
	*sw_ro_txq2_rts_single_tx_fail_reason = (tmp & ((uint32_t)SW_RO_TXQ2_RTS_SINGLE_TX_FAIL_REASON_MASK)) >> SW_RO_TXQ2_RTS_SINGLE_TX_FAIL_REASON_OFFSET;
	*sw_ro_txq2_cts_self_tx_fail_reason = (tmp & ((uint32_t)SW_RO_TXQ2_CTS_SELF_TX_FAIL_REASON_MASK)) >> SW_RO_TXQ2_CTS_SELF_TX_FAIL_REASON_OFFSET;
	*sw_ro_txq2_cfend_tx_fail_reason = (tmp & ((uint32_t)SW_RO_TXQ2_CFEND_TX_FAIL_REASON_MASK)) >> SW_RO_TXQ2_CFEND_TX_FAIL_REASON_OFFSET;
	*sw_ro_txq2_frame_tx_fail_reason = (tmp & ((uint32_t)SW_RO_TXQ2_FRAME_TX_FAIL_REASON_MASK)) >> SW_RO_TXQ2_FRAME_TX_FAIL_REASON_OFFSET;
	*sw_ro_txq3_rts_single_tx_fail_reason = (tmp & ((uint32_t)SW_RO_TXQ3_RTS_SINGLE_TX_FAIL_REASON_MASK)) >> SW_RO_TXQ3_RTS_SINGLE_TX_FAIL_REASON_OFFSET;
	*sw_ro_txq3_cts_self_tx_fail_reason = (tmp & ((uint32_t)SW_RO_TXQ3_CTS_SELF_TX_FAIL_REASON_MASK)) >> SW_RO_TXQ3_CTS_SELF_TX_FAIL_REASON_OFFSET;
	*sw_ro_txq3_cfend_tx_fail_reason = (tmp & ((uint32_t)SW_RO_TXQ3_CFEND_TX_FAIL_REASON_MASK)) >> SW_RO_TXQ3_CFEND_TX_FAIL_REASON_OFFSET;
	*sw_ro_txq3_frame_tx_fail_reason = (tmp & ((uint32_t)SW_RO_TXQ3_FRAME_TX_FAIL_REASON_MASK)) >> SW_RO_TXQ3_FRAME_TX_FAIL_REASON_OFFSET;
}
static __inline uint32_t mac_txq_general_dbg_3_sw_ro_txq6_rts_single_tx_fail_reason_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ_GENERAL_DBG_3_ADDR)) & SW_RO_TXQ6_RTS_SINGLE_TX_FAIL_REASON_MASK) >> SW_RO_TXQ6_RTS_SINGLE_TX_FAIL_REASON_OFFSET;
}
static __inline uint32_t mac_txq_general_dbg_3_sw_ro_txq6_cts_self_tx_fail_reason_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ_GENERAL_DBG_3_ADDR)) & SW_RO_TXQ6_CTS_SELF_TX_FAIL_REASON_MASK) >> SW_RO_TXQ6_CTS_SELF_TX_FAIL_REASON_OFFSET;
}
static __inline uint32_t mac_txq_general_dbg_3_sw_ro_txq6_cfend_tx_fail_reason_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ_GENERAL_DBG_3_ADDR)) & SW_RO_TXQ6_CFEND_TX_FAIL_REASON_MASK) >> SW_RO_TXQ6_CFEND_TX_FAIL_REASON_OFFSET;
}
static __inline uint32_t mac_txq_general_dbg_3_sw_ro_txq6_frame_tx_fail_reason_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ_GENERAL_DBG_3_ADDR)) & SW_RO_TXQ6_FRAME_TX_FAIL_REASON_MASK) >> SW_RO_TXQ6_FRAME_TX_FAIL_REASON_OFFSET;
}
static __inline uint32_t mac_txq_general_dbg_3_get(void)
{
	return (WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ_GENERAL_DBG_3_ADDR));
}
static __inline void mac_txq_general_dbg_3_unpack(volatile uint32_t* sw_ro_txq6_rts_single_tx_fail_reason, volatile uint32_t* sw_ro_txq6_cts_self_tx_fail_reason, volatile uint32_t* sw_ro_txq6_cfend_tx_fail_reason, volatile uint32_t* sw_ro_txq6_frame_tx_fail_reason)
{
	uint32_t tmp;

	tmp = mac_txq_general_dbg_3_get();
	*sw_ro_txq6_rts_single_tx_fail_reason = (tmp & ((uint32_t)SW_RO_TXQ6_RTS_SINGLE_TX_FAIL_REASON_MASK)) >> SW_RO_TXQ6_RTS_SINGLE_TX_FAIL_REASON_OFFSET;
	*sw_ro_txq6_cts_self_tx_fail_reason = (tmp & ((uint32_t)SW_RO_TXQ6_CTS_SELF_TX_FAIL_REASON_MASK)) >> SW_RO_TXQ6_CTS_SELF_TX_FAIL_REASON_OFFSET;
	*sw_ro_txq6_cfend_tx_fail_reason = (tmp & ((uint32_t)SW_RO_TXQ6_CFEND_TX_FAIL_REASON_MASK)) >> SW_RO_TXQ6_CFEND_TX_FAIL_REASON_OFFSET;
	*sw_ro_txq6_frame_tx_fail_reason = (tmp & ((uint32_t)SW_RO_TXQ6_FRAME_TX_FAIL_REASON_MASK)) >> SW_RO_TXQ6_FRAME_TX_FAIL_REASON_OFFSET;
}
static __inline void mac_txq0_enable_sw_txq0_srst_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_ENABLE_ADDR);
	tmp &= ~SW_TXQ0_SRST_MASK;
	tmp |= (value << SW_TXQ0_SRST_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_ENABLE_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_ENABLE_ADDR), tmp);
}
static __inline void mac_txq0_enable_sw_txq0_dbg_info_clr_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_ENABLE_ADDR);
	tmp &= ~SW_TXQ0_DBG_INFO_CLR_MASK;
	tmp |= (value << SW_TXQ0_DBG_INFO_CLR_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_ENABLE_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_ENABLE_ADDR), tmp);
}
static __inline void mac_txq0_enable_sw_txq0_dummy_trig_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_ENABLE_ADDR);
	tmp &= ~SW_TXQ0_DUMMY_TRIG_MASK;
	tmp |= (value << SW_TXQ0_DUMMY_TRIG_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_ENABLE_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_ENABLE_ADDR), tmp);
}
static __inline void mac_txq0_enable_sw_txq0_dis_pls_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_ENABLE_ADDR);
	tmp &= ~SW_TXQ0_DIS_PLS_MASK;
	tmp |= (value << SW_TXQ0_DIS_PLS_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_ENABLE_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_ENABLE_ADDR), tmp);
}
static __inline void mac_txq0_enable_sw_txq0_en_pls_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_ENABLE_ADDR);
	tmp &= ~SW_TXQ0_EN_PLS_MASK;
	tmp |= (value << SW_TXQ0_EN_PLS_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_ENABLE_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_ENABLE_ADDR), tmp);
}
static __inline void mac_txq0_enable_set(uint32_t value)
{
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_ENABLE_ADDR, value);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_ENABLE_ADDR), value);
}
static __inline uint32_t mac_txq0_enable_get(void)
{
	return (WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_ENABLE_ADDR));
}
static __inline void mac_txq0_enable_pack(uint32_t sw_txq0_srst, uint32_t sw_txq0_dbg_info_clr, uint32_t sw_txq0_dummy_trig, uint32_t sw_txq0_dis_pls, uint32_t sw_txq0_en_pls)
{
	uint32_t tmp;

	assert((((uint32_t)sw_txq0_srst << SW_TXQ0_SRST_OFFSET) & ~((uint32_t)SW_TXQ0_SRST_MASK)) == 0);
	assert((((uint32_t)sw_txq0_dbg_info_clr << SW_TXQ0_DBG_INFO_CLR_OFFSET) & ~((uint32_t)SW_TXQ0_DBG_INFO_CLR_MASK)) == 0);
	assert((((uint32_t)sw_txq0_dummy_trig << SW_TXQ0_DUMMY_TRIG_OFFSET) & ~((uint32_t)SW_TXQ0_DUMMY_TRIG_MASK)) == 0);
	assert((((uint32_t)sw_txq0_dis_pls << SW_TXQ0_DIS_PLS_OFFSET) & ~((uint32_t)SW_TXQ0_DIS_PLS_MASK)) == 0);
	assert((((uint32_t)sw_txq0_en_pls << SW_TXQ0_EN_PLS_OFFSET) & ~((uint32_t)SW_TXQ0_EN_PLS_MASK)) == 0);
	tmp =
		((uint32_t)sw_txq0_srst << SW_TXQ0_SRST_OFFSET) |
		((uint32_t)sw_txq0_dbg_info_clr << SW_TXQ0_DBG_INFO_CLR_OFFSET) |
		((uint32_t)sw_txq0_dummy_trig << SW_TXQ0_DUMMY_TRIG_OFFSET) |
		((uint32_t)sw_txq0_dis_pls << SW_TXQ0_DIS_PLS_OFFSET) |
		((uint32_t)sw_txq0_en_pls << SW_TXQ0_EN_PLS_OFFSET) ;
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_ENABLE_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_ENABLE_ADDR), tmp);
}
static __inline void mac_txq0_ctrl_sw_txq0_dummy_int_en_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_CTRL_ADDR);
	tmp &= ~SW_TXQ0_DUMMY_INT_EN_MASK;
	tmp |= (value << SW_TXQ0_DUMMY_INT_EN_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_txq0_ctrl_sw_txq0_dummy_int_en_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_CTRL_ADDR)) & SW_TXQ0_DUMMY_INT_EN_MASK) >> SW_TXQ0_DUMMY_INT_EN_OFFSET;
}
static __inline void mac_txq0_ctrl_sw_txq0_hw_frame_fc_power_mode_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_CTRL_ADDR);
	tmp &= ~SW_TXQ0_HW_FRAME_FC_POWER_MODE_MASK;
	tmp |= (value << SW_TXQ0_HW_FRAME_FC_POWER_MODE_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_txq0_ctrl_sw_txq0_hw_frame_fc_power_mode_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_CTRL_ADDR)) & SW_TXQ0_HW_FRAME_FC_POWER_MODE_MASK) >> SW_TXQ0_HW_FRAME_FC_POWER_MODE_OFFSET;
}
static __inline void mac_txq0_ctrl_sw_txq0_cf_end_en_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_CTRL_ADDR);
	tmp &= ~SW_TXQ0_CF_END_EN_MASK;
	tmp |= (value << SW_TXQ0_CF_END_EN_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_txq0_ctrl_sw_txq0_cf_end_en_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_CTRL_ADDR)) & SW_TXQ0_CF_END_EN_MASK) >> SW_TXQ0_CF_END_EN_OFFSET;
}
static __inline void mac_txq0_ctrl_sw_txq0_cw_min_set_pls_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_CTRL_ADDR);
	tmp &= ~SW_TXQ0_CW_MIN_SET_PLS_MASK;
	tmp |= (value << SW_TXQ0_CW_MIN_SET_PLS_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_CTRL_ADDR), tmp);
}
static __inline void mac_txq0_ctrl_set(uint32_t value)
{
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_CTRL_ADDR, value);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_CTRL_ADDR), value);
}
static __inline uint32_t mac_txq0_ctrl_get(void)
{
	return (WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_CTRL_ADDR));
}
static __inline void mac_txq0_ctrl_pack(uint32_t sw_txq0_dummy_int_en, uint32_t sw_txq0_hw_frame_fc_power_mode, uint32_t sw_txq0_cf_end_en, uint32_t sw_txq0_cw_min_set_pls)
{
	uint32_t tmp;

	assert((((uint32_t)sw_txq0_dummy_int_en << SW_TXQ0_DUMMY_INT_EN_OFFSET) & ~((uint32_t)SW_TXQ0_DUMMY_INT_EN_MASK)) == 0);
	assert((((uint32_t)sw_txq0_hw_frame_fc_power_mode << SW_TXQ0_HW_FRAME_FC_POWER_MODE_OFFSET) & ~((uint32_t)SW_TXQ0_HW_FRAME_FC_POWER_MODE_MASK)) == 0);
	assert((((uint32_t)sw_txq0_cf_end_en << SW_TXQ0_CF_END_EN_OFFSET) & ~((uint32_t)SW_TXQ0_CF_END_EN_MASK)) == 0);
	assert((((uint32_t)sw_txq0_cw_min_set_pls << SW_TXQ0_CW_MIN_SET_PLS_OFFSET) & ~((uint32_t)SW_TXQ0_CW_MIN_SET_PLS_MASK)) == 0);
	tmp =
		((uint32_t)sw_txq0_dummy_int_en << SW_TXQ0_DUMMY_INT_EN_OFFSET) |
		((uint32_t)sw_txq0_hw_frame_fc_power_mode << SW_TXQ0_HW_FRAME_FC_POWER_MODE_OFFSET) |
		((uint32_t)sw_txq0_cf_end_en << SW_TXQ0_CF_END_EN_OFFSET) |
		((uint32_t)sw_txq0_cw_min_set_pls << SW_TXQ0_CW_MIN_SET_PLS_OFFSET) ;
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_CTRL_ADDR), tmp);
}
static __inline void mac_txq0_ctrl_unpack(volatile uint32_t* sw_txq0_dummy_int_en, volatile uint32_t* sw_txq0_hw_frame_fc_power_mode, volatile uint32_t* sw_txq0_cf_end_en)
{
	uint32_t tmp;

	tmp = mac_txq0_ctrl_get();
	*sw_txq0_dummy_int_en = (tmp & ((uint32_t)SW_TXQ0_DUMMY_INT_EN_MASK)) >> SW_TXQ0_DUMMY_INT_EN_OFFSET;
	*sw_txq0_hw_frame_fc_power_mode = (tmp & ((uint32_t)SW_TXQ0_HW_FRAME_FC_POWER_MODE_MASK)) >> SW_TXQ0_HW_FRAME_FC_POWER_MODE_OFFSET;
	*sw_txq0_cf_end_en = (tmp & ((uint32_t)SW_TXQ0_CF_END_EN_MASK)) >> SW_TXQ0_CF_END_EN_OFFSET;
}
static __inline void mac_txq0_ifs_ctrl_sw_txq0_eifs_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_IFS_CTRL_ADDR);
	tmp &= ~SW_TXQ0_EIFS_MASK;
	tmp |= (value << SW_TXQ0_EIFS_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_IFS_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_IFS_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_txq0_ifs_ctrl_sw_txq0_eifs_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_IFS_CTRL_ADDR)) & SW_TXQ0_EIFS_MASK) >> SW_TXQ0_EIFS_OFFSET;
}
static __inline void mac_txq0_ifs_ctrl_sw_txq0_difs_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_IFS_CTRL_ADDR);
	tmp &= ~SW_TXQ0_DIFS_MASK;
	tmp |= (value << SW_TXQ0_DIFS_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_IFS_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_IFS_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_txq0_ifs_ctrl_sw_txq0_difs_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_IFS_CTRL_ADDR)) & SW_TXQ0_DIFS_MASK) >> SW_TXQ0_DIFS_OFFSET;
}
static __inline void mac_txq0_ifs_ctrl_set(uint32_t value)
{
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_IFS_CTRL_ADDR, value);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_IFS_CTRL_ADDR), value);
}
static __inline uint32_t mac_txq0_ifs_ctrl_get(void)
{
	return (WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_IFS_CTRL_ADDR));
}
static __inline void mac_txq0_ifs_ctrl_pack(uint32_t sw_txq0_eifs, uint32_t sw_txq0_difs)
{
	uint32_t tmp;

	assert((((uint32_t)sw_txq0_eifs << SW_TXQ0_EIFS_OFFSET) & ~((uint32_t)SW_TXQ0_EIFS_MASK)) == 0);
	assert((((uint32_t)sw_txq0_difs << SW_TXQ0_DIFS_OFFSET) & ~((uint32_t)SW_TXQ0_DIFS_MASK)) == 0);
	tmp =
		((uint32_t)sw_txq0_eifs << SW_TXQ0_EIFS_OFFSET) |
		((uint32_t)sw_txq0_difs << SW_TXQ0_DIFS_OFFSET) ;
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_IFS_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_IFS_CTRL_ADDR), tmp);
}
static __inline void mac_txq0_ifs_ctrl_unpack(volatile uint32_t* sw_txq0_eifs, volatile uint32_t* sw_txq0_difs)
{
	uint32_t tmp;

	tmp = mac_txq0_ifs_ctrl_get();
	*sw_txq0_eifs = (tmp & ((uint32_t)SW_TXQ0_EIFS_MASK)) >> SW_TXQ0_EIFS_OFFSET;
	*sw_txq0_difs = (tmp & ((uint32_t)SW_TXQ0_DIFS_MASK)) >> SW_TXQ0_DIFS_OFFSET;
}
static __inline void mac_txq0_rsp_time_sw_txq0_resp_timeout_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_RSP_TIME_ADDR);
	tmp &= ~SW_TXQ0_RESP_TIMEOUT_MASK;
	tmp |= (value << SW_TXQ0_RESP_TIMEOUT_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_RSP_TIME_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_RSP_TIME_ADDR), tmp);
}
static __inline uint32_t mac_txq0_rsp_time_sw_txq0_resp_timeout_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_RSP_TIME_ADDR)) & SW_TXQ0_RESP_TIMEOUT_MASK) >> SW_TXQ0_RESP_TIMEOUT_OFFSET;
}
static __inline void mac_txq0_rsp_time_set(uint32_t value)
{
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_RSP_TIME_ADDR, value);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_RSP_TIME_ADDR), value);
}
static __inline uint32_t mac_txq0_rsp_time_get(void)
{
	return (WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_RSP_TIME_ADDR));
}
static __inline void mac_txq0_rsp_time_pack(uint32_t sw_txq0_resp_timeout)
{
	uint32_t tmp;

	assert((((uint32_t)sw_txq0_resp_timeout << SW_TXQ0_RESP_TIMEOUT_OFFSET) & ~((uint32_t)SW_TXQ0_RESP_TIMEOUT_MASK)) == 0);
	tmp =
		((uint32_t)sw_txq0_resp_timeout << SW_TXQ0_RESP_TIMEOUT_OFFSET) ;
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_RSP_TIME_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_RSP_TIME_ADDR), tmp);
}
static __inline void mac_txq0_rsp_time_unpack(volatile uint32_t* sw_txq0_resp_timeout)
{
	uint32_t tmp;

	tmp = mac_txq0_rsp_time_get();
	*sw_txq0_resp_timeout = (tmp & ((uint32_t)SW_TXQ0_RESP_TIMEOUT_MASK)) >> SW_TXQ0_RESP_TIMEOUT_OFFSET;
}
static __inline void mac_txq0_ptr_sw_txq0_start_ptr_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_PTR_ADDR);
	tmp &= ~SW_TXQ0_START_PTR_MASK;
	tmp |= (value << SW_TXQ0_START_PTR_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_PTR_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_PTR_ADDR), tmp);
}
static __inline uint32_t mac_txq0_ptr_sw_txq0_start_ptr_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_PTR_ADDR)) & SW_TXQ0_START_PTR_MASK) >> SW_TXQ0_START_PTR_OFFSET;
}
static __inline void mac_txq0_ptr_set(uint32_t value)
{
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_PTR_ADDR, value);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_PTR_ADDR), value);
}
static __inline uint32_t mac_txq0_ptr_get(void)
{
	return (WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_PTR_ADDR));
}
static __inline void mac_txq0_ptr_pack(uint32_t sw_txq0_start_ptr)
{
	uint32_t tmp;

	assert((((uint32_t)sw_txq0_start_ptr << SW_TXQ0_START_PTR_OFFSET) & ~((uint32_t)SW_TXQ0_START_PTR_MASK)) == 0);
	tmp =
		((uint32_t)sw_txq0_start_ptr << SW_TXQ0_START_PTR_OFFSET) ;
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_PTR_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_PTR_ADDR), tmp);
}
static __inline void mac_txq0_ptr_unpack(volatile uint32_t* sw_txq0_start_ptr)
{
	uint32_t tmp;

	tmp = mac_txq0_ptr_get();
	*sw_txq0_start_ptr = (tmp & ((uint32_t)SW_TXQ0_START_PTR_MASK)) >> SW_TXQ0_START_PTR_OFFSET;
}
static __inline void mac_txq0_tx_timeout_sw_txq0_timeout_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_TX_TIMEOUT_ADDR);
	tmp &= ~SW_TXQ0_TIMEOUT_MASK;
	tmp |= (value << SW_TXQ0_TIMEOUT_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_TX_TIMEOUT_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_TX_TIMEOUT_ADDR), tmp);
}
static __inline uint32_t mac_txq0_tx_timeout_sw_txq0_timeout_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_TX_TIMEOUT_ADDR)) & SW_TXQ0_TIMEOUT_MASK) >> SW_TXQ0_TIMEOUT_OFFSET;
}
static __inline void mac_txq0_tx_timeout_set(uint32_t value)
{
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_TX_TIMEOUT_ADDR, value);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_TX_TIMEOUT_ADDR), value);
}
static __inline uint32_t mac_txq0_tx_timeout_get(void)
{
	return (WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_TX_TIMEOUT_ADDR));
}
static __inline void mac_txq0_tx_timeout_pack(uint32_t sw_txq0_timeout)
{
	uint32_t tmp;

	assert((((uint32_t)sw_txq0_timeout << SW_TXQ0_TIMEOUT_OFFSET) & ~((uint32_t)SW_TXQ0_TIMEOUT_MASK)) == 0);
	tmp =
		((uint32_t)sw_txq0_timeout << SW_TXQ0_TIMEOUT_OFFSET) ;
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_TX_TIMEOUT_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_TX_TIMEOUT_ADDR), tmp);
}
static __inline void mac_txq0_tx_timeout_unpack(volatile uint32_t* sw_txq0_timeout)
{
	uint32_t tmp;

	tmp = mac_txq0_tx_timeout_get();
	*sw_txq0_timeout = (tmp & ((uint32_t)SW_TXQ0_TIMEOUT_MASK)) >> SW_TXQ0_TIMEOUT_OFFSET;
}
static __inline void mac_txq0_cw_sw_txq0_cw_max_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_CW_ADDR);
	tmp &= ~SW_TXQ0_CW_MAX_MASK;
	tmp |= (value << SW_TXQ0_CW_MAX_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_CW_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_CW_ADDR), tmp);
}
static __inline uint32_t mac_txq0_cw_sw_txq0_cw_max_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_CW_ADDR)) & SW_TXQ0_CW_MAX_MASK) >> SW_TXQ0_CW_MAX_OFFSET;
}
static __inline void mac_txq0_cw_sw_txq0_cw_min_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_CW_ADDR);
	tmp &= ~SW_TXQ0_CW_MIN_MASK;
	tmp |= (value << SW_TXQ0_CW_MIN_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_CW_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_CW_ADDR), tmp);
}
static __inline uint32_t mac_txq0_cw_sw_txq0_cw_min_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_CW_ADDR)) & SW_TXQ0_CW_MIN_MASK) >> SW_TXQ0_CW_MIN_OFFSET;
}
static __inline void mac_txq0_cw_set(uint32_t value)
{
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_CW_ADDR, value);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_CW_ADDR), value);
}
static __inline uint32_t mac_txq0_cw_get(void)
{
	return (WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_CW_ADDR));
}
static __inline void mac_txq0_cw_pack(uint32_t sw_txq0_cw_max, uint32_t sw_txq0_cw_min)
{
	uint32_t tmp;

	assert((((uint32_t)sw_txq0_cw_max << SW_TXQ0_CW_MAX_OFFSET) & ~((uint32_t)SW_TXQ0_CW_MAX_MASK)) == 0);
	assert((((uint32_t)sw_txq0_cw_min << SW_TXQ0_CW_MIN_OFFSET) & ~((uint32_t)SW_TXQ0_CW_MIN_MASK)) == 0);
	tmp =
		((uint32_t)sw_txq0_cw_max << SW_TXQ0_CW_MAX_OFFSET) |
		((uint32_t)sw_txq0_cw_min << SW_TXQ0_CW_MIN_OFFSET) ;
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_CW_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_CW_ADDR), tmp);
}
static __inline void mac_txq0_cw_unpack(volatile uint32_t* sw_txq0_cw_max, volatile uint32_t* sw_txq0_cw_min)
{
	uint32_t tmp;

	tmp = mac_txq0_cw_get();
	*sw_txq0_cw_max = (tmp & ((uint32_t)SW_TXQ0_CW_MAX_MASK)) >> SW_TXQ0_CW_MAX_OFFSET;
	*sw_txq0_cw_min = (tmp & ((uint32_t)SW_TXQ0_CW_MIN_MASK)) >> SW_TXQ0_CW_MIN_OFFSET;
}
static __inline void mac_txq0_cw_force_sw_txq0_cw_rand_force_en_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_CW_FORCE_ADDR);
	tmp &= ~SW_TXQ0_CW_RAND_FORCE_EN_MASK;
	tmp |= (value << SW_TXQ0_CW_RAND_FORCE_EN_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_CW_FORCE_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_CW_FORCE_ADDR), tmp);
}
static __inline uint32_t mac_txq0_cw_force_sw_txq0_cw_rand_force_en_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_CW_FORCE_ADDR)) & SW_TXQ0_CW_RAND_FORCE_EN_MASK) >> SW_TXQ0_CW_RAND_FORCE_EN_OFFSET;
}
static __inline void mac_txq0_cw_force_sw_txq0_cw_rand_force_val_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_CW_FORCE_ADDR);
	tmp &= ~SW_TXQ0_CW_RAND_FORCE_VAL_MASK;
	tmp |= (value << SW_TXQ0_CW_RAND_FORCE_VAL_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_CW_FORCE_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_CW_FORCE_ADDR), tmp);
}
static __inline uint32_t mac_txq0_cw_force_sw_txq0_cw_rand_force_val_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_CW_FORCE_ADDR)) & SW_TXQ0_CW_RAND_FORCE_VAL_MASK) >> SW_TXQ0_CW_RAND_FORCE_VAL_OFFSET;
}
static __inline void mac_txq0_cw_force_set(uint32_t value)
{
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_CW_FORCE_ADDR, value);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_CW_FORCE_ADDR), value);
}
static __inline uint32_t mac_txq0_cw_force_get(void)
{
	return (WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_CW_FORCE_ADDR));
}
static __inline void mac_txq0_cw_force_pack(uint32_t sw_txq0_cw_rand_force_en, uint32_t sw_txq0_cw_rand_force_val)
{
	uint32_t tmp;

	assert((((uint32_t)sw_txq0_cw_rand_force_en << SW_TXQ0_CW_RAND_FORCE_EN_OFFSET) & ~((uint32_t)SW_TXQ0_CW_RAND_FORCE_EN_MASK)) == 0);
	assert((((uint32_t)sw_txq0_cw_rand_force_val << SW_TXQ0_CW_RAND_FORCE_VAL_OFFSET) & ~((uint32_t)SW_TXQ0_CW_RAND_FORCE_VAL_MASK)) == 0);
	tmp =
		((uint32_t)sw_txq0_cw_rand_force_en << SW_TXQ0_CW_RAND_FORCE_EN_OFFSET) |
		((uint32_t)sw_txq0_cw_rand_force_val << SW_TXQ0_CW_RAND_FORCE_VAL_OFFSET) ;
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_CW_FORCE_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_CW_FORCE_ADDR), tmp);
}
static __inline void mac_txq0_cw_force_unpack(volatile uint32_t* sw_txq0_cw_rand_force_en, volatile uint32_t* sw_txq0_cw_rand_force_val)
{
	uint32_t tmp;

	tmp = mac_txq0_cw_force_get();
	*sw_txq0_cw_rand_force_en = (tmp & ((uint32_t)SW_TXQ0_CW_RAND_FORCE_EN_MASK)) >> SW_TXQ0_CW_RAND_FORCE_EN_OFFSET;
	*sw_txq0_cw_rand_force_val = (tmp & ((uint32_t)SW_TXQ0_CW_RAND_FORCE_VAL_MASK)) >> SW_TXQ0_CW_RAND_FORCE_VAL_OFFSET;
}
static __inline void mac_txq0_bkoff_ctrl_sw_txq0_bkoff_seed_load_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_BKOFF_CTRL_ADDR);
	tmp &= ~SW_TXQ0_BKOFF_SEED_LOAD_MASK;
	tmp |= (value << SW_TXQ0_BKOFF_SEED_LOAD_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_BKOFF_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_BKOFF_CTRL_ADDR), tmp);
}
static __inline void mac_txq0_bkoff_ctrl_sw_txq0_bkoff_seed_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_BKOFF_CTRL_ADDR);
	tmp &= ~SW_TXQ0_BKOFF_SEED_MASK;
	tmp |= (value << SW_TXQ0_BKOFF_SEED_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_BKOFF_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_BKOFF_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_txq0_bkoff_ctrl_sw_txq0_bkoff_seed_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_BKOFF_CTRL_ADDR)) & SW_TXQ0_BKOFF_SEED_MASK) >> SW_TXQ0_BKOFF_SEED_OFFSET;
}
static __inline void mac_txq0_bkoff_ctrl_set(uint32_t value)
{
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_BKOFF_CTRL_ADDR, value);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_BKOFF_CTRL_ADDR), value);
}
static __inline uint32_t mac_txq0_bkoff_ctrl_get(void)
{
	return (WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_BKOFF_CTRL_ADDR));
}
static __inline void mac_txq0_bkoff_ctrl_pack(uint32_t sw_txq0_bkoff_seed_load, uint32_t sw_txq0_bkoff_seed)
{
	uint32_t tmp;

	assert((((uint32_t)sw_txq0_bkoff_seed_load << SW_TXQ0_BKOFF_SEED_LOAD_OFFSET) & ~((uint32_t)SW_TXQ0_BKOFF_SEED_LOAD_MASK)) == 0);
	assert((((uint32_t)sw_txq0_bkoff_seed << SW_TXQ0_BKOFF_SEED_OFFSET) & ~((uint32_t)SW_TXQ0_BKOFF_SEED_MASK)) == 0);
	tmp =
		((uint32_t)sw_txq0_bkoff_seed_load << SW_TXQ0_BKOFF_SEED_LOAD_OFFSET) |
		((uint32_t)sw_txq0_bkoff_seed << SW_TXQ0_BKOFF_SEED_OFFSET) ;
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_BKOFF_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_BKOFF_CTRL_ADDR), tmp);
}
static __inline void mac_txq0_bkoff_ctrl_unpack(volatile uint32_t* sw_txq0_bkoff_seed)
{
	uint32_t tmp;

	tmp = mac_txq0_bkoff_ctrl_get();
	*sw_txq0_bkoff_seed = (tmp & ((uint32_t)SW_TXQ0_BKOFF_SEED_MASK)) >> SW_TXQ0_BKOFF_SEED_OFFSET;
}
static __inline void mac_txq0_period_sw_txq0_txop_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_PERIOD_ADDR);
	tmp &= ~SW_TXQ0_TXOP_MASK;
	tmp |= (value << SW_TXQ0_TXOP_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_PERIOD_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_PERIOD_ADDR), tmp);
}
static __inline uint32_t mac_txq0_period_sw_txq0_txop_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_PERIOD_ADDR)) & SW_TXQ0_TXOP_MASK) >> SW_TXQ0_TXOP_OFFSET;
}
static __inline void mac_txq0_period_set(uint32_t value)
{
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_PERIOD_ADDR, value);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_PERIOD_ADDR), value);
}
static __inline uint32_t mac_txq0_period_get(void)
{
	return (WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_PERIOD_ADDR));
}
static __inline void mac_txq0_period_pack(uint32_t sw_txq0_txop)
{
	uint32_t tmp;

	assert((((uint32_t)sw_txq0_txop << SW_TXQ0_TXOP_OFFSET) & ~((uint32_t)SW_TXQ0_TXOP_MASK)) == 0);
	tmp =
		((uint32_t)sw_txq0_txop << SW_TXQ0_TXOP_OFFSET) ;
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_PERIOD_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_PERIOD_ADDR), tmp);
}
static __inline void mac_txq0_period_unpack(volatile uint32_t* sw_txq0_txop)
{
	uint32_t tmp;

	tmp = mac_txq0_period_get();
	*sw_txq0_txop = (tmp & ((uint32_t)SW_TXQ0_TXOP_MASK)) >> SW_TXQ0_TXOP_OFFSET;
}
static __inline void mac_txq0_int_ctrl_sw_txq0_desc_done_int_mitigation_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_INT_CTRL_ADDR);
	tmp &= ~SW_TXQ0_DESC_DONE_INT_MITIGATION_MASK;
	tmp |= (value << SW_TXQ0_DESC_DONE_INT_MITIGATION_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_INT_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_INT_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_txq0_int_ctrl_sw_txq0_desc_done_int_mitigation_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_INT_CTRL_ADDR)) & SW_TXQ0_DESC_DONE_INT_MITIGATION_MASK) >> SW_TXQ0_DESC_DONE_INT_MITIGATION_OFFSET;
}
static __inline void mac_txq0_int_ctrl_sw_txq0_desc_done_int_timeout_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_INT_CTRL_ADDR);
	tmp &= ~SW_TXQ0_DESC_DONE_INT_TIMEOUT_MASK;
	tmp |= (value << SW_TXQ0_DESC_DONE_INT_TIMEOUT_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_INT_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_INT_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_txq0_int_ctrl_sw_txq0_desc_done_int_timeout_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_INT_CTRL_ADDR)) & SW_TXQ0_DESC_DONE_INT_TIMEOUT_MASK) >> SW_TXQ0_DESC_DONE_INT_TIMEOUT_OFFSET;
}
static __inline void mac_txq0_int_ctrl_set(uint32_t value)
{
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_INT_CTRL_ADDR, value);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_INT_CTRL_ADDR), value);
}
static __inline uint32_t mac_txq0_int_ctrl_get(void)
{
	return (WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_INT_CTRL_ADDR));
}
static __inline void mac_txq0_int_ctrl_pack(uint32_t sw_txq0_desc_done_int_mitigation, uint32_t sw_txq0_desc_done_int_timeout)
{
	uint32_t tmp;

	assert((((uint32_t)sw_txq0_desc_done_int_mitigation << SW_TXQ0_DESC_DONE_INT_MITIGATION_OFFSET) & ~((uint32_t)SW_TXQ0_DESC_DONE_INT_MITIGATION_MASK)) == 0);
	assert((((uint32_t)sw_txq0_desc_done_int_timeout << SW_TXQ0_DESC_DONE_INT_TIMEOUT_OFFSET) & ~((uint32_t)SW_TXQ0_DESC_DONE_INT_TIMEOUT_MASK)) == 0);
	tmp =
		((uint32_t)sw_txq0_desc_done_int_mitigation << SW_TXQ0_DESC_DONE_INT_MITIGATION_OFFSET) |
		((uint32_t)sw_txq0_desc_done_int_timeout << SW_TXQ0_DESC_DONE_INT_TIMEOUT_OFFSET) ;
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_INT_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_INT_CTRL_ADDR), tmp);
}
static __inline void mac_txq0_int_ctrl_unpack(volatile uint32_t* sw_txq0_desc_done_int_mitigation, volatile uint32_t* sw_txq0_desc_done_int_timeout)
{
	uint32_t tmp;

	tmp = mac_txq0_int_ctrl_get();
	*sw_txq0_desc_done_int_mitigation = (tmp & ((uint32_t)SW_TXQ0_DESC_DONE_INT_MITIGATION_MASK)) >> SW_TXQ0_DESC_DONE_INT_MITIGATION_OFFSET;
	*sw_txq0_desc_done_int_timeout = (tmp & ((uint32_t)SW_TXQ0_DESC_DONE_INT_TIMEOUT_MASK)) >> SW_TXQ0_DESC_DONE_INT_TIMEOUT_OFFSET;
}
static __inline uint32_t mac_txq0_sts_0_sw_ro_txq0_desc_access_fsm_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_STS_0_ADDR)) & SW_RO_TXQ0_DESC_ACCESS_FSM_MASK) >> SW_RO_TXQ0_DESC_ACCESS_FSM_OFFSET;
}
static __inline uint32_t mac_txq0_sts_0_sw_ro_txq0_chn_acess_fsm_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_STS_0_ADDR)) & SW_RO_TXQ0_CHN_ACESS_FSM_MASK) >> SW_RO_TXQ0_CHN_ACESS_FSM_OFFSET;
}
static __inline uint32_t mac_txq0_sts_0_get(void)
{
	return (WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_STS_0_ADDR));
}
static __inline void mac_txq0_sts_0_unpack(volatile uint32_t* sw_ro_txq0_desc_access_fsm, volatile uint32_t* sw_ro_txq0_chn_acess_fsm)
{
	uint32_t tmp;

	tmp = mac_txq0_sts_0_get();
	*sw_ro_txq0_desc_access_fsm = (tmp & ((uint32_t)SW_RO_TXQ0_DESC_ACCESS_FSM_MASK)) >> SW_RO_TXQ0_DESC_ACCESS_FSM_OFFSET;
	*sw_ro_txq0_chn_acess_fsm = (tmp & ((uint32_t)SW_RO_TXQ0_CHN_ACESS_FSM_MASK)) >> SW_RO_TXQ0_CHN_ACESS_FSM_OFFSET;
}
static __inline uint32_t mac_txq0_dbg_bus_0_sts_sw_txq0_dbg_bus_0_sts_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_DBG_BUS_0_STS_ADDR)) & SW_TXQ0_DBG_BUS_0_STS_MASK) >> SW_TXQ0_DBG_BUS_0_STS_OFFSET;
}
static __inline uint32_t mac_txq0_dbg_bus_0_sts_get(void)
{
	return (WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_DBG_BUS_0_STS_ADDR));
}
static __inline void mac_txq0_dbg_bus_0_sts_unpack(volatile uint32_t* sw_txq0_dbg_bus_0_sts)
{
	uint32_t tmp;

	tmp = mac_txq0_dbg_bus_0_sts_get();
	*sw_txq0_dbg_bus_0_sts = (tmp & ((uint32_t)SW_TXQ0_DBG_BUS_0_STS_MASK)) >> SW_TXQ0_DBG_BUS_0_STS_OFFSET;
}
static __inline void mac_txq0_dbg_bus_0_clr_sw_txq0_dbg_bus_0_clr_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_DBG_BUS_0_CLR_ADDR);
	tmp &= ~SW_TXQ0_DBG_BUS_0_CLR_MASK;
	tmp |= (value << SW_TXQ0_DBG_BUS_0_CLR_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_DBG_BUS_0_CLR_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_DBG_BUS_0_CLR_ADDR), tmp);
}
static __inline void mac_txq0_dbg_bus_0_clr_set(uint32_t value)
{
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_DBG_BUS_0_CLR_ADDR, value);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_DBG_BUS_0_CLR_ADDR), value);
}
static __inline void mac_txq0_dbg_bus_0_clr_pack(uint32_t sw_txq0_dbg_bus_0_clr)
{
	uint32_t tmp;

	assert((((uint32_t)sw_txq0_dbg_bus_0_clr << SW_TXQ0_DBG_BUS_0_CLR_OFFSET) & ~((uint32_t)SW_TXQ0_DBG_BUS_0_CLR_MASK)) == 0);
	tmp =
		((uint32_t)sw_txq0_dbg_bus_0_clr << SW_TXQ0_DBG_BUS_0_CLR_OFFSET) ;
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_DBG_BUS_0_CLR_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_DBG_BUS_0_CLR_ADDR), tmp);
}
static __inline void mac_txq0_tx_stat_sts_clr_sw_txq0_rts_tx_ok_cnt_clr_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_TX_STAT_STS_CLR_ADDR);
	tmp &= ~SW_TXQ0_RTS_TX_OK_CNT_CLR_MASK;
	tmp |= (value << SW_TXQ0_RTS_TX_OK_CNT_CLR_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_TX_STAT_STS_CLR_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_TX_STAT_STS_CLR_ADDR), tmp);
}
static __inline void mac_txq0_tx_stat_sts_clr_sw_txq0_cts_tx_ok_cnt_clr_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_TX_STAT_STS_CLR_ADDR);
	tmp &= ~SW_TXQ0_CTS_TX_OK_CNT_CLR_MASK;
	tmp |= (value << SW_TXQ0_CTS_TX_OK_CNT_CLR_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_TX_STAT_STS_CLR_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_TX_STAT_STS_CLR_ADDR), tmp);
}
static __inline void mac_txq0_tx_stat_sts_clr_sw_txq0_frame_tx_ok_cnt_clr_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_TX_STAT_STS_CLR_ADDR);
	tmp &= ~SW_TXQ0_FRAME_TX_OK_CNT_CLR_MASK;
	tmp |= (value << SW_TXQ0_FRAME_TX_OK_CNT_CLR_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_TX_STAT_STS_CLR_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_TX_STAT_STS_CLR_ADDR), tmp);
}
static __inline void mac_txq0_tx_stat_sts_clr_sw_txq0_cfend_tx_ok_cnt_clr_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_TX_STAT_STS_CLR_ADDR);
	tmp &= ~SW_TXQ0_CFEND_TX_OK_CNT_CLR_MASK;
	tmp |= (value << SW_TXQ0_CFEND_TX_OK_CNT_CLR_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_TX_STAT_STS_CLR_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_TX_STAT_STS_CLR_ADDR), tmp);
}
static __inline void mac_txq0_tx_stat_sts_clr_sw_txq0_rts_tx_fail_cnt_clr_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_TX_STAT_STS_CLR_ADDR);
	tmp &= ~SW_TXQ0_RTS_TX_FAIL_CNT_CLR_MASK;
	tmp |= (value << SW_TXQ0_RTS_TX_FAIL_CNT_CLR_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_TX_STAT_STS_CLR_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_TX_STAT_STS_CLR_ADDR), tmp);
}
static __inline void mac_txq0_tx_stat_sts_clr_sw_txq0_frame_tx_fail_cnt_clr_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_TX_STAT_STS_CLR_ADDR);
	tmp &= ~SW_TXQ0_FRAME_TX_FAIL_CNT_CLR_MASK;
	tmp |= (value << SW_TXQ0_FRAME_TX_FAIL_CNT_CLR_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_TX_STAT_STS_CLR_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_TX_STAT_STS_CLR_ADDR), tmp);
}
static __inline void mac_txq0_tx_stat_sts_clr_set(uint32_t value)
{
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_TX_STAT_STS_CLR_ADDR, value);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_TX_STAT_STS_CLR_ADDR), value);
}
static __inline uint32_t mac_txq0_tx_stat_sts_clr_get(void)
{
	return (WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_TX_STAT_STS_CLR_ADDR));
}
static __inline void mac_txq0_tx_stat_sts_clr_pack(uint32_t sw_txq0_rts_tx_ok_cnt_clr, uint32_t sw_txq0_cts_tx_ok_cnt_clr, uint32_t sw_txq0_frame_tx_ok_cnt_clr, uint32_t sw_txq0_cfend_tx_ok_cnt_clr, uint32_t sw_txq0_rts_tx_fail_cnt_clr, uint32_t sw_txq0_frame_tx_fail_cnt_clr)
{
	uint32_t tmp;

	assert((((uint32_t)sw_txq0_rts_tx_ok_cnt_clr << SW_TXQ0_RTS_TX_OK_CNT_CLR_OFFSET) & ~((uint32_t)SW_TXQ0_RTS_TX_OK_CNT_CLR_MASK)) == 0);
	assert((((uint32_t)sw_txq0_cts_tx_ok_cnt_clr << SW_TXQ0_CTS_TX_OK_CNT_CLR_OFFSET) & ~((uint32_t)SW_TXQ0_CTS_TX_OK_CNT_CLR_MASK)) == 0);
	assert((((uint32_t)sw_txq0_frame_tx_ok_cnt_clr << SW_TXQ0_FRAME_TX_OK_CNT_CLR_OFFSET) & ~((uint32_t)SW_TXQ0_FRAME_TX_OK_CNT_CLR_MASK)) == 0);
	assert((((uint32_t)sw_txq0_cfend_tx_ok_cnt_clr << SW_TXQ0_CFEND_TX_OK_CNT_CLR_OFFSET) & ~((uint32_t)SW_TXQ0_CFEND_TX_OK_CNT_CLR_MASK)) == 0);
	assert((((uint32_t)sw_txq0_rts_tx_fail_cnt_clr << SW_TXQ0_RTS_TX_FAIL_CNT_CLR_OFFSET) & ~((uint32_t)SW_TXQ0_RTS_TX_FAIL_CNT_CLR_MASK)) == 0);
	assert((((uint32_t)sw_txq0_frame_tx_fail_cnt_clr << SW_TXQ0_FRAME_TX_FAIL_CNT_CLR_OFFSET) & ~((uint32_t)SW_TXQ0_FRAME_TX_FAIL_CNT_CLR_MASK)) == 0);
	tmp =
		((uint32_t)sw_txq0_rts_tx_ok_cnt_clr << SW_TXQ0_RTS_TX_OK_CNT_CLR_OFFSET) |
		((uint32_t)sw_txq0_cts_tx_ok_cnt_clr << SW_TXQ0_CTS_TX_OK_CNT_CLR_OFFSET) |
		((uint32_t)sw_txq0_frame_tx_ok_cnt_clr << SW_TXQ0_FRAME_TX_OK_CNT_CLR_OFFSET) |
		((uint32_t)sw_txq0_cfend_tx_ok_cnt_clr << SW_TXQ0_CFEND_TX_OK_CNT_CLR_OFFSET) |
		((uint32_t)sw_txq0_rts_tx_fail_cnt_clr << SW_TXQ0_RTS_TX_FAIL_CNT_CLR_OFFSET) |
		((uint32_t)sw_txq0_frame_tx_fail_cnt_clr << SW_TXQ0_FRAME_TX_FAIL_CNT_CLR_OFFSET) ;
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_TX_STAT_STS_CLR_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_TX_STAT_STS_CLR_ADDR), tmp);
}
static __inline uint32_t mac_txq0_tx_stat_sts_0_sw_ro_txq0_rts_tx_ok_cnt_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_TX_STAT_STS_0_ADDR)) & SW_RO_TXQ0_RTS_TX_OK_CNT_MASK) >> SW_RO_TXQ0_RTS_TX_OK_CNT_OFFSET;
}
static __inline uint32_t mac_txq0_tx_stat_sts_0_sw_ro_txq0_cts_tx_ok_cnt_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_TX_STAT_STS_0_ADDR)) & SW_RO_TXQ0_CTS_TX_OK_CNT_MASK) >> SW_RO_TXQ0_CTS_TX_OK_CNT_OFFSET;
}
static __inline uint32_t mac_txq0_tx_stat_sts_0_get(void)
{
	return (WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_TX_STAT_STS_0_ADDR));
}
static __inline void mac_txq0_tx_stat_sts_0_unpack(volatile uint32_t* sw_ro_txq0_rts_tx_ok_cnt, volatile uint32_t* sw_ro_txq0_cts_tx_ok_cnt)
{
	uint32_t tmp;

	tmp = mac_txq0_tx_stat_sts_0_get();
	*sw_ro_txq0_rts_tx_ok_cnt = (tmp & ((uint32_t)SW_RO_TXQ0_RTS_TX_OK_CNT_MASK)) >> SW_RO_TXQ0_RTS_TX_OK_CNT_OFFSET;
	*sw_ro_txq0_cts_tx_ok_cnt = (tmp & ((uint32_t)SW_RO_TXQ0_CTS_TX_OK_CNT_MASK)) >> SW_RO_TXQ0_CTS_TX_OK_CNT_OFFSET;
}
static __inline uint32_t mac_txq0_tx_stat_sts_1_sw_ro_txq0_frame_tx_ok_cnt_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_TX_STAT_STS_1_ADDR)) & SW_RO_TXQ0_FRAME_TX_OK_CNT_MASK) >> SW_RO_TXQ0_FRAME_TX_OK_CNT_OFFSET;
}
static __inline uint32_t mac_txq0_tx_stat_sts_1_sw_ro_txq0_cfend_tx_ok_cnt_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_TX_STAT_STS_1_ADDR)) & SW_RO_TXQ0_CFEND_TX_OK_CNT_MASK) >> SW_RO_TXQ0_CFEND_TX_OK_CNT_OFFSET;
}
static __inline uint32_t mac_txq0_tx_stat_sts_1_get(void)
{
	return (WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_TX_STAT_STS_1_ADDR));
}
static __inline void mac_txq0_tx_stat_sts_1_unpack(volatile uint32_t* sw_ro_txq0_frame_tx_ok_cnt, volatile uint32_t* sw_ro_txq0_cfend_tx_ok_cnt)
{
	uint32_t tmp;

	tmp = mac_txq0_tx_stat_sts_1_get();
	*sw_ro_txq0_frame_tx_ok_cnt = (tmp & ((uint32_t)SW_RO_TXQ0_FRAME_TX_OK_CNT_MASK)) >> SW_RO_TXQ0_FRAME_TX_OK_CNT_OFFSET;
	*sw_ro_txq0_cfend_tx_ok_cnt = (tmp & ((uint32_t)SW_RO_TXQ0_CFEND_TX_OK_CNT_MASK)) >> SW_RO_TXQ0_CFEND_TX_OK_CNT_OFFSET;
}
static __inline uint32_t mac_txq0_tx_stat_sts_2_sw_ro_txq0_rts_tx_fail_cnt_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_TX_STAT_STS_2_ADDR)) & SW_RO_TXQ0_RTS_TX_FAIL_CNT_MASK) >> SW_RO_TXQ0_RTS_TX_FAIL_CNT_OFFSET;
}
static __inline uint32_t mac_txq0_tx_stat_sts_2_sw_ro_txq0_frame_tx_fail_cnt_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_TX_STAT_STS_2_ADDR)) & SW_RO_TXQ0_FRAME_TX_FAIL_CNT_MASK) >> SW_RO_TXQ0_FRAME_TX_FAIL_CNT_OFFSET;
}
static __inline uint32_t mac_txq0_tx_stat_sts_2_get(void)
{
	return (WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_TX_STAT_STS_2_ADDR));
}
static __inline void mac_txq0_tx_stat_sts_2_unpack(volatile uint32_t* sw_ro_txq0_rts_tx_fail_cnt, volatile uint32_t* sw_ro_txq0_frame_tx_fail_cnt)
{
	uint32_t tmp;

	tmp = mac_txq0_tx_stat_sts_2_get();
	*sw_ro_txq0_rts_tx_fail_cnt = (tmp & ((uint32_t)SW_RO_TXQ0_RTS_TX_FAIL_CNT_MASK)) >> SW_RO_TXQ0_RTS_TX_FAIL_CNT_OFFSET;
	*sw_ro_txq0_frame_tx_fail_cnt = (tmp & ((uint32_t)SW_RO_TXQ0_FRAME_TX_FAIL_CNT_MASK)) >> SW_RO_TXQ0_FRAME_TX_FAIL_CNT_OFFSET;
}
static __inline uint32_t mac_txq0_tx_stat_sts_3_sw_ro_txq0_tx_desc_ptr_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_TX_STAT_STS_3_ADDR)) & SW_RO_TXQ0_TX_DESC_PTR_MASK) >> SW_RO_TXQ0_TX_DESC_PTR_OFFSET;
}
static __inline uint32_t mac_txq0_tx_stat_sts_3_get(void)
{
	return (WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_TX_STAT_STS_3_ADDR));
}
static __inline void mac_txq0_tx_stat_sts_3_unpack(volatile uint32_t* sw_ro_txq0_tx_desc_ptr)
{
	uint32_t tmp;

	tmp = mac_txq0_tx_stat_sts_3_get();
	*sw_ro_txq0_tx_desc_ptr = (tmp & ((uint32_t)SW_RO_TXQ0_TX_DESC_PTR_MASK)) >> SW_RO_TXQ0_TX_DESC_PTR_OFFSET;
}
static __inline uint32_t mac_txq0_pcs_busy_monitor_stat_sw_ro_txq0_pcs_busy_stuck_tx_cnt_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_PCS_BUSY_MONITOR_STAT_ADDR)) & SW_RO_TXQ0_PCS_BUSY_STUCK_TX_CNT_MASK) >> SW_RO_TXQ0_PCS_BUSY_STUCK_TX_CNT_OFFSET;
}
static __inline uint32_t mac_txq0_pcs_busy_monitor_stat_get(void)
{
	return (WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_PCS_BUSY_MONITOR_STAT_ADDR));
}
static __inline void mac_txq0_pcs_busy_monitor_stat_unpack(volatile uint32_t* sw_ro_txq0_pcs_busy_stuck_tx_cnt)
{
	uint32_t tmp;

	tmp = mac_txq0_pcs_busy_monitor_stat_get();
	*sw_ro_txq0_pcs_busy_stuck_tx_cnt = (tmp & ((uint32_t)SW_RO_TXQ0_PCS_BUSY_STUCK_TX_CNT_MASK)) >> SW_RO_TXQ0_PCS_BUSY_STUCK_TX_CNT_OFFSET;
}
static __inline void mac_txq0_dbg_cw_ctrl_sw_txq0_dbg_cw_clr_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_DBG_CW_CTRL_ADDR);
	tmp &= ~SW_TXQ0_DBG_CW_CLR_MASK;
	tmp |= (value << SW_TXQ0_DBG_CW_CLR_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_DBG_CW_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_DBG_CW_CTRL_ADDR), tmp);
}
static __inline void mac_txq0_dbg_cw_ctrl_set(uint32_t value)
{
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_DBG_CW_CTRL_ADDR, value);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_DBG_CW_CTRL_ADDR), value);
}
static __inline uint32_t mac_txq0_dbg_cw_ctrl_get(void)
{
	return (WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_DBG_CW_CTRL_ADDR));
}
static __inline void mac_txq0_dbg_cw_ctrl_pack(uint32_t sw_txq0_dbg_cw_clr)
{
	uint32_t tmp;

	assert((((uint32_t)sw_txq0_dbg_cw_clr << SW_TXQ0_DBG_CW_CLR_OFFSET) & ~((uint32_t)SW_TXQ0_DBG_CW_CLR_MASK)) == 0);
	tmp =
		((uint32_t)sw_txq0_dbg_cw_clr << SW_TXQ0_DBG_CW_CLR_OFFSET) ;
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_DBG_CW_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_DBG_CW_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_txq0_dbg_cw_sts_sw_ro_txq0_cw_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_DBG_CW_STS_ADDR)) & SW_RO_TXQ0_CW_MASK) >> SW_RO_TXQ0_CW_OFFSET;
}
static __inline uint32_t mac_txq0_dbg_cw_sts_sw_ro_txq0_cw_rtl_max_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_DBG_CW_STS_ADDR)) & SW_RO_TXQ0_CW_RTL_MAX_MASK) >> SW_RO_TXQ0_CW_RTL_MAX_OFFSET;
}
static __inline uint32_t mac_txq0_dbg_cw_sts_get(void)
{
	return (WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ0_DBG_CW_STS_ADDR));
}
static __inline void mac_txq0_dbg_cw_sts_unpack(volatile uint32_t* sw_ro_txq0_cw, volatile uint32_t* sw_ro_txq0_cw_rtl_max)
{
	uint32_t tmp;

	tmp = mac_txq0_dbg_cw_sts_get();
	*sw_ro_txq0_cw = (tmp & ((uint32_t)SW_RO_TXQ0_CW_MASK)) >> SW_RO_TXQ0_CW_OFFSET;
	*sw_ro_txq0_cw_rtl_max = (tmp & ((uint32_t)SW_RO_TXQ0_CW_RTL_MAX_MASK)) >> SW_RO_TXQ0_CW_RTL_MAX_OFFSET;
}
static __inline void mac_txq1_enable_sw_txq1_srst_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_ENABLE_ADDR);
	tmp &= ~SW_TXQ1_SRST_MASK;
	tmp |= (value << SW_TXQ1_SRST_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_ENABLE_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_ENABLE_ADDR), tmp);
}
static __inline void mac_txq1_enable_sw_txq1_dbg_info_clr_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_ENABLE_ADDR);
	tmp &= ~SW_TXQ1_DBG_INFO_CLR_MASK;
	tmp |= (value << SW_TXQ1_DBG_INFO_CLR_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_ENABLE_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_ENABLE_ADDR), tmp);
}
static __inline void mac_txq1_enable_sw_txq1_dummy_trig_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_ENABLE_ADDR);
	tmp &= ~SW_TXQ1_DUMMY_TRIG_MASK;
	tmp |= (value << SW_TXQ1_DUMMY_TRIG_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_ENABLE_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_ENABLE_ADDR), tmp);
}
static __inline void mac_txq1_enable_sw_txq1_dis_pls_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_ENABLE_ADDR);
	tmp &= ~SW_TXQ1_DIS_PLS_MASK;
	tmp |= (value << SW_TXQ1_DIS_PLS_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_ENABLE_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_ENABLE_ADDR), tmp);
}
static __inline void mac_txq1_enable_sw_txq1_en_pls_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_ENABLE_ADDR);
	tmp &= ~SW_TXQ1_EN_PLS_MASK;
	tmp |= (value << SW_TXQ1_EN_PLS_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_ENABLE_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_ENABLE_ADDR), tmp);
}
static __inline void mac_txq1_enable_set(uint32_t value)
{
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_ENABLE_ADDR, value);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_ENABLE_ADDR), value);
}
static __inline uint32_t mac_txq1_enable_get(void)
{
	return (WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_ENABLE_ADDR));
}
static __inline void mac_txq1_enable_pack(uint32_t sw_txq1_srst, uint32_t sw_txq1_dbg_info_clr, uint32_t sw_txq1_dummy_trig, uint32_t sw_txq1_dis_pls, uint32_t sw_txq1_en_pls)
{
	uint32_t tmp;

	assert((((uint32_t)sw_txq1_srst << SW_TXQ1_SRST_OFFSET) & ~((uint32_t)SW_TXQ1_SRST_MASK)) == 0);
	assert((((uint32_t)sw_txq1_dbg_info_clr << SW_TXQ1_DBG_INFO_CLR_OFFSET) & ~((uint32_t)SW_TXQ1_DBG_INFO_CLR_MASK)) == 0);
	assert((((uint32_t)sw_txq1_dummy_trig << SW_TXQ1_DUMMY_TRIG_OFFSET) & ~((uint32_t)SW_TXQ1_DUMMY_TRIG_MASK)) == 0);
	assert((((uint32_t)sw_txq1_dis_pls << SW_TXQ1_DIS_PLS_OFFSET) & ~((uint32_t)SW_TXQ1_DIS_PLS_MASK)) == 0);
	assert((((uint32_t)sw_txq1_en_pls << SW_TXQ1_EN_PLS_OFFSET) & ~((uint32_t)SW_TXQ1_EN_PLS_MASK)) == 0);
	tmp =
		((uint32_t)sw_txq1_srst << SW_TXQ1_SRST_OFFSET) |
		((uint32_t)sw_txq1_dbg_info_clr << SW_TXQ1_DBG_INFO_CLR_OFFSET) |
		((uint32_t)sw_txq1_dummy_trig << SW_TXQ1_DUMMY_TRIG_OFFSET) |
		((uint32_t)sw_txq1_dis_pls << SW_TXQ1_DIS_PLS_OFFSET) |
		((uint32_t)sw_txq1_en_pls << SW_TXQ1_EN_PLS_OFFSET) ;
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_ENABLE_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_ENABLE_ADDR), tmp);
}
static __inline void mac_txq1_ctrl_sw_txq1_dummy_int_en_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_CTRL_ADDR);
	tmp &= ~SW_TXQ1_DUMMY_INT_EN_MASK;
	tmp |= (value << SW_TXQ1_DUMMY_INT_EN_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_txq1_ctrl_sw_txq1_dummy_int_en_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_CTRL_ADDR)) & SW_TXQ1_DUMMY_INT_EN_MASK) >> SW_TXQ1_DUMMY_INT_EN_OFFSET;
}
static __inline void mac_txq1_ctrl_sw_txq1_hw_frame_fc_power_mode_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_CTRL_ADDR);
	tmp &= ~SW_TXQ1_HW_FRAME_FC_POWER_MODE_MASK;
	tmp |= (value << SW_TXQ1_HW_FRAME_FC_POWER_MODE_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_txq1_ctrl_sw_txq1_hw_frame_fc_power_mode_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_CTRL_ADDR)) & SW_TXQ1_HW_FRAME_FC_POWER_MODE_MASK) >> SW_TXQ1_HW_FRAME_FC_POWER_MODE_OFFSET;
}
static __inline void mac_txq1_ctrl_sw_txq1_cf_end_en_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_CTRL_ADDR);
	tmp &= ~SW_TXQ1_CF_END_EN_MASK;
	tmp |= (value << SW_TXQ1_CF_END_EN_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_txq1_ctrl_sw_txq1_cf_end_en_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_CTRL_ADDR)) & SW_TXQ1_CF_END_EN_MASK) >> SW_TXQ1_CF_END_EN_OFFSET;
}
static __inline void mac_txq1_ctrl_sw_txq1_cw_min_set_pls_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_CTRL_ADDR);
	tmp &= ~SW_TXQ1_CW_MIN_SET_PLS_MASK;
	tmp |= (value << SW_TXQ1_CW_MIN_SET_PLS_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_CTRL_ADDR), tmp);
}
static __inline void mac_txq1_ctrl_set(uint32_t value)
{
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_CTRL_ADDR, value);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_CTRL_ADDR), value);
}
static __inline uint32_t mac_txq1_ctrl_get(void)
{
	return (WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_CTRL_ADDR));
}
static __inline void mac_txq1_ctrl_pack(uint32_t sw_txq1_dummy_int_en, uint32_t sw_txq1_hw_frame_fc_power_mode, uint32_t sw_txq1_cf_end_en, uint32_t sw_txq1_cw_min_set_pls)
{
	uint32_t tmp;

	assert((((uint32_t)sw_txq1_dummy_int_en << SW_TXQ1_DUMMY_INT_EN_OFFSET) & ~((uint32_t)SW_TXQ1_DUMMY_INT_EN_MASK)) == 0);
	assert((((uint32_t)sw_txq1_hw_frame_fc_power_mode << SW_TXQ1_HW_FRAME_FC_POWER_MODE_OFFSET) & ~((uint32_t)SW_TXQ1_HW_FRAME_FC_POWER_MODE_MASK)) == 0);
	assert((((uint32_t)sw_txq1_cf_end_en << SW_TXQ1_CF_END_EN_OFFSET) & ~((uint32_t)SW_TXQ1_CF_END_EN_MASK)) == 0);
	assert((((uint32_t)sw_txq1_cw_min_set_pls << SW_TXQ1_CW_MIN_SET_PLS_OFFSET) & ~((uint32_t)SW_TXQ1_CW_MIN_SET_PLS_MASK)) == 0);
	tmp =
		((uint32_t)sw_txq1_dummy_int_en << SW_TXQ1_DUMMY_INT_EN_OFFSET) |
		((uint32_t)sw_txq1_hw_frame_fc_power_mode << SW_TXQ1_HW_FRAME_FC_POWER_MODE_OFFSET) |
		((uint32_t)sw_txq1_cf_end_en << SW_TXQ1_CF_END_EN_OFFSET) |
		((uint32_t)sw_txq1_cw_min_set_pls << SW_TXQ1_CW_MIN_SET_PLS_OFFSET) ;
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_CTRL_ADDR), tmp);
}
static __inline void mac_txq1_ctrl_unpack(volatile uint32_t* sw_txq1_dummy_int_en, volatile uint32_t* sw_txq1_hw_frame_fc_power_mode, volatile uint32_t* sw_txq1_cf_end_en)
{
	uint32_t tmp;

	tmp = mac_txq1_ctrl_get();
	*sw_txq1_dummy_int_en = (tmp & ((uint32_t)SW_TXQ1_DUMMY_INT_EN_MASK)) >> SW_TXQ1_DUMMY_INT_EN_OFFSET;
	*sw_txq1_hw_frame_fc_power_mode = (tmp & ((uint32_t)SW_TXQ1_HW_FRAME_FC_POWER_MODE_MASK)) >> SW_TXQ1_HW_FRAME_FC_POWER_MODE_OFFSET;
	*sw_txq1_cf_end_en = (tmp & ((uint32_t)SW_TXQ1_CF_END_EN_MASK)) >> SW_TXQ1_CF_END_EN_OFFSET;
}
static __inline void mac_txq1_ifs_ctrl_sw_txq1_eifs_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_IFS_CTRL_ADDR);
	tmp &= ~SW_TXQ1_EIFS_MASK;
	tmp |= (value << SW_TXQ1_EIFS_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_IFS_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_IFS_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_txq1_ifs_ctrl_sw_txq1_eifs_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_IFS_CTRL_ADDR)) & SW_TXQ1_EIFS_MASK) >> SW_TXQ1_EIFS_OFFSET;
}
static __inline void mac_txq1_ifs_ctrl_sw_txq1_difs_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_IFS_CTRL_ADDR);
	tmp &= ~SW_TXQ1_DIFS_MASK;
	tmp |= (value << SW_TXQ1_DIFS_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_IFS_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_IFS_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_txq1_ifs_ctrl_sw_txq1_difs_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_IFS_CTRL_ADDR)) & SW_TXQ1_DIFS_MASK) >> SW_TXQ1_DIFS_OFFSET;
}
static __inline void mac_txq1_ifs_ctrl_set(uint32_t value)
{
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_IFS_CTRL_ADDR, value);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_IFS_CTRL_ADDR), value);
}
static __inline uint32_t mac_txq1_ifs_ctrl_get(void)
{
	return (WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_IFS_CTRL_ADDR));
}
static __inline void mac_txq1_ifs_ctrl_pack(uint32_t sw_txq1_eifs, uint32_t sw_txq1_difs)
{
	uint32_t tmp;

	assert((((uint32_t)sw_txq1_eifs << SW_TXQ1_EIFS_OFFSET) & ~((uint32_t)SW_TXQ1_EIFS_MASK)) == 0);
	assert((((uint32_t)sw_txq1_difs << SW_TXQ1_DIFS_OFFSET) & ~((uint32_t)SW_TXQ1_DIFS_MASK)) == 0);
	tmp =
		((uint32_t)sw_txq1_eifs << SW_TXQ1_EIFS_OFFSET) |
		((uint32_t)sw_txq1_difs << SW_TXQ1_DIFS_OFFSET) ;
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_IFS_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_IFS_CTRL_ADDR), tmp);
}
static __inline void mac_txq1_ifs_ctrl_unpack(volatile uint32_t* sw_txq1_eifs, volatile uint32_t* sw_txq1_difs)
{
	uint32_t tmp;

	tmp = mac_txq1_ifs_ctrl_get();
	*sw_txq1_eifs = (tmp & ((uint32_t)SW_TXQ1_EIFS_MASK)) >> SW_TXQ1_EIFS_OFFSET;
	*sw_txq1_difs = (tmp & ((uint32_t)SW_TXQ1_DIFS_MASK)) >> SW_TXQ1_DIFS_OFFSET;
}
static __inline void mac_txq1_rsp_time_sw_txq1_resp_timeout_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_RSP_TIME_ADDR);
	tmp &= ~SW_TXQ1_RESP_TIMEOUT_MASK;
	tmp |= (value << SW_TXQ1_RESP_TIMEOUT_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_RSP_TIME_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_RSP_TIME_ADDR), tmp);
}
static __inline uint32_t mac_txq1_rsp_time_sw_txq1_resp_timeout_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_RSP_TIME_ADDR)) & SW_TXQ1_RESP_TIMEOUT_MASK) >> SW_TXQ1_RESP_TIMEOUT_OFFSET;
}
static __inline void mac_txq1_rsp_time_set(uint32_t value)
{
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_RSP_TIME_ADDR, value);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_RSP_TIME_ADDR), value);
}
static __inline uint32_t mac_txq1_rsp_time_get(void)
{
	return (WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_RSP_TIME_ADDR));
}
static __inline void mac_txq1_rsp_time_pack(uint32_t sw_txq1_resp_timeout)
{
	uint32_t tmp;

	assert((((uint32_t)sw_txq1_resp_timeout << SW_TXQ1_RESP_TIMEOUT_OFFSET) & ~((uint32_t)SW_TXQ1_RESP_TIMEOUT_MASK)) == 0);
	tmp =
		((uint32_t)sw_txq1_resp_timeout << SW_TXQ1_RESP_TIMEOUT_OFFSET) ;
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_RSP_TIME_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_RSP_TIME_ADDR), tmp);
}
static __inline void mac_txq1_rsp_time_unpack(volatile uint32_t* sw_txq1_resp_timeout)
{
	uint32_t tmp;

	tmp = mac_txq1_rsp_time_get();
	*sw_txq1_resp_timeout = (tmp & ((uint32_t)SW_TXQ1_RESP_TIMEOUT_MASK)) >> SW_TXQ1_RESP_TIMEOUT_OFFSET;
}
static __inline void mac_txq1_ptr_sw_txq1_start_ptr_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_PTR_ADDR);
	tmp &= ~SW_TXQ1_START_PTR_MASK;
	tmp |= (value << SW_TXQ1_START_PTR_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_PTR_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_PTR_ADDR), tmp);
}
static __inline uint32_t mac_txq1_ptr_sw_txq1_start_ptr_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_PTR_ADDR)) & SW_TXQ1_START_PTR_MASK) >> SW_TXQ1_START_PTR_OFFSET;
}
static __inline void mac_txq1_ptr_set(uint32_t value)
{
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_PTR_ADDR, value);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_PTR_ADDR), value);
}
static __inline uint32_t mac_txq1_ptr_get(void)
{
	return (WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_PTR_ADDR));
}
static __inline void mac_txq1_ptr_pack(uint32_t sw_txq1_start_ptr)
{
	uint32_t tmp;

	assert((((uint32_t)sw_txq1_start_ptr << SW_TXQ1_START_PTR_OFFSET) & ~((uint32_t)SW_TXQ1_START_PTR_MASK)) == 0);
	tmp =
		((uint32_t)sw_txq1_start_ptr << SW_TXQ1_START_PTR_OFFSET) ;
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_PTR_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_PTR_ADDR), tmp);
}
static __inline void mac_txq1_ptr_unpack(volatile uint32_t* sw_txq1_start_ptr)
{
	uint32_t tmp;

	tmp = mac_txq1_ptr_get();
	*sw_txq1_start_ptr = (tmp & ((uint32_t)SW_TXQ1_START_PTR_MASK)) >> SW_TXQ1_START_PTR_OFFSET;
}
static __inline void mac_txq1_tx_timeout_sw_txq1_timeout_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_TX_TIMEOUT_ADDR);
	tmp &= ~SW_TXQ1_TIMEOUT_MASK;
	tmp |= (value << SW_TXQ1_TIMEOUT_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_TX_TIMEOUT_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_TX_TIMEOUT_ADDR), tmp);
}
static __inline uint32_t mac_txq1_tx_timeout_sw_txq1_timeout_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_TX_TIMEOUT_ADDR)) & SW_TXQ1_TIMEOUT_MASK) >> SW_TXQ1_TIMEOUT_OFFSET;
}
static __inline void mac_txq1_tx_timeout_set(uint32_t value)
{
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_TX_TIMEOUT_ADDR, value);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_TX_TIMEOUT_ADDR), value);
}
static __inline uint32_t mac_txq1_tx_timeout_get(void)
{
	return (WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_TX_TIMEOUT_ADDR));
}
static __inline void mac_txq1_tx_timeout_pack(uint32_t sw_txq1_timeout)
{
	uint32_t tmp;

	assert((((uint32_t)sw_txq1_timeout << SW_TXQ1_TIMEOUT_OFFSET) & ~((uint32_t)SW_TXQ1_TIMEOUT_MASK)) == 0);
	tmp =
		((uint32_t)sw_txq1_timeout << SW_TXQ1_TIMEOUT_OFFSET) ;
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_TX_TIMEOUT_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_TX_TIMEOUT_ADDR), tmp);
}
static __inline void mac_txq1_tx_timeout_unpack(volatile uint32_t* sw_txq1_timeout)
{
	uint32_t tmp;

	tmp = mac_txq1_tx_timeout_get();
	*sw_txq1_timeout = (tmp & ((uint32_t)SW_TXQ1_TIMEOUT_MASK)) >> SW_TXQ1_TIMEOUT_OFFSET;
}
static __inline void mac_txq1_cw_sw_txq1_cw_max_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_CW_ADDR);
	tmp &= ~SW_TXQ1_CW_MAX_MASK;
	tmp |= (value << SW_TXQ1_CW_MAX_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_CW_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_CW_ADDR), tmp);
}
static __inline uint32_t mac_txq1_cw_sw_txq1_cw_max_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_CW_ADDR)) & SW_TXQ1_CW_MAX_MASK) >> SW_TXQ1_CW_MAX_OFFSET;
}
static __inline void mac_txq1_cw_sw_txq1_cw_min_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_CW_ADDR);
	tmp &= ~SW_TXQ1_CW_MIN_MASK;
	tmp |= (value << SW_TXQ1_CW_MIN_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_CW_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_CW_ADDR), tmp);
}
static __inline uint32_t mac_txq1_cw_sw_txq1_cw_min_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_CW_ADDR)) & SW_TXQ1_CW_MIN_MASK) >> SW_TXQ1_CW_MIN_OFFSET;
}
static __inline void mac_txq1_cw_set(uint32_t value)
{
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_CW_ADDR, value);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_CW_ADDR), value);
}
static __inline uint32_t mac_txq1_cw_get(void)
{
	return (WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_CW_ADDR));
}
static __inline void mac_txq1_cw_pack(uint32_t sw_txq1_cw_max, uint32_t sw_txq1_cw_min)
{
	uint32_t tmp;

	assert((((uint32_t)sw_txq1_cw_max << SW_TXQ1_CW_MAX_OFFSET) & ~((uint32_t)SW_TXQ1_CW_MAX_MASK)) == 0);
	assert((((uint32_t)sw_txq1_cw_min << SW_TXQ1_CW_MIN_OFFSET) & ~((uint32_t)SW_TXQ1_CW_MIN_MASK)) == 0);
	tmp =
		((uint32_t)sw_txq1_cw_max << SW_TXQ1_CW_MAX_OFFSET) |
		((uint32_t)sw_txq1_cw_min << SW_TXQ1_CW_MIN_OFFSET) ;
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_CW_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_CW_ADDR), tmp);
}
static __inline void mac_txq1_cw_unpack(volatile uint32_t* sw_txq1_cw_max, volatile uint32_t* sw_txq1_cw_min)
{
	uint32_t tmp;

	tmp = mac_txq1_cw_get();
	*sw_txq1_cw_max = (tmp & ((uint32_t)SW_TXQ1_CW_MAX_MASK)) >> SW_TXQ1_CW_MAX_OFFSET;
	*sw_txq1_cw_min = (tmp & ((uint32_t)SW_TXQ1_CW_MIN_MASK)) >> SW_TXQ1_CW_MIN_OFFSET;
}
static __inline void mac_txq1_cw_force_sw_txq1_cw_rand_force_en_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_CW_FORCE_ADDR);
	tmp &= ~SW_TXQ1_CW_RAND_FORCE_EN_MASK;
	tmp |= (value << SW_TXQ1_CW_RAND_FORCE_EN_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_CW_FORCE_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_CW_FORCE_ADDR), tmp);
}
static __inline uint32_t mac_txq1_cw_force_sw_txq1_cw_rand_force_en_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_CW_FORCE_ADDR)) & SW_TXQ1_CW_RAND_FORCE_EN_MASK) >> SW_TXQ1_CW_RAND_FORCE_EN_OFFSET;
}
static __inline void mac_txq1_cw_force_sw_txq1_cw_rand_force_val_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_CW_FORCE_ADDR);
	tmp &= ~SW_TXQ1_CW_RAND_FORCE_VAL_MASK;
	tmp |= (value << SW_TXQ1_CW_RAND_FORCE_VAL_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_CW_FORCE_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_CW_FORCE_ADDR), tmp);
}
static __inline uint32_t mac_txq1_cw_force_sw_txq1_cw_rand_force_val_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_CW_FORCE_ADDR)) & SW_TXQ1_CW_RAND_FORCE_VAL_MASK) >> SW_TXQ1_CW_RAND_FORCE_VAL_OFFSET;
}
static __inline void mac_txq1_cw_force_set(uint32_t value)
{
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_CW_FORCE_ADDR, value);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_CW_FORCE_ADDR), value);
}
static __inline uint32_t mac_txq1_cw_force_get(void)
{
	return (WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_CW_FORCE_ADDR));
}
static __inline void mac_txq1_cw_force_pack(uint32_t sw_txq1_cw_rand_force_en, uint32_t sw_txq1_cw_rand_force_val)
{
	uint32_t tmp;

	assert((((uint32_t)sw_txq1_cw_rand_force_en << SW_TXQ1_CW_RAND_FORCE_EN_OFFSET) & ~((uint32_t)SW_TXQ1_CW_RAND_FORCE_EN_MASK)) == 0);
	assert((((uint32_t)sw_txq1_cw_rand_force_val << SW_TXQ1_CW_RAND_FORCE_VAL_OFFSET) & ~((uint32_t)SW_TXQ1_CW_RAND_FORCE_VAL_MASK)) == 0);
	tmp =
		((uint32_t)sw_txq1_cw_rand_force_en << SW_TXQ1_CW_RAND_FORCE_EN_OFFSET) |
		((uint32_t)sw_txq1_cw_rand_force_val << SW_TXQ1_CW_RAND_FORCE_VAL_OFFSET) ;
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_CW_FORCE_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_CW_FORCE_ADDR), tmp);
}
static __inline void mac_txq1_cw_force_unpack(volatile uint32_t* sw_txq1_cw_rand_force_en, volatile uint32_t* sw_txq1_cw_rand_force_val)
{
	uint32_t tmp;

	tmp = mac_txq1_cw_force_get();
	*sw_txq1_cw_rand_force_en = (tmp & ((uint32_t)SW_TXQ1_CW_RAND_FORCE_EN_MASK)) >> SW_TXQ1_CW_RAND_FORCE_EN_OFFSET;
	*sw_txq1_cw_rand_force_val = (tmp & ((uint32_t)SW_TXQ1_CW_RAND_FORCE_VAL_MASK)) >> SW_TXQ1_CW_RAND_FORCE_VAL_OFFSET;
}
static __inline void mac_txq1_bkoff_ctrl_sw_txq1_bkoff_seed_load_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_BKOFF_CTRL_ADDR);
	tmp &= ~SW_TXQ1_BKOFF_SEED_LOAD_MASK;
	tmp |= (value << SW_TXQ1_BKOFF_SEED_LOAD_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_BKOFF_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_BKOFF_CTRL_ADDR), tmp);
}
static __inline void mac_txq1_bkoff_ctrl_sw_txq1_bkoff_seed_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_BKOFF_CTRL_ADDR);
	tmp &= ~SW_TXQ1_BKOFF_SEED_MASK;
	tmp |= (value << SW_TXQ1_BKOFF_SEED_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_BKOFF_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_BKOFF_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_txq1_bkoff_ctrl_sw_txq1_bkoff_seed_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_BKOFF_CTRL_ADDR)) & SW_TXQ1_BKOFF_SEED_MASK) >> SW_TXQ1_BKOFF_SEED_OFFSET;
}
static __inline void mac_txq1_bkoff_ctrl_set(uint32_t value)
{
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_BKOFF_CTRL_ADDR, value);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_BKOFF_CTRL_ADDR), value);
}
static __inline uint32_t mac_txq1_bkoff_ctrl_get(void)
{
	return (WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_BKOFF_CTRL_ADDR));
}
static __inline void mac_txq1_bkoff_ctrl_pack(uint32_t sw_txq1_bkoff_seed_load, uint32_t sw_txq1_bkoff_seed)
{
	uint32_t tmp;

	assert((((uint32_t)sw_txq1_bkoff_seed_load << SW_TXQ1_BKOFF_SEED_LOAD_OFFSET) & ~((uint32_t)SW_TXQ1_BKOFF_SEED_LOAD_MASK)) == 0);
	assert((((uint32_t)sw_txq1_bkoff_seed << SW_TXQ1_BKOFF_SEED_OFFSET) & ~((uint32_t)SW_TXQ1_BKOFF_SEED_MASK)) == 0);
	tmp =
		((uint32_t)sw_txq1_bkoff_seed_load << SW_TXQ1_BKOFF_SEED_LOAD_OFFSET) |
		((uint32_t)sw_txq1_bkoff_seed << SW_TXQ1_BKOFF_SEED_OFFSET) ;
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_BKOFF_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_BKOFF_CTRL_ADDR), tmp);
}
static __inline void mac_txq1_bkoff_ctrl_unpack(volatile uint32_t* sw_txq1_bkoff_seed)
{
	uint32_t tmp;

	tmp = mac_txq1_bkoff_ctrl_get();
	*sw_txq1_bkoff_seed = (tmp & ((uint32_t)SW_TXQ1_BKOFF_SEED_MASK)) >> SW_TXQ1_BKOFF_SEED_OFFSET;
}
static __inline void mac_txq1_period_sw_txq1_txop_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_PERIOD_ADDR);
	tmp &= ~SW_TXQ1_TXOP_MASK;
	tmp |= (value << SW_TXQ1_TXOP_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_PERIOD_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_PERIOD_ADDR), tmp);
}
static __inline uint32_t mac_txq1_period_sw_txq1_txop_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_PERIOD_ADDR)) & SW_TXQ1_TXOP_MASK) >> SW_TXQ1_TXOP_OFFSET;
}
static __inline void mac_txq1_period_set(uint32_t value)
{
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_PERIOD_ADDR, value);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_PERIOD_ADDR), value);
}
static __inline uint32_t mac_txq1_period_get(void)
{
	return (WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_PERIOD_ADDR));
}
static __inline void mac_txq1_period_pack(uint32_t sw_txq1_txop)
{
	uint32_t tmp;

	assert((((uint32_t)sw_txq1_txop << SW_TXQ1_TXOP_OFFSET) & ~((uint32_t)SW_TXQ1_TXOP_MASK)) == 0);
	tmp =
		((uint32_t)sw_txq1_txop << SW_TXQ1_TXOP_OFFSET) ;
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_PERIOD_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_PERIOD_ADDR), tmp);
}
static __inline void mac_txq1_period_unpack(volatile uint32_t* sw_txq1_txop)
{
	uint32_t tmp;

	tmp = mac_txq1_period_get();
	*sw_txq1_txop = (tmp & ((uint32_t)SW_TXQ1_TXOP_MASK)) >> SW_TXQ1_TXOP_OFFSET;
}
static __inline void mac_txq1_int_ctrl_sw_txq1_desc_done_int_mitigation_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_INT_CTRL_ADDR);
	tmp &= ~SW_TXQ1_DESC_DONE_INT_MITIGATION_MASK;
	tmp |= (value << SW_TXQ1_DESC_DONE_INT_MITIGATION_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_INT_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_INT_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_txq1_int_ctrl_sw_txq1_desc_done_int_mitigation_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_INT_CTRL_ADDR)) & SW_TXQ1_DESC_DONE_INT_MITIGATION_MASK) >> SW_TXQ1_DESC_DONE_INT_MITIGATION_OFFSET;
}
static __inline void mac_txq1_int_ctrl_sw_txq1_desc_done_int_timeout_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_INT_CTRL_ADDR);
	tmp &= ~SW_TXQ1_DESC_DONE_INT_TIMEOUT_MASK;
	tmp |= (value << SW_TXQ1_DESC_DONE_INT_TIMEOUT_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_INT_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_INT_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_txq1_int_ctrl_sw_txq1_desc_done_int_timeout_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_INT_CTRL_ADDR)) & SW_TXQ1_DESC_DONE_INT_TIMEOUT_MASK) >> SW_TXQ1_DESC_DONE_INT_TIMEOUT_OFFSET;
}
static __inline void mac_txq1_int_ctrl_set(uint32_t value)
{
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_INT_CTRL_ADDR, value);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_INT_CTRL_ADDR), value);
}
static __inline uint32_t mac_txq1_int_ctrl_get(void)
{
	return (WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_INT_CTRL_ADDR));
}
static __inline void mac_txq1_int_ctrl_pack(uint32_t sw_txq1_desc_done_int_mitigation, uint32_t sw_txq1_desc_done_int_timeout)
{
	uint32_t tmp;

	assert((((uint32_t)sw_txq1_desc_done_int_mitigation << SW_TXQ1_DESC_DONE_INT_MITIGATION_OFFSET) & ~((uint32_t)SW_TXQ1_DESC_DONE_INT_MITIGATION_MASK)) == 0);
	assert((((uint32_t)sw_txq1_desc_done_int_timeout << SW_TXQ1_DESC_DONE_INT_TIMEOUT_OFFSET) & ~((uint32_t)SW_TXQ1_DESC_DONE_INT_TIMEOUT_MASK)) == 0);
	tmp =
		((uint32_t)sw_txq1_desc_done_int_mitigation << SW_TXQ1_DESC_DONE_INT_MITIGATION_OFFSET) |
		((uint32_t)sw_txq1_desc_done_int_timeout << SW_TXQ1_DESC_DONE_INT_TIMEOUT_OFFSET) ;
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_INT_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_INT_CTRL_ADDR), tmp);
}
static __inline void mac_txq1_int_ctrl_unpack(volatile uint32_t* sw_txq1_desc_done_int_mitigation, volatile uint32_t* sw_txq1_desc_done_int_timeout)
{
	uint32_t tmp;

	tmp = mac_txq1_int_ctrl_get();
	*sw_txq1_desc_done_int_mitigation = (tmp & ((uint32_t)SW_TXQ1_DESC_DONE_INT_MITIGATION_MASK)) >> SW_TXQ1_DESC_DONE_INT_MITIGATION_OFFSET;
	*sw_txq1_desc_done_int_timeout = (tmp & ((uint32_t)SW_TXQ1_DESC_DONE_INT_TIMEOUT_MASK)) >> SW_TXQ1_DESC_DONE_INT_TIMEOUT_OFFSET;
}
static __inline uint32_t mac_txq1_sts_0_sw_ro_txq1_desc_access_fsm_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_STS_0_ADDR)) & SW_RO_TXQ1_DESC_ACCESS_FSM_MASK) >> SW_RO_TXQ1_DESC_ACCESS_FSM_OFFSET;
}
static __inline uint32_t mac_txq1_sts_0_sw_ro_txq1_chn_acess_fsm_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_STS_0_ADDR)) & SW_RO_TXQ1_CHN_ACESS_FSM_MASK) >> SW_RO_TXQ1_CHN_ACESS_FSM_OFFSET;
}
static __inline uint32_t mac_txq1_sts_0_get(void)
{
	return (WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_STS_0_ADDR));
}
static __inline void mac_txq1_sts_0_unpack(volatile uint32_t* sw_ro_txq1_desc_access_fsm, volatile uint32_t* sw_ro_txq1_chn_acess_fsm)
{
	uint32_t tmp;

	tmp = mac_txq1_sts_0_get();
	*sw_ro_txq1_desc_access_fsm = (tmp & ((uint32_t)SW_RO_TXQ1_DESC_ACCESS_FSM_MASK)) >> SW_RO_TXQ1_DESC_ACCESS_FSM_OFFSET;
	*sw_ro_txq1_chn_acess_fsm = (tmp & ((uint32_t)SW_RO_TXQ1_CHN_ACESS_FSM_MASK)) >> SW_RO_TXQ1_CHN_ACESS_FSM_OFFSET;
}
static __inline uint32_t mac_txq1_dbg_bus_0_sts_sw_txq1_dbg_bus_0_sts_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_DBG_BUS_0_STS_ADDR)) & SW_TXQ1_DBG_BUS_0_STS_MASK) >> SW_TXQ1_DBG_BUS_0_STS_OFFSET;
}
static __inline uint32_t mac_txq1_dbg_bus_0_sts_get(void)
{
	return (WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_DBG_BUS_0_STS_ADDR));
}
static __inline void mac_txq1_dbg_bus_0_sts_unpack(volatile uint32_t* sw_txq1_dbg_bus_0_sts)
{
	uint32_t tmp;

	tmp = mac_txq1_dbg_bus_0_sts_get();
	*sw_txq1_dbg_bus_0_sts = (tmp & ((uint32_t)SW_TXQ1_DBG_BUS_0_STS_MASK)) >> SW_TXQ1_DBG_BUS_0_STS_OFFSET;
}
static __inline void mac_txq1_dbg_bus_0_clr_sw_txq1_dbg_bus_0_clr_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_DBG_BUS_0_CLR_ADDR);
	tmp &= ~SW_TXQ1_DBG_BUS_0_CLR_MASK;
	tmp |= (value << SW_TXQ1_DBG_BUS_0_CLR_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_DBG_BUS_0_CLR_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_DBG_BUS_0_CLR_ADDR), tmp);
}
static __inline void mac_txq1_dbg_bus_0_clr_set(uint32_t value)
{
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_DBG_BUS_0_CLR_ADDR, value);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_DBG_BUS_0_CLR_ADDR), value);
}
static __inline void mac_txq1_dbg_bus_0_clr_pack(uint32_t sw_txq1_dbg_bus_0_clr)
{
	uint32_t tmp;

	assert((((uint32_t)sw_txq1_dbg_bus_0_clr << SW_TXQ1_DBG_BUS_0_CLR_OFFSET) & ~((uint32_t)SW_TXQ1_DBG_BUS_0_CLR_MASK)) == 0);
	tmp =
		((uint32_t)sw_txq1_dbg_bus_0_clr << SW_TXQ1_DBG_BUS_0_CLR_OFFSET) ;
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_DBG_BUS_0_CLR_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_DBG_BUS_0_CLR_ADDR), tmp);
}
static __inline void mac_txq1_tx_stat_sts_clr_sw_txq1_rts_tx_ok_cnt_clr_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_TX_STAT_STS_CLR_ADDR);
	tmp &= ~SW_TXQ1_RTS_TX_OK_CNT_CLR_MASK;
	tmp |= (value << SW_TXQ1_RTS_TX_OK_CNT_CLR_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_TX_STAT_STS_CLR_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_TX_STAT_STS_CLR_ADDR), tmp);
}
static __inline void mac_txq1_tx_stat_sts_clr_sw_txq1_cts_tx_ok_cnt_clr_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_TX_STAT_STS_CLR_ADDR);
	tmp &= ~SW_TXQ1_CTS_TX_OK_CNT_CLR_MASK;
	tmp |= (value << SW_TXQ1_CTS_TX_OK_CNT_CLR_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_TX_STAT_STS_CLR_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_TX_STAT_STS_CLR_ADDR), tmp);
}
static __inline void mac_txq1_tx_stat_sts_clr_sw_txq1_frame_tx_ok_cnt_clr_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_TX_STAT_STS_CLR_ADDR);
	tmp &= ~SW_TXQ1_FRAME_TX_OK_CNT_CLR_MASK;
	tmp |= (value << SW_TXQ1_FRAME_TX_OK_CNT_CLR_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_TX_STAT_STS_CLR_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_TX_STAT_STS_CLR_ADDR), tmp);
}
static __inline void mac_txq1_tx_stat_sts_clr_sw_txq1_cfend_tx_ok_cnt_clr_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_TX_STAT_STS_CLR_ADDR);
	tmp &= ~SW_TXQ1_CFEND_TX_OK_CNT_CLR_MASK;
	tmp |= (value << SW_TXQ1_CFEND_TX_OK_CNT_CLR_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_TX_STAT_STS_CLR_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_TX_STAT_STS_CLR_ADDR), tmp);
}
static __inline void mac_txq1_tx_stat_sts_clr_sw_txq1_rts_tx_fail_cnt_clr_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_TX_STAT_STS_CLR_ADDR);
	tmp &= ~SW_TXQ1_RTS_TX_FAIL_CNT_CLR_MASK;
	tmp |= (value << SW_TXQ1_RTS_TX_FAIL_CNT_CLR_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_TX_STAT_STS_CLR_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_TX_STAT_STS_CLR_ADDR), tmp);
}
static __inline void mac_txq1_tx_stat_sts_clr_sw_txq1_frame_tx_fail_cnt_clr_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_TX_STAT_STS_CLR_ADDR);
	tmp &= ~SW_TXQ1_FRAME_TX_FAIL_CNT_CLR_MASK;
	tmp |= (value << SW_TXQ1_FRAME_TX_FAIL_CNT_CLR_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_TX_STAT_STS_CLR_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_TX_STAT_STS_CLR_ADDR), tmp);
}
static __inline void mac_txq1_tx_stat_sts_clr_set(uint32_t value)
{
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_TX_STAT_STS_CLR_ADDR, value);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_TX_STAT_STS_CLR_ADDR), value);
}
static __inline uint32_t mac_txq1_tx_stat_sts_clr_get(void)
{
	return (WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_TX_STAT_STS_CLR_ADDR));
}
static __inline void mac_txq1_tx_stat_sts_clr_pack(uint32_t sw_txq1_rts_tx_ok_cnt_clr, uint32_t sw_txq1_cts_tx_ok_cnt_clr, uint32_t sw_txq1_frame_tx_ok_cnt_clr, uint32_t sw_txq1_cfend_tx_ok_cnt_clr, uint32_t sw_txq1_rts_tx_fail_cnt_clr, uint32_t sw_txq1_frame_tx_fail_cnt_clr)
{
	uint32_t tmp;

	assert((((uint32_t)sw_txq1_rts_tx_ok_cnt_clr << SW_TXQ1_RTS_TX_OK_CNT_CLR_OFFSET) & ~((uint32_t)SW_TXQ1_RTS_TX_OK_CNT_CLR_MASK)) == 0);
	assert((((uint32_t)sw_txq1_cts_tx_ok_cnt_clr << SW_TXQ1_CTS_TX_OK_CNT_CLR_OFFSET) & ~((uint32_t)SW_TXQ1_CTS_TX_OK_CNT_CLR_MASK)) == 0);
	assert((((uint32_t)sw_txq1_frame_tx_ok_cnt_clr << SW_TXQ1_FRAME_TX_OK_CNT_CLR_OFFSET) & ~((uint32_t)SW_TXQ1_FRAME_TX_OK_CNT_CLR_MASK)) == 0);
	assert((((uint32_t)sw_txq1_cfend_tx_ok_cnt_clr << SW_TXQ1_CFEND_TX_OK_CNT_CLR_OFFSET) & ~((uint32_t)SW_TXQ1_CFEND_TX_OK_CNT_CLR_MASK)) == 0);
	assert((((uint32_t)sw_txq1_rts_tx_fail_cnt_clr << SW_TXQ1_RTS_TX_FAIL_CNT_CLR_OFFSET) & ~((uint32_t)SW_TXQ1_RTS_TX_FAIL_CNT_CLR_MASK)) == 0);
	assert((((uint32_t)sw_txq1_frame_tx_fail_cnt_clr << SW_TXQ1_FRAME_TX_FAIL_CNT_CLR_OFFSET) & ~((uint32_t)SW_TXQ1_FRAME_TX_FAIL_CNT_CLR_MASK)) == 0);
	tmp =
		((uint32_t)sw_txq1_rts_tx_ok_cnt_clr << SW_TXQ1_RTS_TX_OK_CNT_CLR_OFFSET) |
		((uint32_t)sw_txq1_cts_tx_ok_cnt_clr << SW_TXQ1_CTS_TX_OK_CNT_CLR_OFFSET) |
		((uint32_t)sw_txq1_frame_tx_ok_cnt_clr << SW_TXQ1_FRAME_TX_OK_CNT_CLR_OFFSET) |
		((uint32_t)sw_txq1_cfend_tx_ok_cnt_clr << SW_TXQ1_CFEND_TX_OK_CNT_CLR_OFFSET) |
		((uint32_t)sw_txq1_rts_tx_fail_cnt_clr << SW_TXQ1_RTS_TX_FAIL_CNT_CLR_OFFSET) |
		((uint32_t)sw_txq1_frame_tx_fail_cnt_clr << SW_TXQ1_FRAME_TX_FAIL_CNT_CLR_OFFSET) ;
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_TX_STAT_STS_CLR_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_TX_STAT_STS_CLR_ADDR), tmp);
}
static __inline uint32_t mac_txq1_tx_stat_sts_0_sw_ro_txq1_rts_tx_ok_cnt_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_TX_STAT_STS_0_ADDR)) & SW_RO_TXQ1_RTS_TX_OK_CNT_MASK) >> SW_RO_TXQ1_RTS_TX_OK_CNT_OFFSET;
}
static __inline uint32_t mac_txq1_tx_stat_sts_0_sw_ro_txq1_cts_tx_ok_cnt_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_TX_STAT_STS_0_ADDR)) & SW_RO_TXQ1_CTS_TX_OK_CNT_MASK) >> SW_RO_TXQ1_CTS_TX_OK_CNT_OFFSET;
}
static __inline uint32_t mac_txq1_tx_stat_sts_0_get(void)
{
	return (WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_TX_STAT_STS_0_ADDR));
}
static __inline void mac_txq1_tx_stat_sts_0_unpack(volatile uint32_t* sw_ro_txq1_rts_tx_ok_cnt, volatile uint32_t* sw_ro_txq1_cts_tx_ok_cnt)
{
	uint32_t tmp;

	tmp = mac_txq1_tx_stat_sts_0_get();
	*sw_ro_txq1_rts_tx_ok_cnt = (tmp & ((uint32_t)SW_RO_TXQ1_RTS_TX_OK_CNT_MASK)) >> SW_RO_TXQ1_RTS_TX_OK_CNT_OFFSET;
	*sw_ro_txq1_cts_tx_ok_cnt = (tmp & ((uint32_t)SW_RO_TXQ1_CTS_TX_OK_CNT_MASK)) >> SW_RO_TXQ1_CTS_TX_OK_CNT_OFFSET;
}
static __inline uint32_t mac_txq1_tx_stat_sts_1_sw_ro_txq1_frame_tx_ok_cnt_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_TX_STAT_STS_1_ADDR)) & SW_RO_TXQ1_FRAME_TX_OK_CNT_MASK) >> SW_RO_TXQ1_FRAME_TX_OK_CNT_OFFSET;
}
static __inline uint32_t mac_txq1_tx_stat_sts_1_sw_ro_txq1_cfend_tx_ok_cnt_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_TX_STAT_STS_1_ADDR)) & SW_RO_TXQ1_CFEND_TX_OK_CNT_MASK) >> SW_RO_TXQ1_CFEND_TX_OK_CNT_OFFSET;
}
static __inline uint32_t mac_txq1_tx_stat_sts_1_get(void)
{
	return (WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_TX_STAT_STS_1_ADDR));
}
static __inline void mac_txq1_tx_stat_sts_1_unpack(volatile uint32_t* sw_ro_txq1_frame_tx_ok_cnt, volatile uint32_t* sw_ro_txq1_cfend_tx_ok_cnt)
{
	uint32_t tmp;

	tmp = mac_txq1_tx_stat_sts_1_get();
	*sw_ro_txq1_frame_tx_ok_cnt = (tmp & ((uint32_t)SW_RO_TXQ1_FRAME_TX_OK_CNT_MASK)) >> SW_RO_TXQ1_FRAME_TX_OK_CNT_OFFSET;
	*sw_ro_txq1_cfend_tx_ok_cnt = (tmp & ((uint32_t)SW_RO_TXQ1_CFEND_TX_OK_CNT_MASK)) >> SW_RO_TXQ1_CFEND_TX_OK_CNT_OFFSET;
}
static __inline uint32_t mac_txq1_tx_stat_sts_2_sw_ro_txq1_rts_tx_fail_cnt_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_TX_STAT_STS_2_ADDR)) & SW_RO_TXQ1_RTS_TX_FAIL_CNT_MASK) >> SW_RO_TXQ1_RTS_TX_FAIL_CNT_OFFSET;
}
static __inline uint32_t mac_txq1_tx_stat_sts_2_sw_ro_txq1_frame_tx_fail_cnt_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_TX_STAT_STS_2_ADDR)) & SW_RO_TXQ1_FRAME_TX_FAIL_CNT_MASK) >> SW_RO_TXQ1_FRAME_TX_FAIL_CNT_OFFSET;
}
static __inline uint32_t mac_txq1_tx_stat_sts_2_get(void)
{
	return (WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_TX_STAT_STS_2_ADDR));
}
static __inline void mac_txq1_tx_stat_sts_2_unpack(volatile uint32_t* sw_ro_txq1_rts_tx_fail_cnt, volatile uint32_t* sw_ro_txq1_frame_tx_fail_cnt)
{
	uint32_t tmp;

	tmp = mac_txq1_tx_stat_sts_2_get();
	*sw_ro_txq1_rts_tx_fail_cnt = (tmp & ((uint32_t)SW_RO_TXQ1_RTS_TX_FAIL_CNT_MASK)) >> SW_RO_TXQ1_RTS_TX_FAIL_CNT_OFFSET;
	*sw_ro_txq1_frame_tx_fail_cnt = (tmp & ((uint32_t)SW_RO_TXQ1_FRAME_TX_FAIL_CNT_MASK)) >> SW_RO_TXQ1_FRAME_TX_FAIL_CNT_OFFSET;
}
static __inline uint32_t mac_txq1_tx_stat_sts_3_sw_ro_txq1_tx_desc_ptr_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_TX_STAT_STS_3_ADDR)) & SW_RO_TXQ1_TX_DESC_PTR_MASK) >> SW_RO_TXQ1_TX_DESC_PTR_OFFSET;
}
static __inline uint32_t mac_txq1_tx_stat_sts_3_get(void)
{
	return (WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_TX_STAT_STS_3_ADDR));
}
static __inline void mac_txq1_tx_stat_sts_3_unpack(volatile uint32_t* sw_ro_txq1_tx_desc_ptr)
{
	uint32_t tmp;

	tmp = mac_txq1_tx_stat_sts_3_get();
	*sw_ro_txq1_tx_desc_ptr = (tmp & ((uint32_t)SW_RO_TXQ1_TX_DESC_PTR_MASK)) >> SW_RO_TXQ1_TX_DESC_PTR_OFFSET;
}
static __inline uint32_t mac_txq1_pcs_busy_monitor_stat_sw_ro_txq1_pcs_busy_stuck_tx_cnt_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_PCS_BUSY_MONITOR_STAT_ADDR)) & SW_RO_TXQ1_PCS_BUSY_STUCK_TX_CNT_MASK) >> SW_RO_TXQ1_PCS_BUSY_STUCK_TX_CNT_OFFSET;
}
static __inline uint32_t mac_txq1_pcs_busy_monitor_stat_get(void)
{
	return (WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_PCS_BUSY_MONITOR_STAT_ADDR));
}
static __inline void mac_txq1_pcs_busy_monitor_stat_unpack(volatile uint32_t* sw_ro_txq1_pcs_busy_stuck_tx_cnt)
{
	uint32_t tmp;

	tmp = mac_txq1_pcs_busy_monitor_stat_get();
	*sw_ro_txq1_pcs_busy_stuck_tx_cnt = (tmp & ((uint32_t)SW_RO_TXQ1_PCS_BUSY_STUCK_TX_CNT_MASK)) >> SW_RO_TXQ1_PCS_BUSY_STUCK_TX_CNT_OFFSET;
}
static __inline void mac_txq1_dbg_cw_ctrl_sw_txq1_dbg_cw_clr_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_DBG_CW_CTRL_ADDR);
	tmp &= ~SW_TXQ1_DBG_CW_CLR_MASK;
	tmp |= (value << SW_TXQ1_DBG_CW_CLR_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_DBG_CW_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_DBG_CW_CTRL_ADDR), tmp);
}
static __inline void mac_txq1_dbg_cw_ctrl_set(uint32_t value)
{
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_DBG_CW_CTRL_ADDR, value);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_DBG_CW_CTRL_ADDR), value);
}
static __inline uint32_t mac_txq1_dbg_cw_ctrl_get(void)
{
	return (WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_DBG_CW_CTRL_ADDR));
}
static __inline void mac_txq1_dbg_cw_ctrl_pack(uint32_t sw_txq1_dbg_cw_clr)
{
	uint32_t tmp;

	assert((((uint32_t)sw_txq1_dbg_cw_clr << SW_TXQ1_DBG_CW_CLR_OFFSET) & ~((uint32_t)SW_TXQ1_DBG_CW_CLR_MASK)) == 0);
	tmp =
		((uint32_t)sw_txq1_dbg_cw_clr << SW_TXQ1_DBG_CW_CLR_OFFSET) ;
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_DBG_CW_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_DBG_CW_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_txq1_dbg_cw_sts_sw_ro_txq1_cw_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_DBG_CW_STS_ADDR)) & SW_RO_TXQ1_CW_MASK) >> SW_RO_TXQ1_CW_OFFSET;
}
static __inline uint32_t mac_txq1_dbg_cw_sts_sw_ro_txq1_cw_rtl_max_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_DBG_CW_STS_ADDR)) & SW_RO_TXQ1_CW_RTL_MAX_MASK) >> SW_RO_TXQ1_CW_RTL_MAX_OFFSET;
}
static __inline uint32_t mac_txq1_dbg_cw_sts_get(void)
{
	return (WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ1_DBG_CW_STS_ADDR));
}
static __inline void mac_txq1_dbg_cw_sts_unpack(volatile uint32_t* sw_ro_txq1_cw, volatile uint32_t* sw_ro_txq1_cw_rtl_max)
{
	uint32_t tmp;

	tmp = mac_txq1_dbg_cw_sts_get();
	*sw_ro_txq1_cw = (tmp & ((uint32_t)SW_RO_TXQ1_CW_MASK)) >> SW_RO_TXQ1_CW_OFFSET;
	*sw_ro_txq1_cw_rtl_max = (tmp & ((uint32_t)SW_RO_TXQ1_CW_RTL_MAX_MASK)) >> SW_RO_TXQ1_CW_RTL_MAX_OFFSET;
}
static __inline void mac_txq2_enable_sw_txq2_srst_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_ENABLE_ADDR);
	tmp &= ~SW_TXQ2_SRST_MASK;
	tmp |= (value << SW_TXQ2_SRST_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_ENABLE_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_ENABLE_ADDR), tmp);
}
static __inline void mac_txq2_enable_sw_txq2_dbg_info_clr_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_ENABLE_ADDR);
	tmp &= ~SW_TXQ2_DBG_INFO_CLR_MASK;
	tmp |= (value << SW_TXQ2_DBG_INFO_CLR_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_ENABLE_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_ENABLE_ADDR), tmp);
}
static __inline void mac_txq2_enable_sw_txq2_dummy_trig_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_ENABLE_ADDR);
	tmp &= ~SW_TXQ2_DUMMY_TRIG_MASK;
	tmp |= (value << SW_TXQ2_DUMMY_TRIG_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_ENABLE_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_ENABLE_ADDR), tmp);
}
static __inline void mac_txq2_enable_sw_txq2_dis_pls_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_ENABLE_ADDR);
	tmp &= ~SW_TXQ2_DIS_PLS_MASK;
	tmp |= (value << SW_TXQ2_DIS_PLS_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_ENABLE_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_ENABLE_ADDR), tmp);
}
static __inline void mac_txq2_enable_sw_txq2_en_pls_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_ENABLE_ADDR);
	tmp &= ~SW_TXQ2_EN_PLS_MASK;
	tmp |= (value << SW_TXQ2_EN_PLS_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_ENABLE_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_ENABLE_ADDR), tmp);
}
static __inline void mac_txq2_enable_set(uint32_t value)
{
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_ENABLE_ADDR, value);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_ENABLE_ADDR), value);
}
static __inline uint32_t mac_txq2_enable_get(void)
{
	return (WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_ENABLE_ADDR));
}
static __inline void mac_txq2_enable_pack(uint32_t sw_txq2_srst, uint32_t sw_txq2_dbg_info_clr, uint32_t sw_txq2_dummy_trig, uint32_t sw_txq2_dis_pls, uint32_t sw_txq2_en_pls)
{
	uint32_t tmp;

	assert((((uint32_t)sw_txq2_srst << SW_TXQ2_SRST_OFFSET) & ~((uint32_t)SW_TXQ2_SRST_MASK)) == 0);
	assert((((uint32_t)sw_txq2_dbg_info_clr << SW_TXQ2_DBG_INFO_CLR_OFFSET) & ~((uint32_t)SW_TXQ2_DBG_INFO_CLR_MASK)) == 0);
	assert((((uint32_t)sw_txq2_dummy_trig << SW_TXQ2_DUMMY_TRIG_OFFSET) & ~((uint32_t)SW_TXQ2_DUMMY_TRIG_MASK)) == 0);
	assert((((uint32_t)sw_txq2_dis_pls << SW_TXQ2_DIS_PLS_OFFSET) & ~((uint32_t)SW_TXQ2_DIS_PLS_MASK)) == 0);
	assert((((uint32_t)sw_txq2_en_pls << SW_TXQ2_EN_PLS_OFFSET) & ~((uint32_t)SW_TXQ2_EN_PLS_MASK)) == 0);
	tmp =
		((uint32_t)sw_txq2_srst << SW_TXQ2_SRST_OFFSET) |
		((uint32_t)sw_txq2_dbg_info_clr << SW_TXQ2_DBG_INFO_CLR_OFFSET) |
		((uint32_t)sw_txq2_dummy_trig << SW_TXQ2_DUMMY_TRIG_OFFSET) |
		((uint32_t)sw_txq2_dis_pls << SW_TXQ2_DIS_PLS_OFFSET) |
		((uint32_t)sw_txq2_en_pls << SW_TXQ2_EN_PLS_OFFSET) ;
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_ENABLE_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_ENABLE_ADDR), tmp);
}
static __inline void mac_txq2_ctrl_sw_txq2_dummy_int_en_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_CTRL_ADDR);
	tmp &= ~SW_TXQ2_DUMMY_INT_EN_MASK;
	tmp |= (value << SW_TXQ2_DUMMY_INT_EN_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_txq2_ctrl_sw_txq2_dummy_int_en_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_CTRL_ADDR)) & SW_TXQ2_DUMMY_INT_EN_MASK) >> SW_TXQ2_DUMMY_INT_EN_OFFSET;
}
static __inline void mac_txq2_ctrl_sw_txq2_hw_frame_fc_power_mode_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_CTRL_ADDR);
	tmp &= ~SW_TXQ2_HW_FRAME_FC_POWER_MODE_MASK;
	tmp |= (value << SW_TXQ2_HW_FRAME_FC_POWER_MODE_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_txq2_ctrl_sw_txq2_hw_frame_fc_power_mode_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_CTRL_ADDR)) & SW_TXQ2_HW_FRAME_FC_POWER_MODE_MASK) >> SW_TXQ2_HW_FRAME_FC_POWER_MODE_OFFSET;
}
static __inline void mac_txq2_ctrl_sw_txq2_cf_end_en_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_CTRL_ADDR);
	tmp &= ~SW_TXQ2_CF_END_EN_MASK;
	tmp |= (value << SW_TXQ2_CF_END_EN_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_txq2_ctrl_sw_txq2_cf_end_en_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_CTRL_ADDR)) & SW_TXQ2_CF_END_EN_MASK) >> SW_TXQ2_CF_END_EN_OFFSET;
}
static __inline void mac_txq2_ctrl_sw_txq2_cw_min_set_pls_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_CTRL_ADDR);
	tmp &= ~SW_TXQ2_CW_MIN_SET_PLS_MASK;
	tmp |= (value << SW_TXQ2_CW_MIN_SET_PLS_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_CTRL_ADDR), tmp);
}
static __inline void mac_txq2_ctrl_set(uint32_t value)
{
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_CTRL_ADDR, value);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_CTRL_ADDR), value);
}
static __inline uint32_t mac_txq2_ctrl_get(void)
{
	return (WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_CTRL_ADDR));
}
static __inline void mac_txq2_ctrl_pack(uint32_t sw_txq2_dummy_int_en, uint32_t sw_txq2_hw_frame_fc_power_mode, uint32_t sw_txq2_cf_end_en, uint32_t sw_txq2_cw_min_set_pls)
{
	uint32_t tmp;

	assert((((uint32_t)sw_txq2_dummy_int_en << SW_TXQ2_DUMMY_INT_EN_OFFSET) & ~((uint32_t)SW_TXQ2_DUMMY_INT_EN_MASK)) == 0);
	assert((((uint32_t)sw_txq2_hw_frame_fc_power_mode << SW_TXQ2_HW_FRAME_FC_POWER_MODE_OFFSET) & ~((uint32_t)SW_TXQ2_HW_FRAME_FC_POWER_MODE_MASK)) == 0);
	assert((((uint32_t)sw_txq2_cf_end_en << SW_TXQ2_CF_END_EN_OFFSET) & ~((uint32_t)SW_TXQ2_CF_END_EN_MASK)) == 0);
	assert((((uint32_t)sw_txq2_cw_min_set_pls << SW_TXQ2_CW_MIN_SET_PLS_OFFSET) & ~((uint32_t)SW_TXQ2_CW_MIN_SET_PLS_MASK)) == 0);
	tmp =
		((uint32_t)sw_txq2_dummy_int_en << SW_TXQ2_DUMMY_INT_EN_OFFSET) |
		((uint32_t)sw_txq2_hw_frame_fc_power_mode << SW_TXQ2_HW_FRAME_FC_POWER_MODE_OFFSET) |
		((uint32_t)sw_txq2_cf_end_en << SW_TXQ2_CF_END_EN_OFFSET) |
		((uint32_t)sw_txq2_cw_min_set_pls << SW_TXQ2_CW_MIN_SET_PLS_OFFSET) ;
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_CTRL_ADDR), tmp);
}
static __inline void mac_txq2_ctrl_unpack(volatile uint32_t* sw_txq2_dummy_int_en, volatile uint32_t* sw_txq2_hw_frame_fc_power_mode, volatile uint32_t* sw_txq2_cf_end_en)
{
	uint32_t tmp;

	tmp = mac_txq2_ctrl_get();
	*sw_txq2_dummy_int_en = (tmp & ((uint32_t)SW_TXQ2_DUMMY_INT_EN_MASK)) >> SW_TXQ2_DUMMY_INT_EN_OFFSET;
	*sw_txq2_hw_frame_fc_power_mode = (tmp & ((uint32_t)SW_TXQ2_HW_FRAME_FC_POWER_MODE_MASK)) >> SW_TXQ2_HW_FRAME_FC_POWER_MODE_OFFSET;
	*sw_txq2_cf_end_en = (tmp & ((uint32_t)SW_TXQ2_CF_END_EN_MASK)) >> SW_TXQ2_CF_END_EN_OFFSET;
}
static __inline void mac_txq2_ifs_ctrl_sw_txq2_eifs_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_IFS_CTRL_ADDR);
	tmp &= ~SW_TXQ2_EIFS_MASK;
	tmp |= (value << SW_TXQ2_EIFS_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_IFS_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_IFS_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_txq2_ifs_ctrl_sw_txq2_eifs_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_IFS_CTRL_ADDR)) & SW_TXQ2_EIFS_MASK) >> SW_TXQ2_EIFS_OFFSET;
}
static __inline void mac_txq2_ifs_ctrl_sw_txq2_difs_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_IFS_CTRL_ADDR);
	tmp &= ~SW_TXQ2_DIFS_MASK;
	tmp |= (value << SW_TXQ2_DIFS_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_IFS_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_IFS_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_txq2_ifs_ctrl_sw_txq2_difs_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_IFS_CTRL_ADDR)) & SW_TXQ2_DIFS_MASK) >> SW_TXQ2_DIFS_OFFSET;
}
static __inline void mac_txq2_ifs_ctrl_set(uint32_t value)
{
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_IFS_CTRL_ADDR, value);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_IFS_CTRL_ADDR), value);
}
static __inline uint32_t mac_txq2_ifs_ctrl_get(void)
{
	return (WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_IFS_CTRL_ADDR));
}
static __inline void mac_txq2_ifs_ctrl_pack(uint32_t sw_txq2_eifs, uint32_t sw_txq2_difs)
{
	uint32_t tmp;

	assert((((uint32_t)sw_txq2_eifs << SW_TXQ2_EIFS_OFFSET) & ~((uint32_t)SW_TXQ2_EIFS_MASK)) == 0);
	assert((((uint32_t)sw_txq2_difs << SW_TXQ2_DIFS_OFFSET) & ~((uint32_t)SW_TXQ2_DIFS_MASK)) == 0);
	tmp =
		((uint32_t)sw_txq2_eifs << SW_TXQ2_EIFS_OFFSET) |
		((uint32_t)sw_txq2_difs << SW_TXQ2_DIFS_OFFSET) ;
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_IFS_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_IFS_CTRL_ADDR), tmp);
}
static __inline void mac_txq2_ifs_ctrl_unpack(volatile uint32_t* sw_txq2_eifs, volatile uint32_t* sw_txq2_difs)
{
	uint32_t tmp;

	tmp = mac_txq2_ifs_ctrl_get();
	*sw_txq2_eifs = (tmp & ((uint32_t)SW_TXQ2_EIFS_MASK)) >> SW_TXQ2_EIFS_OFFSET;
	*sw_txq2_difs = (tmp & ((uint32_t)SW_TXQ2_DIFS_MASK)) >> SW_TXQ2_DIFS_OFFSET;
}
static __inline void mac_txq2_rsp_time_sw_txq2_resp_timeout_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_RSP_TIME_ADDR);
	tmp &= ~SW_TXQ2_RESP_TIMEOUT_MASK;
	tmp |= (value << SW_TXQ2_RESP_TIMEOUT_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_RSP_TIME_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_RSP_TIME_ADDR), tmp);
}
static __inline uint32_t mac_txq2_rsp_time_sw_txq2_resp_timeout_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_RSP_TIME_ADDR)) & SW_TXQ2_RESP_TIMEOUT_MASK) >> SW_TXQ2_RESP_TIMEOUT_OFFSET;
}
static __inline void mac_txq2_rsp_time_set(uint32_t value)
{
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_RSP_TIME_ADDR, value);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_RSP_TIME_ADDR), value);
}
static __inline uint32_t mac_txq2_rsp_time_get(void)
{
	return (WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_RSP_TIME_ADDR));
}
static __inline void mac_txq2_rsp_time_pack(uint32_t sw_txq2_resp_timeout)
{
	uint32_t tmp;

	assert((((uint32_t)sw_txq2_resp_timeout << SW_TXQ2_RESP_TIMEOUT_OFFSET) & ~((uint32_t)SW_TXQ2_RESP_TIMEOUT_MASK)) == 0);
	tmp =
		((uint32_t)sw_txq2_resp_timeout << SW_TXQ2_RESP_TIMEOUT_OFFSET) ;
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_RSP_TIME_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_RSP_TIME_ADDR), tmp);
}
static __inline void mac_txq2_rsp_time_unpack(volatile uint32_t* sw_txq2_resp_timeout)
{
	uint32_t tmp;

	tmp = mac_txq2_rsp_time_get();
	*sw_txq2_resp_timeout = (tmp & ((uint32_t)SW_TXQ2_RESP_TIMEOUT_MASK)) >> SW_TXQ2_RESP_TIMEOUT_OFFSET;
}
static __inline void mac_txq2_ptr_sw_txq2_start_ptr_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_PTR_ADDR);
	tmp &= ~SW_TXQ2_START_PTR_MASK;
	tmp |= (value << SW_TXQ2_START_PTR_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_PTR_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_PTR_ADDR), tmp);
}
static __inline uint32_t mac_txq2_ptr_sw_txq2_start_ptr_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_PTR_ADDR)) & SW_TXQ2_START_PTR_MASK) >> SW_TXQ2_START_PTR_OFFSET;
}
static __inline void mac_txq2_ptr_set(uint32_t value)
{
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_PTR_ADDR, value);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_PTR_ADDR), value);
}
static __inline uint32_t mac_txq2_ptr_get(void)
{
	return (WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_PTR_ADDR));
}
static __inline void mac_txq2_ptr_pack(uint32_t sw_txq2_start_ptr)
{
	uint32_t tmp;

	assert((((uint32_t)sw_txq2_start_ptr << SW_TXQ2_START_PTR_OFFSET) & ~((uint32_t)SW_TXQ2_START_PTR_MASK)) == 0);
	tmp =
		((uint32_t)sw_txq2_start_ptr << SW_TXQ2_START_PTR_OFFSET) ;
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_PTR_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_PTR_ADDR), tmp);
}
static __inline void mac_txq2_ptr_unpack(volatile uint32_t* sw_txq2_start_ptr)
{
	uint32_t tmp;

	tmp = mac_txq2_ptr_get();
	*sw_txq2_start_ptr = (tmp & ((uint32_t)SW_TXQ2_START_PTR_MASK)) >> SW_TXQ2_START_PTR_OFFSET;
}
static __inline void mac_txq2_tx_timeout_sw_txq2_timeout_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_TX_TIMEOUT_ADDR);
	tmp &= ~SW_TXQ2_TIMEOUT_MASK;
	tmp |= (value << SW_TXQ2_TIMEOUT_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_TX_TIMEOUT_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_TX_TIMEOUT_ADDR), tmp);
}
static __inline uint32_t mac_txq2_tx_timeout_sw_txq2_timeout_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_TX_TIMEOUT_ADDR)) & SW_TXQ2_TIMEOUT_MASK) >> SW_TXQ2_TIMEOUT_OFFSET;
}
static __inline void mac_txq2_tx_timeout_set(uint32_t value)
{
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_TX_TIMEOUT_ADDR, value);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_TX_TIMEOUT_ADDR), value);
}
static __inline uint32_t mac_txq2_tx_timeout_get(void)
{
	return (WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_TX_TIMEOUT_ADDR));
}
static __inline void mac_txq2_tx_timeout_pack(uint32_t sw_txq2_timeout)
{
	uint32_t tmp;

	assert((((uint32_t)sw_txq2_timeout << SW_TXQ2_TIMEOUT_OFFSET) & ~((uint32_t)SW_TXQ2_TIMEOUT_MASK)) == 0);
	tmp =
		((uint32_t)sw_txq2_timeout << SW_TXQ2_TIMEOUT_OFFSET) ;
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_TX_TIMEOUT_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_TX_TIMEOUT_ADDR), tmp);
}
static __inline void mac_txq2_tx_timeout_unpack(volatile uint32_t* sw_txq2_timeout)
{
	uint32_t tmp;

	tmp = mac_txq2_tx_timeout_get();
	*sw_txq2_timeout = (tmp & ((uint32_t)SW_TXQ2_TIMEOUT_MASK)) >> SW_TXQ2_TIMEOUT_OFFSET;
}
static __inline void mac_txq2_cw_sw_txq2_cw_max_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_CW_ADDR);
	tmp &= ~SW_TXQ2_CW_MAX_MASK;
	tmp |= (value << SW_TXQ2_CW_MAX_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_CW_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_CW_ADDR), tmp);
}
static __inline uint32_t mac_txq2_cw_sw_txq2_cw_max_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_CW_ADDR)) & SW_TXQ2_CW_MAX_MASK) >> SW_TXQ2_CW_MAX_OFFSET;
}
static __inline void mac_txq2_cw_sw_txq2_cw_min_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_CW_ADDR);
	tmp &= ~SW_TXQ2_CW_MIN_MASK;
	tmp |= (value << SW_TXQ2_CW_MIN_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_CW_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_CW_ADDR), tmp);
}
static __inline uint32_t mac_txq2_cw_sw_txq2_cw_min_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_CW_ADDR)) & SW_TXQ2_CW_MIN_MASK) >> SW_TXQ2_CW_MIN_OFFSET;
}
static __inline void mac_txq2_cw_set(uint32_t value)
{
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_CW_ADDR, value);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_CW_ADDR), value);
}
static __inline uint32_t mac_txq2_cw_get(void)
{
	return (WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_CW_ADDR));
}
static __inline void mac_txq2_cw_pack(uint32_t sw_txq2_cw_max, uint32_t sw_txq2_cw_min)
{
	uint32_t tmp;

	assert((((uint32_t)sw_txq2_cw_max << SW_TXQ2_CW_MAX_OFFSET) & ~((uint32_t)SW_TXQ2_CW_MAX_MASK)) == 0);
	assert((((uint32_t)sw_txq2_cw_min << SW_TXQ2_CW_MIN_OFFSET) & ~((uint32_t)SW_TXQ2_CW_MIN_MASK)) == 0);
	tmp =
		((uint32_t)sw_txq2_cw_max << SW_TXQ2_CW_MAX_OFFSET) |
		((uint32_t)sw_txq2_cw_min << SW_TXQ2_CW_MIN_OFFSET) ;
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_CW_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_CW_ADDR), tmp);
}
static __inline void mac_txq2_cw_unpack(volatile uint32_t* sw_txq2_cw_max, volatile uint32_t* sw_txq2_cw_min)
{
	uint32_t tmp;

	tmp = mac_txq2_cw_get();
	*sw_txq2_cw_max = (tmp & ((uint32_t)SW_TXQ2_CW_MAX_MASK)) >> SW_TXQ2_CW_MAX_OFFSET;
	*sw_txq2_cw_min = (tmp & ((uint32_t)SW_TXQ2_CW_MIN_MASK)) >> SW_TXQ2_CW_MIN_OFFSET;
}
static __inline void mac_txq2_cw_force_sw_txq2_cw_rand_force_en_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_CW_FORCE_ADDR);
	tmp &= ~SW_TXQ2_CW_RAND_FORCE_EN_MASK;
	tmp |= (value << SW_TXQ2_CW_RAND_FORCE_EN_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_CW_FORCE_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_CW_FORCE_ADDR), tmp);
}
static __inline uint32_t mac_txq2_cw_force_sw_txq2_cw_rand_force_en_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_CW_FORCE_ADDR)) & SW_TXQ2_CW_RAND_FORCE_EN_MASK) >> SW_TXQ2_CW_RAND_FORCE_EN_OFFSET;
}
static __inline void mac_txq2_cw_force_sw_txq2_cw_rand_force_val_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_CW_FORCE_ADDR);
	tmp &= ~SW_TXQ2_CW_RAND_FORCE_VAL_MASK;
	tmp |= (value << SW_TXQ2_CW_RAND_FORCE_VAL_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_CW_FORCE_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_CW_FORCE_ADDR), tmp);
}
static __inline uint32_t mac_txq2_cw_force_sw_txq2_cw_rand_force_val_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_CW_FORCE_ADDR)) & SW_TXQ2_CW_RAND_FORCE_VAL_MASK) >> SW_TXQ2_CW_RAND_FORCE_VAL_OFFSET;
}
static __inline void mac_txq2_cw_force_set(uint32_t value)
{
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_CW_FORCE_ADDR, value);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_CW_FORCE_ADDR), value);
}
static __inline uint32_t mac_txq2_cw_force_get(void)
{
	return (WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_CW_FORCE_ADDR));
}
static __inline void mac_txq2_cw_force_pack(uint32_t sw_txq2_cw_rand_force_en, uint32_t sw_txq2_cw_rand_force_val)
{
	uint32_t tmp;

	assert((((uint32_t)sw_txq2_cw_rand_force_en << SW_TXQ2_CW_RAND_FORCE_EN_OFFSET) & ~((uint32_t)SW_TXQ2_CW_RAND_FORCE_EN_MASK)) == 0);
	assert((((uint32_t)sw_txq2_cw_rand_force_val << SW_TXQ2_CW_RAND_FORCE_VAL_OFFSET) & ~((uint32_t)SW_TXQ2_CW_RAND_FORCE_VAL_MASK)) == 0);
	tmp =
		((uint32_t)sw_txq2_cw_rand_force_en << SW_TXQ2_CW_RAND_FORCE_EN_OFFSET) |
		((uint32_t)sw_txq2_cw_rand_force_val << SW_TXQ2_CW_RAND_FORCE_VAL_OFFSET) ;
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_CW_FORCE_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_CW_FORCE_ADDR), tmp);
}
static __inline void mac_txq2_cw_force_unpack(volatile uint32_t* sw_txq2_cw_rand_force_en, volatile uint32_t* sw_txq2_cw_rand_force_val)
{
	uint32_t tmp;

	tmp = mac_txq2_cw_force_get();
	*sw_txq2_cw_rand_force_en = (tmp & ((uint32_t)SW_TXQ2_CW_RAND_FORCE_EN_MASK)) >> SW_TXQ2_CW_RAND_FORCE_EN_OFFSET;
	*sw_txq2_cw_rand_force_val = (tmp & ((uint32_t)SW_TXQ2_CW_RAND_FORCE_VAL_MASK)) >> SW_TXQ2_CW_RAND_FORCE_VAL_OFFSET;
}
static __inline void mac_txq2_bkoff_ctrl_sw_txq2_bkoff_seed_load_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_BKOFF_CTRL_ADDR);
	tmp &= ~SW_TXQ2_BKOFF_SEED_LOAD_MASK;
	tmp |= (value << SW_TXQ2_BKOFF_SEED_LOAD_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_BKOFF_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_BKOFF_CTRL_ADDR), tmp);
}
static __inline void mac_txq2_bkoff_ctrl_sw_txq2_bkoff_seed_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_BKOFF_CTRL_ADDR);
	tmp &= ~SW_TXQ2_BKOFF_SEED_MASK;
	tmp |= (value << SW_TXQ2_BKOFF_SEED_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_BKOFF_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_BKOFF_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_txq2_bkoff_ctrl_sw_txq2_bkoff_seed_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_BKOFF_CTRL_ADDR)) & SW_TXQ2_BKOFF_SEED_MASK) >> SW_TXQ2_BKOFF_SEED_OFFSET;
}
static __inline void mac_txq2_bkoff_ctrl_set(uint32_t value)
{
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_BKOFF_CTRL_ADDR, value);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_BKOFF_CTRL_ADDR), value);
}
static __inline uint32_t mac_txq2_bkoff_ctrl_get(void)
{
	return (WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_BKOFF_CTRL_ADDR));
}
static __inline void mac_txq2_bkoff_ctrl_pack(uint32_t sw_txq2_bkoff_seed_load, uint32_t sw_txq2_bkoff_seed)
{
	uint32_t tmp;

	assert((((uint32_t)sw_txq2_bkoff_seed_load << SW_TXQ2_BKOFF_SEED_LOAD_OFFSET) & ~((uint32_t)SW_TXQ2_BKOFF_SEED_LOAD_MASK)) == 0);
	assert((((uint32_t)sw_txq2_bkoff_seed << SW_TXQ2_BKOFF_SEED_OFFSET) & ~((uint32_t)SW_TXQ2_BKOFF_SEED_MASK)) == 0);
	tmp =
		((uint32_t)sw_txq2_bkoff_seed_load << SW_TXQ2_BKOFF_SEED_LOAD_OFFSET) |
		((uint32_t)sw_txq2_bkoff_seed << SW_TXQ2_BKOFF_SEED_OFFSET) ;
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_BKOFF_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_BKOFF_CTRL_ADDR), tmp);
}
static __inline void mac_txq2_bkoff_ctrl_unpack(volatile uint32_t* sw_txq2_bkoff_seed)
{
	uint32_t tmp;

	tmp = mac_txq2_bkoff_ctrl_get();
	*sw_txq2_bkoff_seed = (tmp & ((uint32_t)SW_TXQ2_BKOFF_SEED_MASK)) >> SW_TXQ2_BKOFF_SEED_OFFSET;
}
static __inline void mac_txq2_period_sw_txq2_txop_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_PERIOD_ADDR);
	tmp &= ~SW_TXQ2_TXOP_MASK;
	tmp |= (value << SW_TXQ2_TXOP_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_PERIOD_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_PERIOD_ADDR), tmp);
}
static __inline uint32_t mac_txq2_period_sw_txq2_txop_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_PERIOD_ADDR)) & SW_TXQ2_TXOP_MASK) >> SW_TXQ2_TXOP_OFFSET;
}
static __inline void mac_txq2_period_set(uint32_t value)
{
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_PERIOD_ADDR, value);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_PERIOD_ADDR), value);
}
static __inline uint32_t mac_txq2_period_get(void)
{
	return (WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_PERIOD_ADDR));
}
static __inline void mac_txq2_period_pack(uint32_t sw_txq2_txop)
{
	uint32_t tmp;

	assert((((uint32_t)sw_txq2_txop << SW_TXQ2_TXOP_OFFSET) & ~((uint32_t)SW_TXQ2_TXOP_MASK)) == 0);
	tmp =
		((uint32_t)sw_txq2_txop << SW_TXQ2_TXOP_OFFSET) ;
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_PERIOD_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_PERIOD_ADDR), tmp);
}
static __inline void mac_txq2_period_unpack(volatile uint32_t* sw_txq2_txop)
{
	uint32_t tmp;

	tmp = mac_txq2_period_get();
	*sw_txq2_txop = (tmp & ((uint32_t)SW_TXQ2_TXOP_MASK)) >> SW_TXQ2_TXOP_OFFSET;
}
static __inline void mac_txq2_int_ctrl_sw_txq2_desc_done_int_mitigation_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_INT_CTRL_ADDR);
	tmp &= ~SW_TXQ2_DESC_DONE_INT_MITIGATION_MASK;
	tmp |= (value << SW_TXQ2_DESC_DONE_INT_MITIGATION_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_INT_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_INT_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_txq2_int_ctrl_sw_txq2_desc_done_int_mitigation_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_INT_CTRL_ADDR)) & SW_TXQ2_DESC_DONE_INT_MITIGATION_MASK) >> SW_TXQ2_DESC_DONE_INT_MITIGATION_OFFSET;
}
static __inline void mac_txq2_int_ctrl_sw_txq2_desc_done_int_timeout_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_INT_CTRL_ADDR);
	tmp &= ~SW_TXQ2_DESC_DONE_INT_TIMEOUT_MASK;
	tmp |= (value << SW_TXQ2_DESC_DONE_INT_TIMEOUT_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_INT_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_INT_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_txq2_int_ctrl_sw_txq2_desc_done_int_timeout_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_INT_CTRL_ADDR)) & SW_TXQ2_DESC_DONE_INT_TIMEOUT_MASK) >> SW_TXQ2_DESC_DONE_INT_TIMEOUT_OFFSET;
}
static __inline void mac_txq2_int_ctrl_set(uint32_t value)
{
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_INT_CTRL_ADDR, value);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_INT_CTRL_ADDR), value);
}
static __inline uint32_t mac_txq2_int_ctrl_get(void)
{
	return (WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_INT_CTRL_ADDR));
}
static __inline void mac_txq2_int_ctrl_pack(uint32_t sw_txq2_desc_done_int_mitigation, uint32_t sw_txq2_desc_done_int_timeout)
{
	uint32_t tmp;

	assert((((uint32_t)sw_txq2_desc_done_int_mitigation << SW_TXQ2_DESC_DONE_INT_MITIGATION_OFFSET) & ~((uint32_t)SW_TXQ2_DESC_DONE_INT_MITIGATION_MASK)) == 0);
	assert((((uint32_t)sw_txq2_desc_done_int_timeout << SW_TXQ2_DESC_DONE_INT_TIMEOUT_OFFSET) & ~((uint32_t)SW_TXQ2_DESC_DONE_INT_TIMEOUT_MASK)) == 0);
	tmp =
		((uint32_t)sw_txq2_desc_done_int_mitigation << SW_TXQ2_DESC_DONE_INT_MITIGATION_OFFSET) |
		((uint32_t)sw_txq2_desc_done_int_timeout << SW_TXQ2_DESC_DONE_INT_TIMEOUT_OFFSET) ;
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_INT_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_INT_CTRL_ADDR), tmp);
}
static __inline void mac_txq2_int_ctrl_unpack(volatile uint32_t* sw_txq2_desc_done_int_mitigation, volatile uint32_t* sw_txq2_desc_done_int_timeout)
{
	uint32_t tmp;

	tmp = mac_txq2_int_ctrl_get();
	*sw_txq2_desc_done_int_mitigation = (tmp & ((uint32_t)SW_TXQ2_DESC_DONE_INT_MITIGATION_MASK)) >> SW_TXQ2_DESC_DONE_INT_MITIGATION_OFFSET;
	*sw_txq2_desc_done_int_timeout = (tmp & ((uint32_t)SW_TXQ2_DESC_DONE_INT_TIMEOUT_MASK)) >> SW_TXQ2_DESC_DONE_INT_TIMEOUT_OFFSET;
}
static __inline uint32_t mac_txq2_sts_0_sw_ro_txq2_desc_access_fsm_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_STS_0_ADDR)) & SW_RO_TXQ2_DESC_ACCESS_FSM_MASK) >> SW_RO_TXQ2_DESC_ACCESS_FSM_OFFSET;
}
static __inline uint32_t mac_txq2_sts_0_sw_ro_txq2_chn_acess_fsm_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_STS_0_ADDR)) & SW_RO_TXQ2_CHN_ACESS_FSM_MASK) >> SW_RO_TXQ2_CHN_ACESS_FSM_OFFSET;
}
static __inline uint32_t mac_txq2_sts_0_get(void)
{
	return (WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_STS_0_ADDR));
}
static __inline void mac_txq2_sts_0_unpack(volatile uint32_t* sw_ro_txq2_desc_access_fsm, volatile uint32_t* sw_ro_txq2_chn_acess_fsm)
{
	uint32_t tmp;

	tmp = mac_txq2_sts_0_get();
	*sw_ro_txq2_desc_access_fsm = (tmp & ((uint32_t)SW_RO_TXQ2_DESC_ACCESS_FSM_MASK)) >> SW_RO_TXQ2_DESC_ACCESS_FSM_OFFSET;
	*sw_ro_txq2_chn_acess_fsm = (tmp & ((uint32_t)SW_RO_TXQ2_CHN_ACESS_FSM_MASK)) >> SW_RO_TXQ2_CHN_ACESS_FSM_OFFSET;
}
static __inline uint32_t mac_txq2_dbg_bus_0_sts_sw_txq2_dbg_bus_0_sts_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_DBG_BUS_0_STS_ADDR)) & SW_TXQ2_DBG_BUS_0_STS_MASK) >> SW_TXQ2_DBG_BUS_0_STS_OFFSET;
}
static __inline uint32_t mac_txq2_dbg_bus_0_sts_get(void)
{
	return (WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_DBG_BUS_0_STS_ADDR));
}
static __inline void mac_txq2_dbg_bus_0_sts_unpack(volatile uint32_t* sw_txq2_dbg_bus_0_sts)
{
	uint32_t tmp;

	tmp = mac_txq2_dbg_bus_0_sts_get();
	*sw_txq2_dbg_bus_0_sts = (tmp & ((uint32_t)SW_TXQ2_DBG_BUS_0_STS_MASK)) >> SW_TXQ2_DBG_BUS_0_STS_OFFSET;
}
static __inline void mac_txq2_dbg_bus_0_clr_sw_txq2_dbg_bus_0_clr_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_DBG_BUS_0_CLR_ADDR);
	tmp &= ~SW_TXQ2_DBG_BUS_0_CLR_MASK;
	tmp |= (value << SW_TXQ2_DBG_BUS_0_CLR_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_DBG_BUS_0_CLR_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_DBG_BUS_0_CLR_ADDR), tmp);
}
static __inline void mac_txq2_dbg_bus_0_clr_set(uint32_t value)
{
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_DBG_BUS_0_CLR_ADDR, value);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_DBG_BUS_0_CLR_ADDR), value);
}
static __inline void mac_txq2_dbg_bus_0_clr_pack(uint32_t sw_txq2_dbg_bus_0_clr)
{
	uint32_t tmp;

	assert((((uint32_t)sw_txq2_dbg_bus_0_clr << SW_TXQ2_DBG_BUS_0_CLR_OFFSET) & ~((uint32_t)SW_TXQ2_DBG_BUS_0_CLR_MASK)) == 0);
	tmp =
		((uint32_t)sw_txq2_dbg_bus_0_clr << SW_TXQ2_DBG_BUS_0_CLR_OFFSET) ;
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_DBG_BUS_0_CLR_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_DBG_BUS_0_CLR_ADDR), tmp);
}
static __inline void mac_txq2_tx_stat_sts_clr_sw_txq2_rts_tx_ok_cnt_clr_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_TX_STAT_STS_CLR_ADDR);
	tmp &= ~SW_TXQ2_RTS_TX_OK_CNT_CLR_MASK;
	tmp |= (value << SW_TXQ2_RTS_TX_OK_CNT_CLR_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_TX_STAT_STS_CLR_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_TX_STAT_STS_CLR_ADDR), tmp);
}
static __inline void mac_txq2_tx_stat_sts_clr_sw_txq2_cts_tx_ok_cnt_clr_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_TX_STAT_STS_CLR_ADDR);
	tmp &= ~SW_TXQ2_CTS_TX_OK_CNT_CLR_MASK;
	tmp |= (value << SW_TXQ2_CTS_TX_OK_CNT_CLR_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_TX_STAT_STS_CLR_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_TX_STAT_STS_CLR_ADDR), tmp);
}
static __inline void mac_txq2_tx_stat_sts_clr_sw_txq2_frame_tx_ok_cnt_clr_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_TX_STAT_STS_CLR_ADDR);
	tmp &= ~SW_TXQ2_FRAME_TX_OK_CNT_CLR_MASK;
	tmp |= (value << SW_TXQ2_FRAME_TX_OK_CNT_CLR_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_TX_STAT_STS_CLR_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_TX_STAT_STS_CLR_ADDR), tmp);
}
static __inline void mac_txq2_tx_stat_sts_clr_sw_txq2_cfend_tx_ok_cnt_clr_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_TX_STAT_STS_CLR_ADDR);
	tmp &= ~SW_TXQ2_CFEND_TX_OK_CNT_CLR_MASK;
	tmp |= (value << SW_TXQ2_CFEND_TX_OK_CNT_CLR_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_TX_STAT_STS_CLR_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_TX_STAT_STS_CLR_ADDR), tmp);
}
static __inline void mac_txq2_tx_stat_sts_clr_sw_txq2_rts_tx_fail_cnt_clr_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_TX_STAT_STS_CLR_ADDR);
	tmp &= ~SW_TXQ2_RTS_TX_FAIL_CNT_CLR_MASK;
	tmp |= (value << SW_TXQ2_RTS_TX_FAIL_CNT_CLR_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_TX_STAT_STS_CLR_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_TX_STAT_STS_CLR_ADDR), tmp);
}
static __inline void mac_txq2_tx_stat_sts_clr_sw_txq2_frame_tx_fail_cnt_clr_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_TX_STAT_STS_CLR_ADDR);
	tmp &= ~SW_TXQ2_FRAME_TX_FAIL_CNT_CLR_MASK;
	tmp |= (value << SW_TXQ2_FRAME_TX_FAIL_CNT_CLR_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_TX_STAT_STS_CLR_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_TX_STAT_STS_CLR_ADDR), tmp);
}
static __inline void mac_txq2_tx_stat_sts_clr_set(uint32_t value)
{
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_TX_STAT_STS_CLR_ADDR, value);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_TX_STAT_STS_CLR_ADDR), value);
}
static __inline uint32_t mac_txq2_tx_stat_sts_clr_get(void)
{
	return (WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_TX_STAT_STS_CLR_ADDR));
}
static __inline void mac_txq2_tx_stat_sts_clr_pack(uint32_t sw_txq2_rts_tx_ok_cnt_clr, uint32_t sw_txq2_cts_tx_ok_cnt_clr, uint32_t sw_txq2_frame_tx_ok_cnt_clr, uint32_t sw_txq2_cfend_tx_ok_cnt_clr, uint32_t sw_txq2_rts_tx_fail_cnt_clr, uint32_t sw_txq2_frame_tx_fail_cnt_clr)
{
	uint32_t tmp;

	assert((((uint32_t)sw_txq2_rts_tx_ok_cnt_clr << SW_TXQ2_RTS_TX_OK_CNT_CLR_OFFSET) & ~((uint32_t)SW_TXQ2_RTS_TX_OK_CNT_CLR_MASK)) == 0);
	assert((((uint32_t)sw_txq2_cts_tx_ok_cnt_clr << SW_TXQ2_CTS_TX_OK_CNT_CLR_OFFSET) & ~((uint32_t)SW_TXQ2_CTS_TX_OK_CNT_CLR_MASK)) == 0);
	assert((((uint32_t)sw_txq2_frame_tx_ok_cnt_clr << SW_TXQ2_FRAME_TX_OK_CNT_CLR_OFFSET) & ~((uint32_t)SW_TXQ2_FRAME_TX_OK_CNT_CLR_MASK)) == 0);
	assert((((uint32_t)sw_txq2_cfend_tx_ok_cnt_clr << SW_TXQ2_CFEND_TX_OK_CNT_CLR_OFFSET) & ~((uint32_t)SW_TXQ2_CFEND_TX_OK_CNT_CLR_MASK)) == 0);
	assert((((uint32_t)sw_txq2_rts_tx_fail_cnt_clr << SW_TXQ2_RTS_TX_FAIL_CNT_CLR_OFFSET) & ~((uint32_t)SW_TXQ2_RTS_TX_FAIL_CNT_CLR_MASK)) == 0);
	assert((((uint32_t)sw_txq2_frame_tx_fail_cnt_clr << SW_TXQ2_FRAME_TX_FAIL_CNT_CLR_OFFSET) & ~((uint32_t)SW_TXQ2_FRAME_TX_FAIL_CNT_CLR_MASK)) == 0);
	tmp =
		((uint32_t)sw_txq2_rts_tx_ok_cnt_clr << SW_TXQ2_RTS_TX_OK_CNT_CLR_OFFSET) |
		((uint32_t)sw_txq2_cts_tx_ok_cnt_clr << SW_TXQ2_CTS_TX_OK_CNT_CLR_OFFSET) |
		((uint32_t)sw_txq2_frame_tx_ok_cnt_clr << SW_TXQ2_FRAME_TX_OK_CNT_CLR_OFFSET) |
		((uint32_t)sw_txq2_cfend_tx_ok_cnt_clr << SW_TXQ2_CFEND_TX_OK_CNT_CLR_OFFSET) |
		((uint32_t)sw_txq2_rts_tx_fail_cnt_clr << SW_TXQ2_RTS_TX_FAIL_CNT_CLR_OFFSET) |
		((uint32_t)sw_txq2_frame_tx_fail_cnt_clr << SW_TXQ2_FRAME_TX_FAIL_CNT_CLR_OFFSET) ;
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_TX_STAT_STS_CLR_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_TX_STAT_STS_CLR_ADDR), tmp);
}
static __inline uint32_t mac_txq2_tx_stat_sts_0_sw_ro_txq2_rts_tx_ok_cnt_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_TX_STAT_STS_0_ADDR)) & SW_RO_TXQ2_RTS_TX_OK_CNT_MASK) >> SW_RO_TXQ2_RTS_TX_OK_CNT_OFFSET;
}
static __inline uint32_t mac_txq2_tx_stat_sts_0_sw_ro_txq2_cts_tx_ok_cnt_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_TX_STAT_STS_0_ADDR)) & SW_RO_TXQ2_CTS_TX_OK_CNT_MASK) >> SW_RO_TXQ2_CTS_TX_OK_CNT_OFFSET;
}
static __inline uint32_t mac_txq2_tx_stat_sts_0_get(void)
{
	return (WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_TX_STAT_STS_0_ADDR));
}
static __inline void mac_txq2_tx_stat_sts_0_unpack(volatile uint32_t* sw_ro_txq2_rts_tx_ok_cnt, volatile uint32_t* sw_ro_txq2_cts_tx_ok_cnt)
{
	uint32_t tmp;

	tmp = mac_txq2_tx_stat_sts_0_get();
	*sw_ro_txq2_rts_tx_ok_cnt = (tmp & ((uint32_t)SW_RO_TXQ2_RTS_TX_OK_CNT_MASK)) >> SW_RO_TXQ2_RTS_TX_OK_CNT_OFFSET;
	*sw_ro_txq2_cts_tx_ok_cnt = (tmp & ((uint32_t)SW_RO_TXQ2_CTS_TX_OK_CNT_MASK)) >> SW_RO_TXQ2_CTS_TX_OK_CNT_OFFSET;
}
static __inline uint32_t mac_txq2_tx_stat_sts_1_sw_ro_txq2_frame_tx_ok_cnt_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_TX_STAT_STS_1_ADDR)) & SW_RO_TXQ2_FRAME_TX_OK_CNT_MASK) >> SW_RO_TXQ2_FRAME_TX_OK_CNT_OFFSET;
}
static __inline uint32_t mac_txq2_tx_stat_sts_1_sw_ro_txq2_cfend_tx_ok_cnt_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_TX_STAT_STS_1_ADDR)) & SW_RO_TXQ2_CFEND_TX_OK_CNT_MASK) >> SW_RO_TXQ2_CFEND_TX_OK_CNT_OFFSET;
}
static __inline uint32_t mac_txq2_tx_stat_sts_1_get(void)
{
	return (WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_TX_STAT_STS_1_ADDR));
}
static __inline void mac_txq2_tx_stat_sts_1_unpack(volatile uint32_t* sw_ro_txq2_frame_tx_ok_cnt, volatile uint32_t* sw_ro_txq2_cfend_tx_ok_cnt)
{
	uint32_t tmp;

	tmp = mac_txq2_tx_stat_sts_1_get();
	*sw_ro_txq2_frame_tx_ok_cnt = (tmp & ((uint32_t)SW_RO_TXQ2_FRAME_TX_OK_CNT_MASK)) >> SW_RO_TXQ2_FRAME_TX_OK_CNT_OFFSET;
	*sw_ro_txq2_cfend_tx_ok_cnt = (tmp & ((uint32_t)SW_RO_TXQ2_CFEND_TX_OK_CNT_MASK)) >> SW_RO_TXQ2_CFEND_TX_OK_CNT_OFFSET;
}
static __inline uint32_t mac_txq2_tx_stat_sts_2_sw_ro_txq2_rts_tx_fail_cnt_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_TX_STAT_STS_2_ADDR)) & SW_RO_TXQ2_RTS_TX_FAIL_CNT_MASK) >> SW_RO_TXQ2_RTS_TX_FAIL_CNT_OFFSET;
}
static __inline uint32_t mac_txq2_tx_stat_sts_2_sw_ro_txq2_frame_tx_fail_cnt_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_TX_STAT_STS_2_ADDR)) & SW_RO_TXQ2_FRAME_TX_FAIL_CNT_MASK) >> SW_RO_TXQ2_FRAME_TX_FAIL_CNT_OFFSET;
}
static __inline uint32_t mac_txq2_tx_stat_sts_2_get(void)
{
	return (WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_TX_STAT_STS_2_ADDR));
}
static __inline void mac_txq2_tx_stat_sts_2_unpack(volatile uint32_t* sw_ro_txq2_rts_tx_fail_cnt, volatile uint32_t* sw_ro_txq2_frame_tx_fail_cnt)
{
	uint32_t tmp;

	tmp = mac_txq2_tx_stat_sts_2_get();
	*sw_ro_txq2_rts_tx_fail_cnt = (tmp & ((uint32_t)SW_RO_TXQ2_RTS_TX_FAIL_CNT_MASK)) >> SW_RO_TXQ2_RTS_TX_FAIL_CNT_OFFSET;
	*sw_ro_txq2_frame_tx_fail_cnt = (tmp & ((uint32_t)SW_RO_TXQ2_FRAME_TX_FAIL_CNT_MASK)) >> SW_RO_TXQ2_FRAME_TX_FAIL_CNT_OFFSET;
}
static __inline uint32_t mac_txq2_tx_stat_sts_3_sw_ro_txq2_tx_desc_ptr_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_TX_STAT_STS_3_ADDR)) & SW_RO_TXQ2_TX_DESC_PTR_MASK) >> SW_RO_TXQ2_TX_DESC_PTR_OFFSET;
}
static __inline uint32_t mac_txq2_tx_stat_sts_3_get(void)
{
	return (WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_TX_STAT_STS_3_ADDR));
}
static __inline void mac_txq2_tx_stat_sts_3_unpack(volatile uint32_t* sw_ro_txq2_tx_desc_ptr)
{
	uint32_t tmp;

	tmp = mac_txq2_tx_stat_sts_3_get();
	*sw_ro_txq2_tx_desc_ptr = (tmp & ((uint32_t)SW_RO_TXQ2_TX_DESC_PTR_MASK)) >> SW_RO_TXQ2_TX_DESC_PTR_OFFSET;
}
static __inline uint32_t mac_txq2_pcs_busy_monitor_stat_sw_ro_txq2_pcs_busy_stuck_tx_cnt_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_PCS_BUSY_MONITOR_STAT_ADDR)) & SW_RO_TXQ2_PCS_BUSY_STUCK_TX_CNT_MASK) >> SW_RO_TXQ2_PCS_BUSY_STUCK_TX_CNT_OFFSET;
}
static __inline uint32_t mac_txq2_pcs_busy_monitor_stat_get(void)
{
	return (WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_PCS_BUSY_MONITOR_STAT_ADDR));
}
static __inline void mac_txq2_pcs_busy_monitor_stat_unpack(volatile uint32_t* sw_ro_txq2_pcs_busy_stuck_tx_cnt)
{
	uint32_t tmp;

	tmp = mac_txq2_pcs_busy_monitor_stat_get();
	*sw_ro_txq2_pcs_busy_stuck_tx_cnt = (tmp & ((uint32_t)SW_RO_TXQ2_PCS_BUSY_STUCK_TX_CNT_MASK)) >> SW_RO_TXQ2_PCS_BUSY_STUCK_TX_CNT_OFFSET;
}
static __inline void mac_txq2_dbg_cw_ctrl_sw_txq2_dbg_cw_clr_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_DBG_CW_CTRL_ADDR);
	tmp &= ~SW_TXQ2_DBG_CW_CLR_MASK;
	tmp |= (value << SW_TXQ2_DBG_CW_CLR_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_DBG_CW_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_DBG_CW_CTRL_ADDR), tmp);
}
static __inline void mac_txq2_dbg_cw_ctrl_set(uint32_t value)
{
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_DBG_CW_CTRL_ADDR, value);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_DBG_CW_CTRL_ADDR), value);
}
static __inline uint32_t mac_txq2_dbg_cw_ctrl_get(void)
{
	return (WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_DBG_CW_CTRL_ADDR));
}
static __inline void mac_txq2_dbg_cw_ctrl_pack(uint32_t sw_txq2_dbg_cw_clr)
{
	uint32_t tmp;

	assert((((uint32_t)sw_txq2_dbg_cw_clr << SW_TXQ2_DBG_CW_CLR_OFFSET) & ~((uint32_t)SW_TXQ2_DBG_CW_CLR_MASK)) == 0);
	tmp =
		((uint32_t)sw_txq2_dbg_cw_clr << SW_TXQ2_DBG_CW_CLR_OFFSET) ;
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_DBG_CW_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_DBG_CW_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_txq2_dbg_cw_sts_sw_ro_txq2_cw_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_DBG_CW_STS_ADDR)) & SW_RO_TXQ2_CW_MASK) >> SW_RO_TXQ2_CW_OFFSET;
}
static __inline uint32_t mac_txq2_dbg_cw_sts_sw_ro_txq2_cw_rtl_max_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_DBG_CW_STS_ADDR)) & SW_RO_TXQ2_CW_RTL_MAX_MASK) >> SW_RO_TXQ2_CW_RTL_MAX_OFFSET;
}
static __inline uint32_t mac_txq2_dbg_cw_sts_get(void)
{
	return (WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ2_DBG_CW_STS_ADDR));
}
static __inline void mac_txq2_dbg_cw_sts_unpack(volatile uint32_t* sw_ro_txq2_cw, volatile uint32_t* sw_ro_txq2_cw_rtl_max)
{
	uint32_t tmp;

	tmp = mac_txq2_dbg_cw_sts_get();
	*sw_ro_txq2_cw = (tmp & ((uint32_t)SW_RO_TXQ2_CW_MASK)) >> SW_RO_TXQ2_CW_OFFSET;
	*sw_ro_txq2_cw_rtl_max = (tmp & ((uint32_t)SW_RO_TXQ2_CW_RTL_MAX_MASK)) >> SW_RO_TXQ2_CW_RTL_MAX_OFFSET;
}
static __inline void mac_txq3_enable_sw_txq3_srst_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_ENABLE_ADDR);
	tmp &= ~SW_TXQ3_SRST_MASK;
	tmp |= (value << SW_TXQ3_SRST_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_ENABLE_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_ENABLE_ADDR), tmp);
}
static __inline void mac_txq3_enable_sw_txq3_dbg_info_clr_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_ENABLE_ADDR);
	tmp &= ~SW_TXQ3_DBG_INFO_CLR_MASK;
	tmp |= (value << SW_TXQ3_DBG_INFO_CLR_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_ENABLE_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_ENABLE_ADDR), tmp);
}
static __inline void mac_txq3_enable_sw_txq3_dummy_trig_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_ENABLE_ADDR);
	tmp &= ~SW_TXQ3_DUMMY_TRIG_MASK;
	tmp |= (value << SW_TXQ3_DUMMY_TRIG_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_ENABLE_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_ENABLE_ADDR), tmp);
}
static __inline void mac_txq3_enable_sw_txq3_dis_pls_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_ENABLE_ADDR);
	tmp &= ~SW_TXQ3_DIS_PLS_MASK;
	tmp |= (value << SW_TXQ3_DIS_PLS_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_ENABLE_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_ENABLE_ADDR), tmp);
}
static __inline void mac_txq3_enable_sw_txq3_en_pls_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_ENABLE_ADDR);
	tmp &= ~SW_TXQ3_EN_PLS_MASK;
	tmp |= (value << SW_TXQ3_EN_PLS_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_ENABLE_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_ENABLE_ADDR), tmp);
}
static __inline void mac_txq3_enable_set(uint32_t value)
{
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_ENABLE_ADDR, value);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_ENABLE_ADDR), value);
}
static __inline uint32_t mac_txq3_enable_get(void)
{
	return (WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_ENABLE_ADDR));
}
static __inline void mac_txq3_enable_pack(uint32_t sw_txq3_srst, uint32_t sw_txq3_dbg_info_clr, uint32_t sw_txq3_dummy_trig, uint32_t sw_txq3_dis_pls, uint32_t sw_txq3_en_pls)
{
	uint32_t tmp;

	assert((((uint32_t)sw_txq3_srst << SW_TXQ3_SRST_OFFSET) & ~((uint32_t)SW_TXQ3_SRST_MASK)) == 0);
	assert((((uint32_t)sw_txq3_dbg_info_clr << SW_TXQ3_DBG_INFO_CLR_OFFSET) & ~((uint32_t)SW_TXQ3_DBG_INFO_CLR_MASK)) == 0);
	assert((((uint32_t)sw_txq3_dummy_trig << SW_TXQ3_DUMMY_TRIG_OFFSET) & ~((uint32_t)SW_TXQ3_DUMMY_TRIG_MASK)) == 0);
	assert((((uint32_t)sw_txq3_dis_pls << SW_TXQ3_DIS_PLS_OFFSET) & ~((uint32_t)SW_TXQ3_DIS_PLS_MASK)) == 0);
	assert((((uint32_t)sw_txq3_en_pls << SW_TXQ3_EN_PLS_OFFSET) & ~((uint32_t)SW_TXQ3_EN_PLS_MASK)) == 0);
	tmp =
		((uint32_t)sw_txq3_srst << SW_TXQ3_SRST_OFFSET) |
		((uint32_t)sw_txq3_dbg_info_clr << SW_TXQ3_DBG_INFO_CLR_OFFSET) |
		((uint32_t)sw_txq3_dummy_trig << SW_TXQ3_DUMMY_TRIG_OFFSET) |
		((uint32_t)sw_txq3_dis_pls << SW_TXQ3_DIS_PLS_OFFSET) |
		((uint32_t)sw_txq3_en_pls << SW_TXQ3_EN_PLS_OFFSET) ;
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_ENABLE_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_ENABLE_ADDR), tmp);
}
static __inline void mac_txq3_ctrl_sw_txq3_dummy_int_en_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_CTRL_ADDR);
	tmp &= ~SW_TXQ3_DUMMY_INT_EN_MASK;
	tmp |= (value << SW_TXQ3_DUMMY_INT_EN_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_txq3_ctrl_sw_txq3_dummy_int_en_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_CTRL_ADDR)) & SW_TXQ3_DUMMY_INT_EN_MASK) >> SW_TXQ3_DUMMY_INT_EN_OFFSET;
}
static __inline void mac_txq3_ctrl_sw_txq3_hw_frame_fc_power_mode_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_CTRL_ADDR);
	tmp &= ~SW_TXQ3_HW_FRAME_FC_POWER_MODE_MASK;
	tmp |= (value << SW_TXQ3_HW_FRAME_FC_POWER_MODE_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_txq3_ctrl_sw_txq3_hw_frame_fc_power_mode_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_CTRL_ADDR)) & SW_TXQ3_HW_FRAME_FC_POWER_MODE_MASK) >> SW_TXQ3_HW_FRAME_FC_POWER_MODE_OFFSET;
}
static __inline void mac_txq3_ctrl_sw_txq3_cf_end_en_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_CTRL_ADDR);
	tmp &= ~SW_TXQ3_CF_END_EN_MASK;
	tmp |= (value << SW_TXQ3_CF_END_EN_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_txq3_ctrl_sw_txq3_cf_end_en_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_CTRL_ADDR)) & SW_TXQ3_CF_END_EN_MASK) >> SW_TXQ3_CF_END_EN_OFFSET;
}
static __inline void mac_txq3_ctrl_sw_txq3_cw_min_set_pls_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_CTRL_ADDR);
	tmp &= ~SW_TXQ3_CW_MIN_SET_PLS_MASK;
	tmp |= (value << SW_TXQ3_CW_MIN_SET_PLS_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_CTRL_ADDR), tmp);
}
static __inline void mac_txq3_ctrl_set(uint32_t value)
{
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_CTRL_ADDR, value);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_CTRL_ADDR), value);
}
static __inline uint32_t mac_txq3_ctrl_get(void)
{
	return (WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_CTRL_ADDR));
}
static __inline void mac_txq3_ctrl_pack(uint32_t sw_txq3_dummy_int_en, uint32_t sw_txq3_hw_frame_fc_power_mode, uint32_t sw_txq3_cf_end_en, uint32_t sw_txq3_cw_min_set_pls)
{
	uint32_t tmp;

	assert((((uint32_t)sw_txq3_dummy_int_en << SW_TXQ3_DUMMY_INT_EN_OFFSET) & ~((uint32_t)SW_TXQ3_DUMMY_INT_EN_MASK)) == 0);
	assert((((uint32_t)sw_txq3_hw_frame_fc_power_mode << SW_TXQ3_HW_FRAME_FC_POWER_MODE_OFFSET) & ~((uint32_t)SW_TXQ3_HW_FRAME_FC_POWER_MODE_MASK)) == 0);
	assert((((uint32_t)sw_txq3_cf_end_en << SW_TXQ3_CF_END_EN_OFFSET) & ~((uint32_t)SW_TXQ3_CF_END_EN_MASK)) == 0);
	assert((((uint32_t)sw_txq3_cw_min_set_pls << SW_TXQ3_CW_MIN_SET_PLS_OFFSET) & ~((uint32_t)SW_TXQ3_CW_MIN_SET_PLS_MASK)) == 0);
	tmp =
		((uint32_t)sw_txq3_dummy_int_en << SW_TXQ3_DUMMY_INT_EN_OFFSET) |
		((uint32_t)sw_txq3_hw_frame_fc_power_mode << SW_TXQ3_HW_FRAME_FC_POWER_MODE_OFFSET) |
		((uint32_t)sw_txq3_cf_end_en << SW_TXQ3_CF_END_EN_OFFSET) |
		((uint32_t)sw_txq3_cw_min_set_pls << SW_TXQ3_CW_MIN_SET_PLS_OFFSET) ;
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_CTRL_ADDR), tmp);
}
static __inline void mac_txq3_ctrl_unpack(volatile uint32_t* sw_txq3_dummy_int_en, volatile uint32_t* sw_txq3_hw_frame_fc_power_mode, volatile uint32_t* sw_txq3_cf_end_en)
{
	uint32_t tmp;

	tmp = mac_txq3_ctrl_get();
	*sw_txq3_dummy_int_en = (tmp & ((uint32_t)SW_TXQ3_DUMMY_INT_EN_MASK)) >> SW_TXQ3_DUMMY_INT_EN_OFFSET;
	*sw_txq3_hw_frame_fc_power_mode = (tmp & ((uint32_t)SW_TXQ3_HW_FRAME_FC_POWER_MODE_MASK)) >> SW_TXQ3_HW_FRAME_FC_POWER_MODE_OFFSET;
	*sw_txq3_cf_end_en = (tmp & ((uint32_t)SW_TXQ3_CF_END_EN_MASK)) >> SW_TXQ3_CF_END_EN_OFFSET;
}
static __inline void mac_txq3_ifs_ctrl_sw_txq3_eifs_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_IFS_CTRL_ADDR);
	tmp &= ~SW_TXQ3_EIFS_MASK;
	tmp |= (value << SW_TXQ3_EIFS_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_IFS_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_IFS_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_txq3_ifs_ctrl_sw_txq3_eifs_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_IFS_CTRL_ADDR)) & SW_TXQ3_EIFS_MASK) >> SW_TXQ3_EIFS_OFFSET;
}
static __inline void mac_txq3_ifs_ctrl_sw_txq3_difs_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_IFS_CTRL_ADDR);
	tmp &= ~SW_TXQ3_DIFS_MASK;
	tmp |= (value << SW_TXQ3_DIFS_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_IFS_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_IFS_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_txq3_ifs_ctrl_sw_txq3_difs_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_IFS_CTRL_ADDR)) & SW_TXQ3_DIFS_MASK) >> SW_TXQ3_DIFS_OFFSET;
}
static __inline void mac_txq3_ifs_ctrl_set(uint32_t value)
{
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_IFS_CTRL_ADDR, value);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_IFS_CTRL_ADDR), value);
}
static __inline uint32_t mac_txq3_ifs_ctrl_get(void)
{
	return (WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_IFS_CTRL_ADDR));
}
static __inline void mac_txq3_ifs_ctrl_pack(uint32_t sw_txq3_eifs, uint32_t sw_txq3_difs)
{
	uint32_t tmp;

	assert((((uint32_t)sw_txq3_eifs << SW_TXQ3_EIFS_OFFSET) & ~((uint32_t)SW_TXQ3_EIFS_MASK)) == 0);
	assert((((uint32_t)sw_txq3_difs << SW_TXQ3_DIFS_OFFSET) & ~((uint32_t)SW_TXQ3_DIFS_MASK)) == 0);
	tmp =
		((uint32_t)sw_txq3_eifs << SW_TXQ3_EIFS_OFFSET) |
		((uint32_t)sw_txq3_difs << SW_TXQ3_DIFS_OFFSET) ;
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_IFS_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_IFS_CTRL_ADDR), tmp);
}
static __inline void mac_txq3_ifs_ctrl_unpack(volatile uint32_t* sw_txq3_eifs, volatile uint32_t* sw_txq3_difs)
{
	uint32_t tmp;

	tmp = mac_txq3_ifs_ctrl_get();
	*sw_txq3_eifs = (tmp & ((uint32_t)SW_TXQ3_EIFS_MASK)) >> SW_TXQ3_EIFS_OFFSET;
	*sw_txq3_difs = (tmp & ((uint32_t)SW_TXQ3_DIFS_MASK)) >> SW_TXQ3_DIFS_OFFSET;
}
static __inline void mac_txq3_rsp_time_sw_txq3_resp_timeout_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_RSP_TIME_ADDR);
	tmp &= ~SW_TXQ3_RESP_TIMEOUT_MASK;
	tmp |= (value << SW_TXQ3_RESP_TIMEOUT_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_RSP_TIME_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_RSP_TIME_ADDR), tmp);
}
static __inline uint32_t mac_txq3_rsp_time_sw_txq3_resp_timeout_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_RSP_TIME_ADDR)) & SW_TXQ3_RESP_TIMEOUT_MASK) >> SW_TXQ3_RESP_TIMEOUT_OFFSET;
}
static __inline void mac_txq3_rsp_time_set(uint32_t value)
{
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_RSP_TIME_ADDR, value);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_RSP_TIME_ADDR), value);
}
static __inline uint32_t mac_txq3_rsp_time_get(void)
{
	return (WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_RSP_TIME_ADDR));
}
static __inline void mac_txq3_rsp_time_pack(uint32_t sw_txq3_resp_timeout)
{
	uint32_t tmp;

	assert((((uint32_t)sw_txq3_resp_timeout << SW_TXQ3_RESP_TIMEOUT_OFFSET) & ~((uint32_t)SW_TXQ3_RESP_TIMEOUT_MASK)) == 0);
	tmp =
		((uint32_t)sw_txq3_resp_timeout << SW_TXQ3_RESP_TIMEOUT_OFFSET) ;
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_RSP_TIME_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_RSP_TIME_ADDR), tmp);
}
static __inline void mac_txq3_rsp_time_unpack(volatile uint32_t* sw_txq3_resp_timeout)
{
	uint32_t tmp;

	tmp = mac_txq3_rsp_time_get();
	*sw_txq3_resp_timeout = (tmp & ((uint32_t)SW_TXQ3_RESP_TIMEOUT_MASK)) >> SW_TXQ3_RESP_TIMEOUT_OFFSET;
}
static __inline void mac_txq3_ptr_sw_txq3_start_ptr_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_PTR_ADDR);
	tmp &= ~SW_TXQ3_START_PTR_MASK;
	tmp |= (value << SW_TXQ3_START_PTR_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_PTR_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_PTR_ADDR), tmp);
}
static __inline uint32_t mac_txq3_ptr_sw_txq3_start_ptr_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_PTR_ADDR)) & SW_TXQ3_START_PTR_MASK) >> SW_TXQ3_START_PTR_OFFSET;
}
static __inline void mac_txq3_ptr_set(uint32_t value)
{
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_PTR_ADDR, value);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_PTR_ADDR), value);
}
static __inline uint32_t mac_txq3_ptr_get(void)
{
	return (WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_PTR_ADDR));
}
static __inline void mac_txq3_ptr_pack(uint32_t sw_txq3_start_ptr)
{
	uint32_t tmp;

	assert((((uint32_t)sw_txq3_start_ptr << SW_TXQ3_START_PTR_OFFSET) & ~((uint32_t)SW_TXQ3_START_PTR_MASK)) == 0);
	tmp =
		((uint32_t)sw_txq3_start_ptr << SW_TXQ3_START_PTR_OFFSET) ;
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_PTR_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_PTR_ADDR), tmp);
}
static __inline void mac_txq3_ptr_unpack(volatile uint32_t* sw_txq3_start_ptr)
{
	uint32_t tmp;

	tmp = mac_txq3_ptr_get();
	*sw_txq3_start_ptr = (tmp & ((uint32_t)SW_TXQ3_START_PTR_MASK)) >> SW_TXQ3_START_PTR_OFFSET;
}
static __inline void mac_txq3_tx_timeout_sw_txq3_timeout_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_TX_TIMEOUT_ADDR);
	tmp &= ~SW_TXQ3_TIMEOUT_MASK;
	tmp |= (value << SW_TXQ3_TIMEOUT_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_TX_TIMEOUT_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_TX_TIMEOUT_ADDR), tmp);
}
static __inline uint32_t mac_txq3_tx_timeout_sw_txq3_timeout_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_TX_TIMEOUT_ADDR)) & SW_TXQ3_TIMEOUT_MASK) >> SW_TXQ3_TIMEOUT_OFFSET;
}
static __inline void mac_txq3_tx_timeout_set(uint32_t value)
{
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_TX_TIMEOUT_ADDR, value);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_TX_TIMEOUT_ADDR), value);
}
static __inline uint32_t mac_txq3_tx_timeout_get(void)
{
	return (WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_TX_TIMEOUT_ADDR));
}
static __inline void mac_txq3_tx_timeout_pack(uint32_t sw_txq3_timeout)
{
	uint32_t tmp;

	assert((((uint32_t)sw_txq3_timeout << SW_TXQ3_TIMEOUT_OFFSET) & ~((uint32_t)SW_TXQ3_TIMEOUT_MASK)) == 0);
	tmp =
		((uint32_t)sw_txq3_timeout << SW_TXQ3_TIMEOUT_OFFSET) ;
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_TX_TIMEOUT_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_TX_TIMEOUT_ADDR), tmp);
}
static __inline void mac_txq3_tx_timeout_unpack(volatile uint32_t* sw_txq3_timeout)
{
	uint32_t tmp;

	tmp = mac_txq3_tx_timeout_get();
	*sw_txq3_timeout = (tmp & ((uint32_t)SW_TXQ3_TIMEOUT_MASK)) >> SW_TXQ3_TIMEOUT_OFFSET;
}
static __inline void mac_txq3_cw_sw_txq3_cw_max_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_CW_ADDR);
	tmp &= ~SW_TXQ3_CW_MAX_MASK;
	tmp |= (value << SW_TXQ3_CW_MAX_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_CW_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_CW_ADDR), tmp);
}
static __inline uint32_t mac_txq3_cw_sw_txq3_cw_max_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_CW_ADDR)) & SW_TXQ3_CW_MAX_MASK) >> SW_TXQ3_CW_MAX_OFFSET;
}
static __inline void mac_txq3_cw_sw_txq3_cw_min_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_CW_ADDR);
	tmp &= ~SW_TXQ3_CW_MIN_MASK;
	tmp |= (value << SW_TXQ3_CW_MIN_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_CW_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_CW_ADDR), tmp);
}
static __inline uint32_t mac_txq3_cw_sw_txq3_cw_min_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_CW_ADDR)) & SW_TXQ3_CW_MIN_MASK) >> SW_TXQ3_CW_MIN_OFFSET;
}
static __inline void mac_txq3_cw_set(uint32_t value)
{
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_CW_ADDR, value);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_CW_ADDR), value);
}
static __inline uint32_t mac_txq3_cw_get(void)
{
	return (WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_CW_ADDR));
}
static __inline void mac_txq3_cw_pack(uint32_t sw_txq3_cw_max, uint32_t sw_txq3_cw_min)
{
	uint32_t tmp;

	assert((((uint32_t)sw_txq3_cw_max << SW_TXQ3_CW_MAX_OFFSET) & ~((uint32_t)SW_TXQ3_CW_MAX_MASK)) == 0);
	assert((((uint32_t)sw_txq3_cw_min << SW_TXQ3_CW_MIN_OFFSET) & ~((uint32_t)SW_TXQ3_CW_MIN_MASK)) == 0);
	tmp =
		((uint32_t)sw_txq3_cw_max << SW_TXQ3_CW_MAX_OFFSET) |
		((uint32_t)sw_txq3_cw_min << SW_TXQ3_CW_MIN_OFFSET) ;
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_CW_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_CW_ADDR), tmp);
}
static __inline void mac_txq3_cw_unpack(volatile uint32_t* sw_txq3_cw_max, volatile uint32_t* sw_txq3_cw_min)
{
	uint32_t tmp;

	tmp = mac_txq3_cw_get();
	*sw_txq3_cw_max = (tmp & ((uint32_t)SW_TXQ3_CW_MAX_MASK)) >> SW_TXQ3_CW_MAX_OFFSET;
	*sw_txq3_cw_min = (tmp & ((uint32_t)SW_TXQ3_CW_MIN_MASK)) >> SW_TXQ3_CW_MIN_OFFSET;
}
static __inline void mac_txq3_cw_force_sw_txq3_cw_rand_force_en_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_CW_FORCE_ADDR);
	tmp &= ~SW_TXQ3_CW_RAND_FORCE_EN_MASK;
	tmp |= (value << SW_TXQ3_CW_RAND_FORCE_EN_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_CW_FORCE_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_CW_FORCE_ADDR), tmp);
}
static __inline uint32_t mac_txq3_cw_force_sw_txq3_cw_rand_force_en_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_CW_FORCE_ADDR)) & SW_TXQ3_CW_RAND_FORCE_EN_MASK) >> SW_TXQ3_CW_RAND_FORCE_EN_OFFSET;
}
static __inline void mac_txq3_cw_force_sw_txq3_cw_rand_force_val_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_CW_FORCE_ADDR);
	tmp &= ~SW_TXQ3_CW_RAND_FORCE_VAL_MASK;
	tmp |= (value << SW_TXQ3_CW_RAND_FORCE_VAL_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_CW_FORCE_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_CW_FORCE_ADDR), tmp);
}
static __inline uint32_t mac_txq3_cw_force_sw_txq3_cw_rand_force_val_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_CW_FORCE_ADDR)) & SW_TXQ3_CW_RAND_FORCE_VAL_MASK) >> SW_TXQ3_CW_RAND_FORCE_VAL_OFFSET;
}
static __inline void mac_txq3_cw_force_set(uint32_t value)
{
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_CW_FORCE_ADDR, value);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_CW_FORCE_ADDR), value);
}
static __inline uint32_t mac_txq3_cw_force_get(void)
{
	return (WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_CW_FORCE_ADDR));
}
static __inline void mac_txq3_cw_force_pack(uint32_t sw_txq3_cw_rand_force_en, uint32_t sw_txq3_cw_rand_force_val)
{
	uint32_t tmp;

	assert((((uint32_t)sw_txq3_cw_rand_force_en << SW_TXQ3_CW_RAND_FORCE_EN_OFFSET) & ~((uint32_t)SW_TXQ3_CW_RAND_FORCE_EN_MASK)) == 0);
	assert((((uint32_t)sw_txq3_cw_rand_force_val << SW_TXQ3_CW_RAND_FORCE_VAL_OFFSET) & ~((uint32_t)SW_TXQ3_CW_RAND_FORCE_VAL_MASK)) == 0);
	tmp =
		((uint32_t)sw_txq3_cw_rand_force_en << SW_TXQ3_CW_RAND_FORCE_EN_OFFSET) |
		((uint32_t)sw_txq3_cw_rand_force_val << SW_TXQ3_CW_RAND_FORCE_VAL_OFFSET) ;
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_CW_FORCE_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_CW_FORCE_ADDR), tmp);
}
static __inline void mac_txq3_cw_force_unpack(volatile uint32_t* sw_txq3_cw_rand_force_en, volatile uint32_t* sw_txq3_cw_rand_force_val)
{
	uint32_t tmp;

	tmp = mac_txq3_cw_force_get();
	*sw_txq3_cw_rand_force_en = (tmp & ((uint32_t)SW_TXQ3_CW_RAND_FORCE_EN_MASK)) >> SW_TXQ3_CW_RAND_FORCE_EN_OFFSET;
	*sw_txq3_cw_rand_force_val = (tmp & ((uint32_t)SW_TXQ3_CW_RAND_FORCE_VAL_MASK)) >> SW_TXQ3_CW_RAND_FORCE_VAL_OFFSET;
}
static __inline void mac_txq3_bkoff_ctrl_sw_txq3_bkoff_seed_load_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_BKOFF_CTRL_ADDR);
	tmp &= ~SW_TXQ3_BKOFF_SEED_LOAD_MASK;
	tmp |= (value << SW_TXQ3_BKOFF_SEED_LOAD_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_BKOFF_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_BKOFF_CTRL_ADDR), tmp);
}
static __inline void mac_txq3_bkoff_ctrl_sw_txq3_bkoff_seed_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_BKOFF_CTRL_ADDR);
	tmp &= ~SW_TXQ3_BKOFF_SEED_MASK;
	tmp |= (value << SW_TXQ3_BKOFF_SEED_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_BKOFF_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_BKOFF_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_txq3_bkoff_ctrl_sw_txq3_bkoff_seed_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_BKOFF_CTRL_ADDR)) & SW_TXQ3_BKOFF_SEED_MASK) >> SW_TXQ3_BKOFF_SEED_OFFSET;
}
static __inline void mac_txq3_bkoff_ctrl_set(uint32_t value)
{
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_BKOFF_CTRL_ADDR, value);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_BKOFF_CTRL_ADDR), value);
}
static __inline uint32_t mac_txq3_bkoff_ctrl_get(void)
{
	return (WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_BKOFF_CTRL_ADDR));
}
static __inline void mac_txq3_bkoff_ctrl_pack(uint32_t sw_txq3_bkoff_seed_load, uint32_t sw_txq3_bkoff_seed)
{
	uint32_t tmp;

	assert((((uint32_t)sw_txq3_bkoff_seed_load << SW_TXQ3_BKOFF_SEED_LOAD_OFFSET) & ~((uint32_t)SW_TXQ3_BKOFF_SEED_LOAD_MASK)) == 0);
	assert((((uint32_t)sw_txq3_bkoff_seed << SW_TXQ3_BKOFF_SEED_OFFSET) & ~((uint32_t)SW_TXQ3_BKOFF_SEED_MASK)) == 0);
	tmp =
		((uint32_t)sw_txq3_bkoff_seed_load << SW_TXQ3_BKOFF_SEED_LOAD_OFFSET) |
		((uint32_t)sw_txq3_bkoff_seed << SW_TXQ3_BKOFF_SEED_OFFSET) ;
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_BKOFF_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_BKOFF_CTRL_ADDR), tmp);
}
static __inline void mac_txq3_bkoff_ctrl_unpack(volatile uint32_t* sw_txq3_bkoff_seed)
{
	uint32_t tmp;

	tmp = mac_txq3_bkoff_ctrl_get();
	*sw_txq3_bkoff_seed = (tmp & ((uint32_t)SW_TXQ3_BKOFF_SEED_MASK)) >> SW_TXQ3_BKOFF_SEED_OFFSET;
}
static __inline void mac_txq3_period_sw_txq3_txop_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_PERIOD_ADDR);
	tmp &= ~SW_TXQ3_TXOP_MASK;
	tmp |= (value << SW_TXQ3_TXOP_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_PERIOD_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_PERIOD_ADDR), tmp);
}
static __inline uint32_t mac_txq3_period_sw_txq3_txop_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_PERIOD_ADDR)) & SW_TXQ3_TXOP_MASK) >> SW_TXQ3_TXOP_OFFSET;
}
static __inline void mac_txq3_period_set(uint32_t value)
{
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_PERIOD_ADDR, value);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_PERIOD_ADDR), value);
}
static __inline uint32_t mac_txq3_period_get(void)
{
	return (WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_PERIOD_ADDR));
}
static __inline void mac_txq3_period_pack(uint32_t sw_txq3_txop)
{
	uint32_t tmp;

	assert((((uint32_t)sw_txq3_txop << SW_TXQ3_TXOP_OFFSET) & ~((uint32_t)SW_TXQ3_TXOP_MASK)) == 0);
	tmp =
		((uint32_t)sw_txq3_txop << SW_TXQ3_TXOP_OFFSET) ;
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_PERIOD_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_PERIOD_ADDR), tmp);
}
static __inline void mac_txq3_period_unpack(volatile uint32_t* sw_txq3_txop)
{
	uint32_t tmp;

	tmp = mac_txq3_period_get();
	*sw_txq3_txop = (tmp & ((uint32_t)SW_TXQ3_TXOP_MASK)) >> SW_TXQ3_TXOP_OFFSET;
}
static __inline void mac_txq3_int_ctrl_sw_txq3_desc_done_int_mitigation_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_INT_CTRL_ADDR);
	tmp &= ~SW_TXQ3_DESC_DONE_INT_MITIGATION_MASK;
	tmp |= (value << SW_TXQ3_DESC_DONE_INT_MITIGATION_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_INT_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_INT_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_txq3_int_ctrl_sw_txq3_desc_done_int_mitigation_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_INT_CTRL_ADDR)) & SW_TXQ3_DESC_DONE_INT_MITIGATION_MASK) >> SW_TXQ3_DESC_DONE_INT_MITIGATION_OFFSET;
}
static __inline void mac_txq3_int_ctrl_sw_txq3_desc_done_int_timeout_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_INT_CTRL_ADDR);
	tmp &= ~SW_TXQ3_DESC_DONE_INT_TIMEOUT_MASK;
	tmp |= (value << SW_TXQ3_DESC_DONE_INT_TIMEOUT_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_INT_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_INT_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_txq3_int_ctrl_sw_txq3_desc_done_int_timeout_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_INT_CTRL_ADDR)) & SW_TXQ3_DESC_DONE_INT_TIMEOUT_MASK) >> SW_TXQ3_DESC_DONE_INT_TIMEOUT_OFFSET;
}
static __inline void mac_txq3_int_ctrl_set(uint32_t value)
{
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_INT_CTRL_ADDR, value);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_INT_CTRL_ADDR), value);
}
static __inline uint32_t mac_txq3_int_ctrl_get(void)
{
	return (WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_INT_CTRL_ADDR));
}
static __inline void mac_txq3_int_ctrl_pack(uint32_t sw_txq3_desc_done_int_mitigation, uint32_t sw_txq3_desc_done_int_timeout)
{
	uint32_t tmp;

	assert((((uint32_t)sw_txq3_desc_done_int_mitigation << SW_TXQ3_DESC_DONE_INT_MITIGATION_OFFSET) & ~((uint32_t)SW_TXQ3_DESC_DONE_INT_MITIGATION_MASK)) == 0);
	assert((((uint32_t)sw_txq3_desc_done_int_timeout << SW_TXQ3_DESC_DONE_INT_TIMEOUT_OFFSET) & ~((uint32_t)SW_TXQ3_DESC_DONE_INT_TIMEOUT_MASK)) == 0);
	tmp =
		((uint32_t)sw_txq3_desc_done_int_mitigation << SW_TXQ3_DESC_DONE_INT_MITIGATION_OFFSET) |
		((uint32_t)sw_txq3_desc_done_int_timeout << SW_TXQ3_DESC_DONE_INT_TIMEOUT_OFFSET) ;
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_INT_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_INT_CTRL_ADDR), tmp);
}
static __inline void mac_txq3_int_ctrl_unpack(volatile uint32_t* sw_txq3_desc_done_int_mitigation, volatile uint32_t* sw_txq3_desc_done_int_timeout)
{
	uint32_t tmp;

	tmp = mac_txq3_int_ctrl_get();
	*sw_txq3_desc_done_int_mitigation = (tmp & ((uint32_t)SW_TXQ3_DESC_DONE_INT_MITIGATION_MASK)) >> SW_TXQ3_DESC_DONE_INT_MITIGATION_OFFSET;
	*sw_txq3_desc_done_int_timeout = (tmp & ((uint32_t)SW_TXQ3_DESC_DONE_INT_TIMEOUT_MASK)) >> SW_TXQ3_DESC_DONE_INT_TIMEOUT_OFFSET;
}
static __inline uint32_t mac_txq3_sts_0_sw_ro_txq3_desc_access_fsm_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_STS_0_ADDR)) & SW_RO_TXQ3_DESC_ACCESS_FSM_MASK) >> SW_RO_TXQ3_DESC_ACCESS_FSM_OFFSET;
}
static __inline uint32_t mac_txq3_sts_0_sw_ro_txq3_chn_acess_fsm_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_STS_0_ADDR)) & SW_RO_TXQ3_CHN_ACESS_FSM_MASK) >> SW_RO_TXQ3_CHN_ACESS_FSM_OFFSET;
}
static __inline uint32_t mac_txq3_sts_0_get(void)
{
	return (WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_STS_0_ADDR));
}
static __inline void mac_txq3_sts_0_unpack(volatile uint32_t* sw_ro_txq3_desc_access_fsm, volatile uint32_t* sw_ro_txq3_chn_acess_fsm)
{
	uint32_t tmp;

	tmp = mac_txq3_sts_0_get();
	*sw_ro_txq3_desc_access_fsm = (tmp & ((uint32_t)SW_RO_TXQ3_DESC_ACCESS_FSM_MASK)) >> SW_RO_TXQ3_DESC_ACCESS_FSM_OFFSET;
	*sw_ro_txq3_chn_acess_fsm = (tmp & ((uint32_t)SW_RO_TXQ3_CHN_ACESS_FSM_MASK)) >> SW_RO_TXQ3_CHN_ACESS_FSM_OFFSET;
}
static __inline uint32_t mac_txq3_dbg_bus_0_sts_sw_txq3_dbg_bus_0_sts_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_DBG_BUS_0_STS_ADDR)) & SW_TXQ3_DBG_BUS_0_STS_MASK) >> SW_TXQ3_DBG_BUS_0_STS_OFFSET;
}
static __inline uint32_t mac_txq3_dbg_bus_0_sts_get(void)
{
	return (WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_DBG_BUS_0_STS_ADDR));
}
static __inline void mac_txq3_dbg_bus_0_sts_unpack(volatile uint32_t* sw_txq3_dbg_bus_0_sts)
{
	uint32_t tmp;

	tmp = mac_txq3_dbg_bus_0_sts_get();
	*sw_txq3_dbg_bus_0_sts = (tmp & ((uint32_t)SW_TXQ3_DBG_BUS_0_STS_MASK)) >> SW_TXQ3_DBG_BUS_0_STS_OFFSET;
}
static __inline void mac_txq3_dbg_bus_0_clr_sw_txq3_dbg_bus_0_clr_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_DBG_BUS_0_CLR_ADDR);
	tmp &= ~SW_TXQ3_DBG_BUS_0_CLR_MASK;
	tmp |= (value << SW_TXQ3_DBG_BUS_0_CLR_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_DBG_BUS_0_CLR_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_DBG_BUS_0_CLR_ADDR), tmp);
}
static __inline void mac_txq3_dbg_bus_0_clr_set(uint32_t value)
{
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_DBG_BUS_0_CLR_ADDR, value);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_DBG_BUS_0_CLR_ADDR), value);
}
static __inline void mac_txq3_dbg_bus_0_clr_pack(uint32_t sw_txq3_dbg_bus_0_clr)
{
	uint32_t tmp;

	assert((((uint32_t)sw_txq3_dbg_bus_0_clr << SW_TXQ3_DBG_BUS_0_CLR_OFFSET) & ~((uint32_t)SW_TXQ3_DBG_BUS_0_CLR_MASK)) == 0);
	tmp =
		((uint32_t)sw_txq3_dbg_bus_0_clr << SW_TXQ3_DBG_BUS_0_CLR_OFFSET) ;
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_DBG_BUS_0_CLR_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_DBG_BUS_0_CLR_ADDR), tmp);
}
static __inline void mac_txq3_tx_stat_sts_clr_sw_txq3_rts_tx_ok_cnt_clr_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_TX_STAT_STS_CLR_ADDR);
	tmp &= ~SW_TXQ3_RTS_TX_OK_CNT_CLR_MASK;
	tmp |= (value << SW_TXQ3_RTS_TX_OK_CNT_CLR_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_TX_STAT_STS_CLR_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_TX_STAT_STS_CLR_ADDR), tmp);
}
static __inline void mac_txq3_tx_stat_sts_clr_sw_txq3_cts_tx_ok_cnt_clr_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_TX_STAT_STS_CLR_ADDR);
	tmp &= ~SW_TXQ3_CTS_TX_OK_CNT_CLR_MASK;
	tmp |= (value << SW_TXQ3_CTS_TX_OK_CNT_CLR_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_TX_STAT_STS_CLR_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_TX_STAT_STS_CLR_ADDR), tmp);
}
static __inline void mac_txq3_tx_stat_sts_clr_sw_txq3_frame_tx_ok_cnt_clr_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_TX_STAT_STS_CLR_ADDR);
	tmp &= ~SW_TXQ3_FRAME_TX_OK_CNT_CLR_MASK;
	tmp |= (value << SW_TXQ3_FRAME_TX_OK_CNT_CLR_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_TX_STAT_STS_CLR_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_TX_STAT_STS_CLR_ADDR), tmp);
}
static __inline void mac_txq3_tx_stat_sts_clr_sw_txq3_cfend_tx_ok_cnt_clr_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_TX_STAT_STS_CLR_ADDR);
	tmp &= ~SW_TXQ3_CFEND_TX_OK_CNT_CLR_MASK;
	tmp |= (value << SW_TXQ3_CFEND_TX_OK_CNT_CLR_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_TX_STAT_STS_CLR_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_TX_STAT_STS_CLR_ADDR), tmp);
}
static __inline void mac_txq3_tx_stat_sts_clr_sw_txq3_rts_tx_fail_cnt_clr_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_TX_STAT_STS_CLR_ADDR);
	tmp &= ~SW_TXQ3_RTS_TX_FAIL_CNT_CLR_MASK;
	tmp |= (value << SW_TXQ3_RTS_TX_FAIL_CNT_CLR_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_TX_STAT_STS_CLR_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_TX_STAT_STS_CLR_ADDR), tmp);
}
static __inline void mac_txq3_tx_stat_sts_clr_sw_txq3_frame_tx_fail_cnt_clr_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_TX_STAT_STS_CLR_ADDR);
	tmp &= ~SW_TXQ3_FRAME_TX_FAIL_CNT_CLR_MASK;
	tmp |= (value << SW_TXQ3_FRAME_TX_FAIL_CNT_CLR_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_TX_STAT_STS_CLR_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_TX_STAT_STS_CLR_ADDR), tmp);
}
static __inline void mac_txq3_tx_stat_sts_clr_set(uint32_t value)
{
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_TX_STAT_STS_CLR_ADDR, value);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_TX_STAT_STS_CLR_ADDR), value);
}
static __inline uint32_t mac_txq3_tx_stat_sts_clr_get(void)
{
	return (WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_TX_STAT_STS_CLR_ADDR));
}
static __inline void mac_txq3_tx_stat_sts_clr_pack(uint32_t sw_txq3_rts_tx_ok_cnt_clr, uint32_t sw_txq3_cts_tx_ok_cnt_clr, uint32_t sw_txq3_frame_tx_ok_cnt_clr, uint32_t sw_txq3_cfend_tx_ok_cnt_clr, uint32_t sw_txq3_rts_tx_fail_cnt_clr, uint32_t sw_txq3_frame_tx_fail_cnt_clr)
{
	uint32_t tmp;

	assert((((uint32_t)sw_txq3_rts_tx_ok_cnt_clr << SW_TXQ3_RTS_TX_OK_CNT_CLR_OFFSET) & ~((uint32_t)SW_TXQ3_RTS_TX_OK_CNT_CLR_MASK)) == 0);
	assert((((uint32_t)sw_txq3_cts_tx_ok_cnt_clr << SW_TXQ3_CTS_TX_OK_CNT_CLR_OFFSET) & ~((uint32_t)SW_TXQ3_CTS_TX_OK_CNT_CLR_MASK)) == 0);
	assert((((uint32_t)sw_txq3_frame_tx_ok_cnt_clr << SW_TXQ3_FRAME_TX_OK_CNT_CLR_OFFSET) & ~((uint32_t)SW_TXQ3_FRAME_TX_OK_CNT_CLR_MASK)) == 0);
	assert((((uint32_t)sw_txq3_cfend_tx_ok_cnt_clr << SW_TXQ3_CFEND_TX_OK_CNT_CLR_OFFSET) & ~((uint32_t)SW_TXQ3_CFEND_TX_OK_CNT_CLR_MASK)) == 0);
	assert((((uint32_t)sw_txq3_rts_tx_fail_cnt_clr << SW_TXQ3_RTS_TX_FAIL_CNT_CLR_OFFSET) & ~((uint32_t)SW_TXQ3_RTS_TX_FAIL_CNT_CLR_MASK)) == 0);
	assert((((uint32_t)sw_txq3_frame_tx_fail_cnt_clr << SW_TXQ3_FRAME_TX_FAIL_CNT_CLR_OFFSET) & ~((uint32_t)SW_TXQ3_FRAME_TX_FAIL_CNT_CLR_MASK)) == 0);
	tmp =
		((uint32_t)sw_txq3_rts_tx_ok_cnt_clr << SW_TXQ3_RTS_TX_OK_CNT_CLR_OFFSET) |
		((uint32_t)sw_txq3_cts_tx_ok_cnt_clr << SW_TXQ3_CTS_TX_OK_CNT_CLR_OFFSET) |
		((uint32_t)sw_txq3_frame_tx_ok_cnt_clr << SW_TXQ3_FRAME_TX_OK_CNT_CLR_OFFSET) |
		((uint32_t)sw_txq3_cfend_tx_ok_cnt_clr << SW_TXQ3_CFEND_TX_OK_CNT_CLR_OFFSET) |
		((uint32_t)sw_txq3_rts_tx_fail_cnt_clr << SW_TXQ3_RTS_TX_FAIL_CNT_CLR_OFFSET) |
		((uint32_t)sw_txq3_frame_tx_fail_cnt_clr << SW_TXQ3_FRAME_TX_FAIL_CNT_CLR_OFFSET) ;
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_TX_STAT_STS_CLR_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_TX_STAT_STS_CLR_ADDR), tmp);
}
static __inline uint32_t mac_txq3_tx_stat_sts_0_sw_ro_txq3_rts_tx_ok_cnt_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_TX_STAT_STS_0_ADDR)) & SW_RO_TXQ3_RTS_TX_OK_CNT_MASK) >> SW_RO_TXQ3_RTS_TX_OK_CNT_OFFSET;
}
static __inline uint32_t mac_txq3_tx_stat_sts_0_sw_ro_txq3_cts_tx_ok_cnt_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_TX_STAT_STS_0_ADDR)) & SW_RO_TXQ3_CTS_TX_OK_CNT_MASK) >> SW_RO_TXQ3_CTS_TX_OK_CNT_OFFSET;
}
static __inline uint32_t mac_txq3_tx_stat_sts_0_get(void)
{
	return (WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_TX_STAT_STS_0_ADDR));
}
static __inline void mac_txq3_tx_stat_sts_0_unpack(volatile uint32_t* sw_ro_txq3_rts_tx_ok_cnt, volatile uint32_t* sw_ro_txq3_cts_tx_ok_cnt)
{
	uint32_t tmp;

	tmp = mac_txq3_tx_stat_sts_0_get();
	*sw_ro_txq3_rts_tx_ok_cnt = (tmp & ((uint32_t)SW_RO_TXQ3_RTS_TX_OK_CNT_MASK)) >> SW_RO_TXQ3_RTS_TX_OK_CNT_OFFSET;
	*sw_ro_txq3_cts_tx_ok_cnt = (tmp & ((uint32_t)SW_RO_TXQ3_CTS_TX_OK_CNT_MASK)) >> SW_RO_TXQ3_CTS_TX_OK_CNT_OFFSET;
}
static __inline uint32_t mac_txq3_tx_stat_sts_1_sw_ro_txq3_frame_tx_ok_cnt_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_TX_STAT_STS_1_ADDR)) & SW_RO_TXQ3_FRAME_TX_OK_CNT_MASK) >> SW_RO_TXQ3_FRAME_TX_OK_CNT_OFFSET;
}
static __inline uint32_t mac_txq3_tx_stat_sts_1_sw_ro_txq3_cfend_tx_ok_cnt_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_TX_STAT_STS_1_ADDR)) & SW_RO_TXQ3_CFEND_TX_OK_CNT_MASK) >> SW_RO_TXQ3_CFEND_TX_OK_CNT_OFFSET;
}
static __inline uint32_t mac_txq3_tx_stat_sts_1_get(void)
{
	return (WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_TX_STAT_STS_1_ADDR));
}
static __inline void mac_txq3_tx_stat_sts_1_unpack(volatile uint32_t* sw_ro_txq3_frame_tx_ok_cnt, volatile uint32_t* sw_ro_txq3_cfend_tx_ok_cnt)
{
	uint32_t tmp;

	tmp = mac_txq3_tx_stat_sts_1_get();
	*sw_ro_txq3_frame_tx_ok_cnt = (tmp & ((uint32_t)SW_RO_TXQ3_FRAME_TX_OK_CNT_MASK)) >> SW_RO_TXQ3_FRAME_TX_OK_CNT_OFFSET;
	*sw_ro_txq3_cfend_tx_ok_cnt = (tmp & ((uint32_t)SW_RO_TXQ3_CFEND_TX_OK_CNT_MASK)) >> SW_RO_TXQ3_CFEND_TX_OK_CNT_OFFSET;
}
static __inline uint32_t mac_txq3_tx_stat_sts_2_sw_ro_txq3_rts_tx_fail_cnt_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_TX_STAT_STS_2_ADDR)) & SW_RO_TXQ3_RTS_TX_FAIL_CNT_MASK) >> SW_RO_TXQ3_RTS_TX_FAIL_CNT_OFFSET;
}
static __inline uint32_t mac_txq3_tx_stat_sts_2_sw_ro_txq3_frame_tx_fail_cnt_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_TX_STAT_STS_2_ADDR)) & SW_RO_TXQ3_FRAME_TX_FAIL_CNT_MASK) >> SW_RO_TXQ3_FRAME_TX_FAIL_CNT_OFFSET;
}
static __inline uint32_t mac_txq3_tx_stat_sts_2_get(void)
{
	return (WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_TX_STAT_STS_2_ADDR));
}
static __inline void mac_txq3_tx_stat_sts_2_unpack(volatile uint32_t* sw_ro_txq3_rts_tx_fail_cnt, volatile uint32_t* sw_ro_txq3_frame_tx_fail_cnt)
{
	uint32_t tmp;

	tmp = mac_txq3_tx_stat_sts_2_get();
	*sw_ro_txq3_rts_tx_fail_cnt = (tmp & ((uint32_t)SW_RO_TXQ3_RTS_TX_FAIL_CNT_MASK)) >> SW_RO_TXQ3_RTS_TX_FAIL_CNT_OFFSET;
	*sw_ro_txq3_frame_tx_fail_cnt = (tmp & ((uint32_t)SW_RO_TXQ3_FRAME_TX_FAIL_CNT_MASK)) >> SW_RO_TXQ3_FRAME_TX_FAIL_CNT_OFFSET;
}
static __inline uint32_t mac_txq3_tx_stat_sts_3_sw_ro_txq3_tx_desc_ptr_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_TX_STAT_STS_3_ADDR)) & SW_RO_TXQ3_TX_DESC_PTR_MASK) >> SW_RO_TXQ3_TX_DESC_PTR_OFFSET;
}
static __inline uint32_t mac_txq3_tx_stat_sts_3_get(void)
{
	return (WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_TX_STAT_STS_3_ADDR));
}
static __inline void mac_txq3_tx_stat_sts_3_unpack(volatile uint32_t* sw_ro_txq3_tx_desc_ptr)
{
	uint32_t tmp;

	tmp = mac_txq3_tx_stat_sts_3_get();
	*sw_ro_txq3_tx_desc_ptr = (tmp & ((uint32_t)SW_RO_TXQ3_TX_DESC_PTR_MASK)) >> SW_RO_TXQ3_TX_DESC_PTR_OFFSET;
}
static __inline uint32_t mac_txq3_pcs_busy_monitor_stat_sw_ro_txq3_pcs_busy_stuck_tx_cnt_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_PCS_BUSY_MONITOR_STAT_ADDR)) & SW_RO_TXQ3_PCS_BUSY_STUCK_TX_CNT_MASK) >> SW_RO_TXQ3_PCS_BUSY_STUCK_TX_CNT_OFFSET;
}
static __inline uint32_t mac_txq3_pcs_busy_monitor_stat_get(void)
{
	return (WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_PCS_BUSY_MONITOR_STAT_ADDR));
}
static __inline void mac_txq3_pcs_busy_monitor_stat_unpack(volatile uint32_t* sw_ro_txq3_pcs_busy_stuck_tx_cnt)
{
	uint32_t tmp;

	tmp = mac_txq3_pcs_busy_monitor_stat_get();
	*sw_ro_txq3_pcs_busy_stuck_tx_cnt = (tmp & ((uint32_t)SW_RO_TXQ3_PCS_BUSY_STUCK_TX_CNT_MASK)) >> SW_RO_TXQ3_PCS_BUSY_STUCK_TX_CNT_OFFSET;
}
static __inline void mac_txq3_dbg_cw_ctrl_sw_txq3_dbg_cw_clr_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_DBG_CW_CTRL_ADDR);
	tmp &= ~SW_TXQ3_DBG_CW_CLR_MASK;
	tmp |= (value << SW_TXQ3_DBG_CW_CLR_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_DBG_CW_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_DBG_CW_CTRL_ADDR), tmp);
}
static __inline void mac_txq3_dbg_cw_ctrl_set(uint32_t value)
{
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_DBG_CW_CTRL_ADDR, value);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_DBG_CW_CTRL_ADDR), value);
}
static __inline uint32_t mac_txq3_dbg_cw_ctrl_get(void)
{
	return (WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_DBG_CW_CTRL_ADDR));
}
static __inline void mac_txq3_dbg_cw_ctrl_pack(uint32_t sw_txq3_dbg_cw_clr)
{
	uint32_t tmp;

	assert((((uint32_t)sw_txq3_dbg_cw_clr << SW_TXQ3_DBG_CW_CLR_OFFSET) & ~((uint32_t)SW_TXQ3_DBG_CW_CLR_MASK)) == 0);
	tmp =
		((uint32_t)sw_txq3_dbg_cw_clr << SW_TXQ3_DBG_CW_CLR_OFFSET) ;
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_DBG_CW_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_DBG_CW_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_txq3_dbg_cw_sts_sw_ro_txq3_cw_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_DBG_CW_STS_ADDR)) & SW_RO_TXQ3_CW_MASK) >> SW_RO_TXQ3_CW_OFFSET;
}
static __inline uint32_t mac_txq3_dbg_cw_sts_sw_ro_txq3_cw_rtl_max_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_DBG_CW_STS_ADDR)) & SW_RO_TXQ3_CW_RTL_MAX_MASK) >> SW_RO_TXQ3_CW_RTL_MAX_OFFSET;
}
static __inline uint32_t mac_txq3_dbg_cw_sts_get(void)
{
	return (WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ3_DBG_CW_STS_ADDR));
}
static __inline void mac_txq3_dbg_cw_sts_unpack(volatile uint32_t* sw_ro_txq3_cw, volatile uint32_t* sw_ro_txq3_cw_rtl_max)
{
	uint32_t tmp;

	tmp = mac_txq3_dbg_cw_sts_get();
	*sw_ro_txq3_cw = (tmp & ((uint32_t)SW_RO_TXQ3_CW_MASK)) >> SW_RO_TXQ3_CW_OFFSET;
	*sw_ro_txq3_cw_rtl_max = (tmp & ((uint32_t)SW_RO_TXQ3_CW_RTL_MAX_MASK)) >> SW_RO_TXQ3_CW_RTL_MAX_OFFSET;
}
static __inline void mac_txq6_enable_sw_txq6_srst_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_ENABLE_ADDR);
	tmp &= ~SW_TXQ6_SRST_MASK;
	tmp |= (value << SW_TXQ6_SRST_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_ENABLE_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_ENABLE_ADDR), tmp);
}
static __inline void mac_txq6_enable_sw_txq6_dbg_info_clr_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_ENABLE_ADDR);
	tmp &= ~SW_TXQ6_DBG_INFO_CLR_MASK;
	tmp |= (value << SW_TXQ6_DBG_INFO_CLR_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_ENABLE_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_ENABLE_ADDR), tmp);
}
static __inline void mac_txq6_enable_sw_txq6_dummy_trig_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_ENABLE_ADDR);
	tmp &= ~SW_TXQ6_DUMMY_TRIG_MASK;
	tmp |= (value << SW_TXQ6_DUMMY_TRIG_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_ENABLE_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_ENABLE_ADDR), tmp);
}
static __inline void mac_txq6_enable_sw_txq6_dis_pls_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_ENABLE_ADDR);
	tmp &= ~SW_TXQ6_DIS_PLS_MASK;
	tmp |= (value << SW_TXQ6_DIS_PLS_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_ENABLE_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_ENABLE_ADDR), tmp);
}
static __inline void mac_txq6_enable_sw_txq6_en_pls_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_ENABLE_ADDR);
	tmp &= ~SW_TXQ6_EN_PLS_MASK;
	tmp |= (value << SW_TXQ6_EN_PLS_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_ENABLE_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_ENABLE_ADDR), tmp);
}
static __inline void mac_txq6_enable_set(uint32_t value)
{
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_ENABLE_ADDR, value);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_ENABLE_ADDR), value);
}
static __inline uint32_t mac_txq6_enable_get(void)
{
	return (WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_ENABLE_ADDR));
}
static __inline void mac_txq6_enable_pack(uint32_t sw_txq6_srst, uint32_t sw_txq6_dbg_info_clr, uint32_t sw_txq6_dummy_trig, uint32_t sw_txq6_dis_pls, uint32_t sw_txq6_en_pls)
{
	uint32_t tmp;

	assert((((uint32_t)sw_txq6_srst << SW_TXQ6_SRST_OFFSET) & ~((uint32_t)SW_TXQ6_SRST_MASK)) == 0);
	assert((((uint32_t)sw_txq6_dbg_info_clr << SW_TXQ6_DBG_INFO_CLR_OFFSET) & ~((uint32_t)SW_TXQ6_DBG_INFO_CLR_MASK)) == 0);
	assert((((uint32_t)sw_txq6_dummy_trig << SW_TXQ6_DUMMY_TRIG_OFFSET) & ~((uint32_t)SW_TXQ6_DUMMY_TRIG_MASK)) == 0);
	assert((((uint32_t)sw_txq6_dis_pls << SW_TXQ6_DIS_PLS_OFFSET) & ~((uint32_t)SW_TXQ6_DIS_PLS_MASK)) == 0);
	assert((((uint32_t)sw_txq6_en_pls << SW_TXQ6_EN_PLS_OFFSET) & ~((uint32_t)SW_TXQ6_EN_PLS_MASK)) == 0);
	tmp =
		((uint32_t)sw_txq6_srst << SW_TXQ6_SRST_OFFSET) |
		((uint32_t)sw_txq6_dbg_info_clr << SW_TXQ6_DBG_INFO_CLR_OFFSET) |
		((uint32_t)sw_txq6_dummy_trig << SW_TXQ6_DUMMY_TRIG_OFFSET) |
		((uint32_t)sw_txq6_dis_pls << SW_TXQ6_DIS_PLS_OFFSET) |
		((uint32_t)sw_txq6_en_pls << SW_TXQ6_EN_PLS_OFFSET) ;
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_ENABLE_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_ENABLE_ADDR), tmp);
}
static __inline void mac_txq6_ctrl_sw_txq6_dummy_int_en_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_CTRL_ADDR);
	tmp &= ~SW_TXQ6_DUMMY_INT_EN_MASK;
	tmp |= (value << SW_TXQ6_DUMMY_INT_EN_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_txq6_ctrl_sw_txq6_dummy_int_en_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_CTRL_ADDR)) & SW_TXQ6_DUMMY_INT_EN_MASK) >> SW_TXQ6_DUMMY_INT_EN_OFFSET;
}
static __inline void mac_txq6_ctrl_sw_txq6_hw_frame_fc_power_mode_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_CTRL_ADDR);
	tmp &= ~SW_TXQ6_HW_FRAME_FC_POWER_MODE_MASK;
	tmp |= (value << SW_TXQ6_HW_FRAME_FC_POWER_MODE_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_txq6_ctrl_sw_txq6_hw_frame_fc_power_mode_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_CTRL_ADDR)) & SW_TXQ6_HW_FRAME_FC_POWER_MODE_MASK) >> SW_TXQ6_HW_FRAME_FC_POWER_MODE_OFFSET;
}
static __inline void mac_txq6_ctrl_sw_txq6_cf_end_en_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_CTRL_ADDR);
	tmp &= ~SW_TXQ6_CF_END_EN_MASK;
	tmp |= (value << SW_TXQ6_CF_END_EN_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_txq6_ctrl_sw_txq6_cf_end_en_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_CTRL_ADDR)) & SW_TXQ6_CF_END_EN_MASK) >> SW_TXQ6_CF_END_EN_OFFSET;
}
static __inline void mac_txq6_ctrl_sw_txq6_cw_min_set_pls_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_CTRL_ADDR);
	tmp &= ~SW_TXQ6_CW_MIN_SET_PLS_MASK;
	tmp |= (value << SW_TXQ6_CW_MIN_SET_PLS_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_CTRL_ADDR), tmp);
}
static __inline void mac_txq6_ctrl_set(uint32_t value)
{
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_CTRL_ADDR, value);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_CTRL_ADDR), value);
}
static __inline uint32_t mac_txq6_ctrl_get(void)
{
	return (WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_CTRL_ADDR));
}
static __inline void mac_txq6_ctrl_pack(uint32_t sw_txq6_dummy_int_en, uint32_t sw_txq6_hw_frame_fc_power_mode, uint32_t sw_txq6_cf_end_en, uint32_t sw_txq6_cw_min_set_pls)
{
	uint32_t tmp;

	assert((((uint32_t)sw_txq6_dummy_int_en << SW_TXQ6_DUMMY_INT_EN_OFFSET) & ~((uint32_t)SW_TXQ6_DUMMY_INT_EN_MASK)) == 0);
	assert((((uint32_t)sw_txq6_hw_frame_fc_power_mode << SW_TXQ6_HW_FRAME_FC_POWER_MODE_OFFSET) & ~((uint32_t)SW_TXQ6_HW_FRAME_FC_POWER_MODE_MASK)) == 0);
	assert((((uint32_t)sw_txq6_cf_end_en << SW_TXQ6_CF_END_EN_OFFSET) & ~((uint32_t)SW_TXQ6_CF_END_EN_MASK)) == 0);
	assert((((uint32_t)sw_txq6_cw_min_set_pls << SW_TXQ6_CW_MIN_SET_PLS_OFFSET) & ~((uint32_t)SW_TXQ6_CW_MIN_SET_PLS_MASK)) == 0);
	tmp =
		((uint32_t)sw_txq6_dummy_int_en << SW_TXQ6_DUMMY_INT_EN_OFFSET) |
		((uint32_t)sw_txq6_hw_frame_fc_power_mode << SW_TXQ6_HW_FRAME_FC_POWER_MODE_OFFSET) |
		((uint32_t)sw_txq6_cf_end_en << SW_TXQ6_CF_END_EN_OFFSET) |
		((uint32_t)sw_txq6_cw_min_set_pls << SW_TXQ6_CW_MIN_SET_PLS_OFFSET) ;
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_CTRL_ADDR), tmp);
}
static __inline void mac_txq6_ctrl_unpack(volatile uint32_t* sw_txq6_dummy_int_en, volatile uint32_t* sw_txq6_hw_frame_fc_power_mode, volatile uint32_t* sw_txq6_cf_end_en)
{
	uint32_t tmp;

	tmp = mac_txq6_ctrl_get();
	*sw_txq6_dummy_int_en = (tmp & ((uint32_t)SW_TXQ6_DUMMY_INT_EN_MASK)) >> SW_TXQ6_DUMMY_INT_EN_OFFSET;
	*sw_txq6_hw_frame_fc_power_mode = (tmp & ((uint32_t)SW_TXQ6_HW_FRAME_FC_POWER_MODE_MASK)) >> SW_TXQ6_HW_FRAME_FC_POWER_MODE_OFFSET;
	*sw_txq6_cf_end_en = (tmp & ((uint32_t)SW_TXQ6_CF_END_EN_MASK)) >> SW_TXQ6_CF_END_EN_OFFSET;
}
static __inline void mac_txq6_ifs_ctrl_sw_txq6_eifs_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_IFS_CTRL_ADDR);
	tmp &= ~SW_TXQ6_EIFS_MASK;
	tmp |= (value << SW_TXQ6_EIFS_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_IFS_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_IFS_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_txq6_ifs_ctrl_sw_txq6_eifs_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_IFS_CTRL_ADDR)) & SW_TXQ6_EIFS_MASK) >> SW_TXQ6_EIFS_OFFSET;
}
static __inline void mac_txq6_ifs_ctrl_sw_txq6_difs_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_IFS_CTRL_ADDR);
	tmp &= ~SW_TXQ6_DIFS_MASK;
	tmp |= (value << SW_TXQ6_DIFS_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_IFS_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_IFS_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_txq6_ifs_ctrl_sw_txq6_difs_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_IFS_CTRL_ADDR)) & SW_TXQ6_DIFS_MASK) >> SW_TXQ6_DIFS_OFFSET;
}
static __inline void mac_txq6_ifs_ctrl_set(uint32_t value)
{
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_IFS_CTRL_ADDR, value);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_IFS_CTRL_ADDR), value);
}
static __inline uint32_t mac_txq6_ifs_ctrl_get(void)
{
	return (WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_IFS_CTRL_ADDR));
}
static __inline void mac_txq6_ifs_ctrl_pack(uint32_t sw_txq6_eifs, uint32_t sw_txq6_difs)
{
	uint32_t tmp;

	assert((((uint32_t)sw_txq6_eifs << SW_TXQ6_EIFS_OFFSET) & ~((uint32_t)SW_TXQ6_EIFS_MASK)) == 0);
	assert((((uint32_t)sw_txq6_difs << SW_TXQ6_DIFS_OFFSET) & ~((uint32_t)SW_TXQ6_DIFS_MASK)) == 0);
	tmp =
		((uint32_t)sw_txq6_eifs << SW_TXQ6_EIFS_OFFSET) |
		((uint32_t)sw_txq6_difs << SW_TXQ6_DIFS_OFFSET) ;
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_IFS_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_IFS_CTRL_ADDR), tmp);
}
static __inline void mac_txq6_ifs_ctrl_unpack(volatile uint32_t* sw_txq6_eifs, volatile uint32_t* sw_txq6_difs)
{
	uint32_t tmp;

	tmp = mac_txq6_ifs_ctrl_get();
	*sw_txq6_eifs = (tmp & ((uint32_t)SW_TXQ6_EIFS_MASK)) >> SW_TXQ6_EIFS_OFFSET;
	*sw_txq6_difs = (tmp & ((uint32_t)SW_TXQ6_DIFS_MASK)) >> SW_TXQ6_DIFS_OFFSET;
}
static __inline void mac_txq6_rsp_time_sw_txq6_resp_timeout_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_RSP_TIME_ADDR);
	tmp &= ~SW_TXQ6_RESP_TIMEOUT_MASK;
	tmp |= (value << SW_TXQ6_RESP_TIMEOUT_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_RSP_TIME_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_RSP_TIME_ADDR), tmp);
}
static __inline uint32_t mac_txq6_rsp_time_sw_txq6_resp_timeout_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_RSP_TIME_ADDR)) & SW_TXQ6_RESP_TIMEOUT_MASK) >> SW_TXQ6_RESP_TIMEOUT_OFFSET;
}
static __inline void mac_txq6_rsp_time_set(uint32_t value)
{
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_RSP_TIME_ADDR, value);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_RSP_TIME_ADDR), value);
}
static __inline uint32_t mac_txq6_rsp_time_get(void)
{
	return (WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_RSP_TIME_ADDR));
}
static __inline void mac_txq6_rsp_time_pack(uint32_t sw_txq6_resp_timeout)
{
	uint32_t tmp;

	assert((((uint32_t)sw_txq6_resp_timeout << SW_TXQ6_RESP_TIMEOUT_OFFSET) & ~((uint32_t)SW_TXQ6_RESP_TIMEOUT_MASK)) == 0);
	tmp =
		((uint32_t)sw_txq6_resp_timeout << SW_TXQ6_RESP_TIMEOUT_OFFSET) ;
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_RSP_TIME_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_RSP_TIME_ADDR), tmp);
}
static __inline void mac_txq6_rsp_time_unpack(volatile uint32_t* sw_txq6_resp_timeout)
{
	uint32_t tmp;

	tmp = mac_txq6_rsp_time_get();
	*sw_txq6_resp_timeout = (tmp & ((uint32_t)SW_TXQ6_RESP_TIMEOUT_MASK)) >> SW_TXQ6_RESP_TIMEOUT_OFFSET;
}
static __inline void mac_txq6_ptr_sw_txq6_start_ptr_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_PTR_ADDR);
	tmp &= ~SW_TXQ6_START_PTR_MASK;
	tmp |= (value << SW_TXQ6_START_PTR_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_PTR_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_PTR_ADDR), tmp);
}
static __inline uint32_t mac_txq6_ptr_sw_txq6_start_ptr_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_PTR_ADDR)) & SW_TXQ6_START_PTR_MASK) >> SW_TXQ6_START_PTR_OFFSET;
}
static __inline void mac_txq6_ptr_set(uint32_t value)
{
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_PTR_ADDR, value);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_PTR_ADDR), value);
}
static __inline uint32_t mac_txq6_ptr_get(void)
{
	return (WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_PTR_ADDR));
}
static __inline void mac_txq6_ptr_pack(uint32_t sw_txq6_start_ptr)
{
	uint32_t tmp;

	assert((((uint32_t)sw_txq6_start_ptr << SW_TXQ6_START_PTR_OFFSET) & ~((uint32_t)SW_TXQ6_START_PTR_MASK)) == 0);
	tmp =
		((uint32_t)sw_txq6_start_ptr << SW_TXQ6_START_PTR_OFFSET) ;
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_PTR_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_PTR_ADDR), tmp);
}
static __inline void mac_txq6_ptr_unpack(volatile uint32_t* sw_txq6_start_ptr)
{
	uint32_t tmp;

	tmp = mac_txq6_ptr_get();
	*sw_txq6_start_ptr = (tmp & ((uint32_t)SW_TXQ6_START_PTR_MASK)) >> SW_TXQ6_START_PTR_OFFSET;
}
static __inline void mac_txq6_tx_timeout_sw_txq6_timeout_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_TX_TIMEOUT_ADDR);
	tmp &= ~SW_TXQ6_TIMEOUT_MASK;
	tmp |= (value << SW_TXQ6_TIMEOUT_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_TX_TIMEOUT_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_TX_TIMEOUT_ADDR), tmp);
}
static __inline uint32_t mac_txq6_tx_timeout_sw_txq6_timeout_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_TX_TIMEOUT_ADDR)) & SW_TXQ6_TIMEOUT_MASK) >> SW_TXQ6_TIMEOUT_OFFSET;
}
static __inline void mac_txq6_tx_timeout_set(uint32_t value)
{
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_TX_TIMEOUT_ADDR, value);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_TX_TIMEOUT_ADDR), value);
}
static __inline uint32_t mac_txq6_tx_timeout_get(void)
{
	return (WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_TX_TIMEOUT_ADDR));
}
static __inline void mac_txq6_tx_timeout_pack(uint32_t sw_txq6_timeout)
{
	uint32_t tmp;

	assert((((uint32_t)sw_txq6_timeout << SW_TXQ6_TIMEOUT_OFFSET) & ~((uint32_t)SW_TXQ6_TIMEOUT_MASK)) == 0);
	tmp =
		((uint32_t)sw_txq6_timeout << SW_TXQ6_TIMEOUT_OFFSET) ;
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_TX_TIMEOUT_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_TX_TIMEOUT_ADDR), tmp);
}
static __inline void mac_txq6_tx_timeout_unpack(volatile uint32_t* sw_txq6_timeout)
{
	uint32_t tmp;

	tmp = mac_txq6_tx_timeout_get();
	*sw_txq6_timeout = (tmp & ((uint32_t)SW_TXQ6_TIMEOUT_MASK)) >> SW_TXQ6_TIMEOUT_OFFSET;
}
static __inline void mac_txq6_cw_sw_txq6_cw_max_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_CW_ADDR);
	tmp &= ~SW_TXQ6_CW_MAX_MASK;
	tmp |= (value << SW_TXQ6_CW_MAX_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_CW_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_CW_ADDR), tmp);
}
static __inline uint32_t mac_txq6_cw_sw_txq6_cw_max_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_CW_ADDR)) & SW_TXQ6_CW_MAX_MASK) >> SW_TXQ6_CW_MAX_OFFSET;
}
static __inline void mac_txq6_cw_sw_txq6_cw_min_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_CW_ADDR);
	tmp &= ~SW_TXQ6_CW_MIN_MASK;
	tmp |= (value << SW_TXQ6_CW_MIN_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_CW_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_CW_ADDR), tmp);
}
static __inline uint32_t mac_txq6_cw_sw_txq6_cw_min_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_CW_ADDR)) & SW_TXQ6_CW_MIN_MASK) >> SW_TXQ6_CW_MIN_OFFSET;
}
static __inline void mac_txq6_cw_set(uint32_t value)
{
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_CW_ADDR, value);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_CW_ADDR), value);
}
static __inline uint32_t mac_txq6_cw_get(void)
{
	return (WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_CW_ADDR));
}
static __inline void mac_txq6_cw_pack(uint32_t sw_txq6_cw_max, uint32_t sw_txq6_cw_min)
{
	uint32_t tmp;

	assert((((uint32_t)sw_txq6_cw_max << SW_TXQ6_CW_MAX_OFFSET) & ~((uint32_t)SW_TXQ6_CW_MAX_MASK)) == 0);
	assert((((uint32_t)sw_txq6_cw_min << SW_TXQ6_CW_MIN_OFFSET) & ~((uint32_t)SW_TXQ6_CW_MIN_MASK)) == 0);
	tmp =
		((uint32_t)sw_txq6_cw_max << SW_TXQ6_CW_MAX_OFFSET) |
		((uint32_t)sw_txq6_cw_min << SW_TXQ6_CW_MIN_OFFSET) ;
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_CW_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_CW_ADDR), tmp);
}
static __inline void mac_txq6_cw_unpack(volatile uint32_t* sw_txq6_cw_max, volatile uint32_t* sw_txq6_cw_min)
{
	uint32_t tmp;

	tmp = mac_txq6_cw_get();
	*sw_txq6_cw_max = (tmp & ((uint32_t)SW_TXQ6_CW_MAX_MASK)) >> SW_TXQ6_CW_MAX_OFFSET;
	*sw_txq6_cw_min = (tmp & ((uint32_t)SW_TXQ6_CW_MIN_MASK)) >> SW_TXQ6_CW_MIN_OFFSET;
}
static __inline void mac_txq6_cw_force_sw_txq6_cw_rand_force_en_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_CW_FORCE_ADDR);
	tmp &= ~SW_TXQ6_CW_RAND_FORCE_EN_MASK;
	tmp |= (value << SW_TXQ6_CW_RAND_FORCE_EN_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_CW_FORCE_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_CW_FORCE_ADDR), tmp);
}
static __inline uint32_t mac_txq6_cw_force_sw_txq6_cw_rand_force_en_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_CW_FORCE_ADDR)) & SW_TXQ6_CW_RAND_FORCE_EN_MASK) >> SW_TXQ6_CW_RAND_FORCE_EN_OFFSET;
}
static __inline void mac_txq6_cw_force_sw_txq6_cw_rand_force_val_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_CW_FORCE_ADDR);
	tmp &= ~SW_TXQ6_CW_RAND_FORCE_VAL_MASK;
	tmp |= (value << SW_TXQ6_CW_RAND_FORCE_VAL_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_CW_FORCE_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_CW_FORCE_ADDR), tmp);
}
static __inline uint32_t mac_txq6_cw_force_sw_txq6_cw_rand_force_val_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_CW_FORCE_ADDR)) & SW_TXQ6_CW_RAND_FORCE_VAL_MASK) >> SW_TXQ6_CW_RAND_FORCE_VAL_OFFSET;
}
static __inline void mac_txq6_cw_force_set(uint32_t value)
{
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_CW_FORCE_ADDR, value);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_CW_FORCE_ADDR), value);
}
static __inline uint32_t mac_txq6_cw_force_get(void)
{
	return (WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_CW_FORCE_ADDR));
}
static __inline void mac_txq6_cw_force_pack(uint32_t sw_txq6_cw_rand_force_en, uint32_t sw_txq6_cw_rand_force_val)
{
	uint32_t tmp;

	assert((((uint32_t)sw_txq6_cw_rand_force_en << SW_TXQ6_CW_RAND_FORCE_EN_OFFSET) & ~((uint32_t)SW_TXQ6_CW_RAND_FORCE_EN_MASK)) == 0);
	assert((((uint32_t)sw_txq6_cw_rand_force_val << SW_TXQ6_CW_RAND_FORCE_VAL_OFFSET) & ~((uint32_t)SW_TXQ6_CW_RAND_FORCE_VAL_MASK)) == 0);
	tmp =
		((uint32_t)sw_txq6_cw_rand_force_en << SW_TXQ6_CW_RAND_FORCE_EN_OFFSET) |
		((uint32_t)sw_txq6_cw_rand_force_val << SW_TXQ6_CW_RAND_FORCE_VAL_OFFSET) ;
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_CW_FORCE_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_CW_FORCE_ADDR), tmp);
}
static __inline void mac_txq6_cw_force_unpack(volatile uint32_t* sw_txq6_cw_rand_force_en, volatile uint32_t* sw_txq6_cw_rand_force_val)
{
	uint32_t tmp;

	tmp = mac_txq6_cw_force_get();
	*sw_txq6_cw_rand_force_en = (tmp & ((uint32_t)SW_TXQ6_CW_RAND_FORCE_EN_MASK)) >> SW_TXQ6_CW_RAND_FORCE_EN_OFFSET;
	*sw_txq6_cw_rand_force_val = (tmp & ((uint32_t)SW_TXQ6_CW_RAND_FORCE_VAL_MASK)) >> SW_TXQ6_CW_RAND_FORCE_VAL_OFFSET;
}
static __inline void mac_txq6_bkoff_ctrl_sw_txq6_bkoff_seed_load_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_BKOFF_CTRL_ADDR);
	tmp &= ~SW_TXQ6_BKOFF_SEED_LOAD_MASK;
	tmp |= (value << SW_TXQ6_BKOFF_SEED_LOAD_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_BKOFF_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_BKOFF_CTRL_ADDR), tmp);
}
static __inline void mac_txq6_bkoff_ctrl_sw_txq6_bkoff_seed_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_BKOFF_CTRL_ADDR);
	tmp &= ~SW_TXQ6_BKOFF_SEED_MASK;
	tmp |= (value << SW_TXQ6_BKOFF_SEED_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_BKOFF_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_BKOFF_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_txq6_bkoff_ctrl_sw_txq6_bkoff_seed_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_BKOFF_CTRL_ADDR)) & SW_TXQ6_BKOFF_SEED_MASK) >> SW_TXQ6_BKOFF_SEED_OFFSET;
}
static __inline void mac_txq6_bkoff_ctrl_set(uint32_t value)
{
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_BKOFF_CTRL_ADDR, value);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_BKOFF_CTRL_ADDR), value);
}
static __inline uint32_t mac_txq6_bkoff_ctrl_get(void)
{
	return (WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_BKOFF_CTRL_ADDR));
}
static __inline void mac_txq6_bkoff_ctrl_pack(uint32_t sw_txq6_bkoff_seed_load, uint32_t sw_txq6_bkoff_seed)
{
	uint32_t tmp;

	assert((((uint32_t)sw_txq6_bkoff_seed_load << SW_TXQ6_BKOFF_SEED_LOAD_OFFSET) & ~((uint32_t)SW_TXQ6_BKOFF_SEED_LOAD_MASK)) == 0);
	assert((((uint32_t)sw_txq6_bkoff_seed << SW_TXQ6_BKOFF_SEED_OFFSET) & ~((uint32_t)SW_TXQ6_BKOFF_SEED_MASK)) == 0);
	tmp =
		((uint32_t)sw_txq6_bkoff_seed_load << SW_TXQ6_BKOFF_SEED_LOAD_OFFSET) |
		((uint32_t)sw_txq6_bkoff_seed << SW_TXQ6_BKOFF_SEED_OFFSET) ;
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_BKOFF_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_BKOFF_CTRL_ADDR), tmp);
}
static __inline void mac_txq6_bkoff_ctrl_unpack(volatile uint32_t* sw_txq6_bkoff_seed)
{
	uint32_t tmp;

	tmp = mac_txq6_bkoff_ctrl_get();
	*sw_txq6_bkoff_seed = (tmp & ((uint32_t)SW_TXQ6_BKOFF_SEED_MASK)) >> SW_TXQ6_BKOFF_SEED_OFFSET;
}
static __inline void mac_txq6_period_sw_txq6_txop_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_PERIOD_ADDR);
	tmp &= ~SW_TXQ6_TXOP_MASK;
	tmp |= (value << SW_TXQ6_TXOP_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_PERIOD_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_PERIOD_ADDR), tmp);
}
static __inline uint32_t mac_txq6_period_sw_txq6_txop_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_PERIOD_ADDR)) & SW_TXQ6_TXOP_MASK) >> SW_TXQ6_TXOP_OFFSET;
}
static __inline void mac_txq6_period_set(uint32_t value)
{
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_PERIOD_ADDR, value);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_PERIOD_ADDR), value);
}
static __inline uint32_t mac_txq6_period_get(void)
{
	return (WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_PERIOD_ADDR));
}
static __inline void mac_txq6_period_pack(uint32_t sw_txq6_txop)
{
	uint32_t tmp;

	assert((((uint32_t)sw_txq6_txop << SW_TXQ6_TXOP_OFFSET) & ~((uint32_t)SW_TXQ6_TXOP_MASK)) == 0);
	tmp =
		((uint32_t)sw_txq6_txop << SW_TXQ6_TXOP_OFFSET) ;
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_PERIOD_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_PERIOD_ADDR), tmp);
}
static __inline void mac_txq6_period_unpack(volatile uint32_t* sw_txq6_txop)
{
	uint32_t tmp;

	tmp = mac_txq6_period_get();
	*sw_txq6_txop = (tmp & ((uint32_t)SW_TXQ6_TXOP_MASK)) >> SW_TXQ6_TXOP_OFFSET;
}
static __inline void mac_txq6_int_ctrl_sw_txq6_desc_done_int_mitigation_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_INT_CTRL_ADDR);
	tmp &= ~SW_TXQ6_DESC_DONE_INT_MITIGATION_MASK;
	tmp |= (value << SW_TXQ6_DESC_DONE_INT_MITIGATION_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_INT_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_INT_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_txq6_int_ctrl_sw_txq6_desc_done_int_mitigation_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_INT_CTRL_ADDR)) & SW_TXQ6_DESC_DONE_INT_MITIGATION_MASK) >> SW_TXQ6_DESC_DONE_INT_MITIGATION_OFFSET;
}
static __inline void mac_txq6_int_ctrl_sw_txq6_desc_done_int_timeout_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_INT_CTRL_ADDR);
	tmp &= ~SW_TXQ6_DESC_DONE_INT_TIMEOUT_MASK;
	tmp |= (value << SW_TXQ6_DESC_DONE_INT_TIMEOUT_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_INT_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_INT_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_txq6_int_ctrl_sw_txq6_desc_done_int_timeout_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_INT_CTRL_ADDR)) & SW_TXQ6_DESC_DONE_INT_TIMEOUT_MASK) >> SW_TXQ6_DESC_DONE_INT_TIMEOUT_OFFSET;
}
static __inline void mac_txq6_int_ctrl_set(uint32_t value)
{
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_INT_CTRL_ADDR, value);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_INT_CTRL_ADDR), value);
}
static __inline uint32_t mac_txq6_int_ctrl_get(void)
{
	return (WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_INT_CTRL_ADDR));
}
static __inline void mac_txq6_int_ctrl_pack(uint32_t sw_txq6_desc_done_int_mitigation, uint32_t sw_txq6_desc_done_int_timeout)
{
	uint32_t tmp;

	assert((((uint32_t)sw_txq6_desc_done_int_mitigation << SW_TXQ6_DESC_DONE_INT_MITIGATION_OFFSET) & ~((uint32_t)SW_TXQ6_DESC_DONE_INT_MITIGATION_MASK)) == 0);
	assert((((uint32_t)sw_txq6_desc_done_int_timeout << SW_TXQ6_DESC_DONE_INT_TIMEOUT_OFFSET) & ~((uint32_t)SW_TXQ6_DESC_DONE_INT_TIMEOUT_MASK)) == 0);
	tmp =
		((uint32_t)sw_txq6_desc_done_int_mitigation << SW_TXQ6_DESC_DONE_INT_MITIGATION_OFFSET) |
		((uint32_t)sw_txq6_desc_done_int_timeout << SW_TXQ6_DESC_DONE_INT_TIMEOUT_OFFSET) ;
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_INT_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_INT_CTRL_ADDR), tmp);
}
static __inline void mac_txq6_int_ctrl_unpack(volatile uint32_t* sw_txq6_desc_done_int_mitigation, volatile uint32_t* sw_txq6_desc_done_int_timeout)
{
	uint32_t tmp;

	tmp = mac_txq6_int_ctrl_get();
	*sw_txq6_desc_done_int_mitigation = (tmp & ((uint32_t)SW_TXQ6_DESC_DONE_INT_MITIGATION_MASK)) >> SW_TXQ6_DESC_DONE_INT_MITIGATION_OFFSET;
	*sw_txq6_desc_done_int_timeout = (tmp & ((uint32_t)SW_TXQ6_DESC_DONE_INT_TIMEOUT_MASK)) >> SW_TXQ6_DESC_DONE_INT_TIMEOUT_OFFSET;
}
static __inline uint32_t mac_txq6_sts_0_sw_ro_txq6_desc_access_fsm_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_STS_0_ADDR)) & SW_RO_TXQ6_DESC_ACCESS_FSM_MASK) >> SW_RO_TXQ6_DESC_ACCESS_FSM_OFFSET;
}
static __inline uint32_t mac_txq6_sts_0_sw_ro_txq6_chn_acess_fsm_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_STS_0_ADDR)) & SW_RO_TXQ6_CHN_ACESS_FSM_MASK) >> SW_RO_TXQ6_CHN_ACESS_FSM_OFFSET;
}
static __inline uint32_t mac_txq6_sts_0_get(void)
{
	return (WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_STS_0_ADDR));
}
static __inline void mac_txq6_sts_0_unpack(volatile uint32_t* sw_ro_txq6_desc_access_fsm, volatile uint32_t* sw_ro_txq6_chn_acess_fsm)
{
	uint32_t tmp;

	tmp = mac_txq6_sts_0_get();
	*sw_ro_txq6_desc_access_fsm = (tmp & ((uint32_t)SW_RO_TXQ6_DESC_ACCESS_FSM_MASK)) >> SW_RO_TXQ6_DESC_ACCESS_FSM_OFFSET;
	*sw_ro_txq6_chn_acess_fsm = (tmp & ((uint32_t)SW_RO_TXQ6_CHN_ACESS_FSM_MASK)) >> SW_RO_TXQ6_CHN_ACESS_FSM_OFFSET;
}
static __inline uint32_t mac_txq6_dbg_bus_0_sts_sw_txq6_dbg_bus_0_sts_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_DBG_BUS_0_STS_ADDR)) & SW_TXQ6_DBG_BUS_0_STS_MASK) >> SW_TXQ6_DBG_BUS_0_STS_OFFSET;
}
static __inline uint32_t mac_txq6_dbg_bus_0_sts_get(void)
{
	return (WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_DBG_BUS_0_STS_ADDR));
}
static __inline void mac_txq6_dbg_bus_0_sts_unpack(volatile uint32_t* sw_txq6_dbg_bus_0_sts)
{
	uint32_t tmp;

	tmp = mac_txq6_dbg_bus_0_sts_get();
	*sw_txq6_dbg_bus_0_sts = (tmp & ((uint32_t)SW_TXQ6_DBG_BUS_0_STS_MASK)) >> SW_TXQ6_DBG_BUS_0_STS_OFFSET;
}
static __inline void mac_txq6_dbg_bus_0_clr_sw_txq6_dbg_bus_0_clr_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_DBG_BUS_0_CLR_ADDR);
	tmp &= ~SW_TXQ6_DBG_BUS_0_CLR_MASK;
	tmp |= (value << SW_TXQ6_DBG_BUS_0_CLR_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_DBG_BUS_0_CLR_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_DBG_BUS_0_CLR_ADDR), tmp);
}
static __inline void mac_txq6_dbg_bus_0_clr_set(uint32_t value)
{
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_DBG_BUS_0_CLR_ADDR, value);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_DBG_BUS_0_CLR_ADDR), value);
}
static __inline void mac_txq6_dbg_bus_0_clr_pack(uint32_t sw_txq6_dbg_bus_0_clr)
{
	uint32_t tmp;

	assert((((uint32_t)sw_txq6_dbg_bus_0_clr << SW_TXQ6_DBG_BUS_0_CLR_OFFSET) & ~((uint32_t)SW_TXQ6_DBG_BUS_0_CLR_MASK)) == 0);
	tmp =
		((uint32_t)sw_txq6_dbg_bus_0_clr << SW_TXQ6_DBG_BUS_0_CLR_OFFSET) ;
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_DBG_BUS_0_CLR_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_DBG_BUS_0_CLR_ADDR), tmp);
}
static __inline void mac_txq6_tx_stat_sts_clr_sw_txq6_rts_tx_ok_cnt_clr_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_TX_STAT_STS_CLR_ADDR);
	tmp &= ~SW_TXQ6_RTS_TX_OK_CNT_CLR_MASK;
	tmp |= (value << SW_TXQ6_RTS_TX_OK_CNT_CLR_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_TX_STAT_STS_CLR_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_TX_STAT_STS_CLR_ADDR), tmp);
}
static __inline void mac_txq6_tx_stat_sts_clr_sw_txq6_cts_tx_ok_cnt_clr_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_TX_STAT_STS_CLR_ADDR);
	tmp &= ~SW_TXQ6_CTS_TX_OK_CNT_CLR_MASK;
	tmp |= (value << SW_TXQ6_CTS_TX_OK_CNT_CLR_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_TX_STAT_STS_CLR_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_TX_STAT_STS_CLR_ADDR), tmp);
}
static __inline void mac_txq6_tx_stat_sts_clr_sw_txq6_frame_tx_ok_cnt_clr_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_TX_STAT_STS_CLR_ADDR);
	tmp &= ~SW_TXQ6_FRAME_TX_OK_CNT_CLR_MASK;
	tmp |= (value << SW_TXQ6_FRAME_TX_OK_CNT_CLR_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_TX_STAT_STS_CLR_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_TX_STAT_STS_CLR_ADDR), tmp);
}
static __inline void mac_txq6_tx_stat_sts_clr_sw_txq6_cfend_tx_ok_cnt_clr_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_TX_STAT_STS_CLR_ADDR);
	tmp &= ~SW_TXQ6_CFEND_TX_OK_CNT_CLR_MASK;
	tmp |= (value << SW_TXQ6_CFEND_TX_OK_CNT_CLR_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_TX_STAT_STS_CLR_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_TX_STAT_STS_CLR_ADDR), tmp);
}
static __inline void mac_txq6_tx_stat_sts_clr_sw_txq6_rts_tx_fail_cnt_clr_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_TX_STAT_STS_CLR_ADDR);
	tmp &= ~SW_TXQ6_RTS_TX_FAIL_CNT_CLR_MASK;
	tmp |= (value << SW_TXQ6_RTS_TX_FAIL_CNT_CLR_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_TX_STAT_STS_CLR_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_TX_STAT_STS_CLR_ADDR), tmp);
}
static __inline void mac_txq6_tx_stat_sts_clr_sw_txq6_frame_tx_fail_cnt_clr_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_TX_STAT_STS_CLR_ADDR);
	tmp &= ~SW_TXQ6_FRAME_TX_FAIL_CNT_CLR_MASK;
	tmp |= (value << SW_TXQ6_FRAME_TX_FAIL_CNT_CLR_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_TX_STAT_STS_CLR_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_TX_STAT_STS_CLR_ADDR), tmp);
}
static __inline void mac_txq6_tx_stat_sts_clr_set(uint32_t value)
{
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_TX_STAT_STS_CLR_ADDR, value);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_TX_STAT_STS_CLR_ADDR), value);
}
static __inline uint32_t mac_txq6_tx_stat_sts_clr_get(void)
{
	return (WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_TX_STAT_STS_CLR_ADDR));
}
static __inline void mac_txq6_tx_stat_sts_clr_pack(uint32_t sw_txq6_rts_tx_ok_cnt_clr, uint32_t sw_txq6_cts_tx_ok_cnt_clr, uint32_t sw_txq6_frame_tx_ok_cnt_clr, uint32_t sw_txq6_cfend_tx_ok_cnt_clr, uint32_t sw_txq6_rts_tx_fail_cnt_clr, uint32_t sw_txq6_frame_tx_fail_cnt_clr)
{
	uint32_t tmp;

	assert((((uint32_t)sw_txq6_rts_tx_ok_cnt_clr << SW_TXQ6_RTS_TX_OK_CNT_CLR_OFFSET) & ~((uint32_t)SW_TXQ6_RTS_TX_OK_CNT_CLR_MASK)) == 0);
	assert((((uint32_t)sw_txq6_cts_tx_ok_cnt_clr << SW_TXQ6_CTS_TX_OK_CNT_CLR_OFFSET) & ~((uint32_t)SW_TXQ6_CTS_TX_OK_CNT_CLR_MASK)) == 0);
	assert((((uint32_t)sw_txq6_frame_tx_ok_cnt_clr << SW_TXQ6_FRAME_TX_OK_CNT_CLR_OFFSET) & ~((uint32_t)SW_TXQ6_FRAME_TX_OK_CNT_CLR_MASK)) == 0);
	assert((((uint32_t)sw_txq6_cfend_tx_ok_cnt_clr << SW_TXQ6_CFEND_TX_OK_CNT_CLR_OFFSET) & ~((uint32_t)SW_TXQ6_CFEND_TX_OK_CNT_CLR_MASK)) == 0);
	assert((((uint32_t)sw_txq6_rts_tx_fail_cnt_clr << SW_TXQ6_RTS_TX_FAIL_CNT_CLR_OFFSET) & ~((uint32_t)SW_TXQ6_RTS_TX_FAIL_CNT_CLR_MASK)) == 0);
	assert((((uint32_t)sw_txq6_frame_tx_fail_cnt_clr << SW_TXQ6_FRAME_TX_FAIL_CNT_CLR_OFFSET) & ~((uint32_t)SW_TXQ6_FRAME_TX_FAIL_CNT_CLR_MASK)) == 0);
	tmp =
		((uint32_t)sw_txq6_rts_tx_ok_cnt_clr << SW_TXQ6_RTS_TX_OK_CNT_CLR_OFFSET) |
		((uint32_t)sw_txq6_cts_tx_ok_cnt_clr << SW_TXQ6_CTS_TX_OK_CNT_CLR_OFFSET) |
		((uint32_t)sw_txq6_frame_tx_ok_cnt_clr << SW_TXQ6_FRAME_TX_OK_CNT_CLR_OFFSET) |
		((uint32_t)sw_txq6_cfend_tx_ok_cnt_clr << SW_TXQ6_CFEND_TX_OK_CNT_CLR_OFFSET) |
		((uint32_t)sw_txq6_rts_tx_fail_cnt_clr << SW_TXQ6_RTS_TX_FAIL_CNT_CLR_OFFSET) |
		((uint32_t)sw_txq6_frame_tx_fail_cnt_clr << SW_TXQ6_FRAME_TX_FAIL_CNT_CLR_OFFSET) ;
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_TX_STAT_STS_CLR_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_TX_STAT_STS_CLR_ADDR), tmp);
}
static __inline uint32_t mac_txq6_tx_stat_sts_0_sw_ro_txq6_rts_tx_ok_cnt_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_TX_STAT_STS_0_ADDR)) & SW_RO_TXQ6_RTS_TX_OK_CNT_MASK) >> SW_RO_TXQ6_RTS_TX_OK_CNT_OFFSET;
}
static __inline uint32_t mac_txq6_tx_stat_sts_0_sw_ro_txq6_cts_tx_ok_cnt_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_TX_STAT_STS_0_ADDR)) & SW_RO_TXQ6_CTS_TX_OK_CNT_MASK) >> SW_RO_TXQ6_CTS_TX_OK_CNT_OFFSET;
}
static __inline uint32_t mac_txq6_tx_stat_sts_0_get(void)
{
	return (WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_TX_STAT_STS_0_ADDR));
}
static __inline void mac_txq6_tx_stat_sts_0_unpack(volatile uint32_t* sw_ro_txq6_rts_tx_ok_cnt, volatile uint32_t* sw_ro_txq6_cts_tx_ok_cnt)
{
	uint32_t tmp;

	tmp = mac_txq6_tx_stat_sts_0_get();
	*sw_ro_txq6_rts_tx_ok_cnt = (tmp & ((uint32_t)SW_RO_TXQ6_RTS_TX_OK_CNT_MASK)) >> SW_RO_TXQ6_RTS_TX_OK_CNT_OFFSET;
	*sw_ro_txq6_cts_tx_ok_cnt = (tmp & ((uint32_t)SW_RO_TXQ6_CTS_TX_OK_CNT_MASK)) >> SW_RO_TXQ6_CTS_TX_OK_CNT_OFFSET;
}
static __inline uint32_t mac_txq6_tx_stat_sts_1_sw_ro_txq6_frame_tx_ok_cnt_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_TX_STAT_STS_1_ADDR)) & SW_RO_TXQ6_FRAME_TX_OK_CNT_MASK) >> SW_RO_TXQ6_FRAME_TX_OK_CNT_OFFSET;
}
static __inline uint32_t mac_txq6_tx_stat_sts_1_sw_ro_txq6_cfend_tx_ok_cnt_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_TX_STAT_STS_1_ADDR)) & SW_RO_TXQ6_CFEND_TX_OK_CNT_MASK) >> SW_RO_TXQ6_CFEND_TX_OK_CNT_OFFSET;
}
static __inline uint32_t mac_txq6_tx_stat_sts_1_get(void)
{
	return (WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_TX_STAT_STS_1_ADDR));
}
static __inline void mac_txq6_tx_stat_sts_1_unpack(volatile uint32_t* sw_ro_txq6_frame_tx_ok_cnt, volatile uint32_t* sw_ro_txq6_cfend_tx_ok_cnt)
{
	uint32_t tmp;

	tmp = mac_txq6_tx_stat_sts_1_get();
	*sw_ro_txq6_frame_tx_ok_cnt = (tmp & ((uint32_t)SW_RO_TXQ6_FRAME_TX_OK_CNT_MASK)) >> SW_RO_TXQ6_FRAME_TX_OK_CNT_OFFSET;
	*sw_ro_txq6_cfend_tx_ok_cnt = (tmp & ((uint32_t)SW_RO_TXQ6_CFEND_TX_OK_CNT_MASK)) >> SW_RO_TXQ6_CFEND_TX_OK_CNT_OFFSET;
}
static __inline uint32_t mac_txq6_tx_stat_sts_2_sw_ro_txq6_rts_tx_fail_cnt_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_TX_STAT_STS_2_ADDR)) & SW_RO_TXQ6_RTS_TX_FAIL_CNT_MASK) >> SW_RO_TXQ6_RTS_TX_FAIL_CNT_OFFSET;
}
static __inline uint32_t mac_txq6_tx_stat_sts_2_sw_ro_txq6_frame_tx_fail_cnt_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_TX_STAT_STS_2_ADDR)) & SW_RO_TXQ6_FRAME_TX_FAIL_CNT_MASK) >> SW_RO_TXQ6_FRAME_TX_FAIL_CNT_OFFSET;
}
static __inline uint32_t mac_txq6_tx_stat_sts_2_get(void)
{
	return (WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_TX_STAT_STS_2_ADDR));
}
static __inline void mac_txq6_tx_stat_sts_2_unpack(volatile uint32_t* sw_ro_txq6_rts_tx_fail_cnt, volatile uint32_t* sw_ro_txq6_frame_tx_fail_cnt)
{
	uint32_t tmp;

	tmp = mac_txq6_tx_stat_sts_2_get();
	*sw_ro_txq6_rts_tx_fail_cnt = (tmp & ((uint32_t)SW_RO_TXQ6_RTS_TX_FAIL_CNT_MASK)) >> SW_RO_TXQ6_RTS_TX_FAIL_CNT_OFFSET;
	*sw_ro_txq6_frame_tx_fail_cnt = (tmp & ((uint32_t)SW_RO_TXQ6_FRAME_TX_FAIL_CNT_MASK)) >> SW_RO_TXQ6_FRAME_TX_FAIL_CNT_OFFSET;
}
static __inline uint32_t mac_txq6_tx_stat_sts_3_sw_ro_txq6_tx_desc_ptr_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_TX_STAT_STS_3_ADDR)) & SW_RO_TXQ6_TX_DESC_PTR_MASK) >> SW_RO_TXQ6_TX_DESC_PTR_OFFSET;
}
static __inline uint32_t mac_txq6_tx_stat_sts_3_get(void)
{
	return (WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_TX_STAT_STS_3_ADDR));
}
static __inline void mac_txq6_tx_stat_sts_3_unpack(volatile uint32_t* sw_ro_txq6_tx_desc_ptr)
{
	uint32_t tmp;

	tmp = mac_txq6_tx_stat_sts_3_get();
	*sw_ro_txq6_tx_desc_ptr = (tmp & ((uint32_t)SW_RO_TXQ6_TX_DESC_PTR_MASK)) >> SW_RO_TXQ6_TX_DESC_PTR_OFFSET;
}
static __inline uint32_t mac_txq6_pcs_busy_monitor_stat_sw_ro_txq6_pcs_busy_stuck_tx_cnt_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_PCS_BUSY_MONITOR_STAT_ADDR)) & SW_RO_TXQ6_PCS_BUSY_STUCK_TX_CNT_MASK) >> SW_RO_TXQ6_PCS_BUSY_STUCK_TX_CNT_OFFSET;
}
static __inline uint32_t mac_txq6_pcs_busy_monitor_stat_get(void)
{
	return (WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_PCS_BUSY_MONITOR_STAT_ADDR));
}
static __inline void mac_txq6_pcs_busy_monitor_stat_unpack(volatile uint32_t* sw_ro_txq6_pcs_busy_stuck_tx_cnt)
{
	uint32_t tmp;

	tmp = mac_txq6_pcs_busy_monitor_stat_get();
	*sw_ro_txq6_pcs_busy_stuck_tx_cnt = (tmp & ((uint32_t)SW_RO_TXQ6_PCS_BUSY_STUCK_TX_CNT_MASK)) >> SW_RO_TXQ6_PCS_BUSY_STUCK_TX_CNT_OFFSET;
}
static __inline void mac_txq6_dbg_cw_ctrl_sw_txq6_dbg_cw_clr_set(uint32_t value)
{
	uint32_t tmp;

	tmp  = WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_DBG_CW_CTRL_ADDR);
	tmp &= ~SW_TXQ6_DBG_CW_CLR_MASK;
	tmp |= (value << SW_TXQ6_DBG_CW_CLR_OFFSET);
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_DBG_CW_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_DBG_CW_CTRL_ADDR), tmp);
}
static __inline void mac_txq6_dbg_cw_ctrl_set(uint32_t value)
{
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_DBG_CW_CTRL_ADDR, value);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_DBG_CW_CTRL_ADDR), value);
}
static __inline uint32_t mac_txq6_dbg_cw_ctrl_get(void)
{
	return (WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_DBG_CW_CTRL_ADDR));
}
static __inline void mac_txq6_dbg_cw_ctrl_pack(uint32_t sw_txq6_dbg_cw_clr)
{
	uint32_t tmp;

	assert((((uint32_t)sw_txq6_dbg_cw_clr << SW_TXQ6_DBG_CW_CLR_OFFSET) & ~((uint32_t)SW_TXQ6_DBG_CW_CLR_MASK)) == 0);
	tmp =
		((uint32_t)sw_txq6_dbg_cw_clr << SW_TXQ6_DBG_CW_CLR_OFFSET) ;
	WQ_MAC_WRITE(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_DBG_CW_CTRL_ADDR, tmp);
	MAC_WRITE_LOG(__func__,(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_DBG_CW_CTRL_ADDR), tmp);
}
static __inline uint32_t mac_txq6_dbg_cw_sts_sw_ro_txq6_cw_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_DBG_CW_STS_ADDR)) & SW_RO_TXQ6_CW_MASK) >> SW_RO_TXQ6_CW_OFFSET;
}
static __inline uint32_t mac_txq6_dbg_cw_sts_sw_ro_txq6_cw_rtl_max_get(void)
{
	return ((WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_DBG_CW_STS_ADDR)) & SW_RO_TXQ6_CW_RTL_MAX_MASK) >> SW_RO_TXQ6_CW_RTL_MAX_OFFSET;
}
static __inline uint32_t mac_txq6_dbg_cw_sts_get(void)
{
	return (WQ_MAC_READ(MAC_TXQ_BASEADDR + CFG_MAC_TXQ6_DBG_CW_STS_ADDR));
}
static __inline void mac_txq6_dbg_cw_sts_unpack(volatile uint32_t* sw_ro_txq6_cw, volatile uint32_t* sw_ro_txq6_cw_rtl_max)
{
	uint32_t tmp;

	tmp = mac_txq6_dbg_cw_sts_get();
	*sw_ro_txq6_cw = (tmp & ((uint32_t)SW_RO_TXQ6_CW_MASK)) >> SW_RO_TXQ6_CW_OFFSET;
	*sw_ro_txq6_cw_rtl_max = (tmp & ((uint32_t)SW_RO_TXQ6_CW_RTL_MAX_MASK)) >> SW_RO_TXQ6_CW_RTL_MAX_OFFSET;
}




